This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
css/retrospective.css
css/style.css
index.html
js/retrospective.js
js/script.js
README.md
repomix-unpack.js
retrospective.html
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="css/retrospective.css">
/* Estilos Gerais da Retrospectiva */
.retrospective-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 1999;
    opacity: 0;
    transition: opacity 0.4s cubic-bezier(0.25, 0.1, 0.25, 1);
}

.retrospective-modal-overlay.show {
    display: block;
    opacity: 1;
}

.retrospective-modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.9);
    width: 95vw;
    max-width: 500px;
    height: 90vh;
    max-height: 750px;
    background: #000000;
    /* Será sobrescrito pelo .retrospective-screen */
    border: 1px solid rgba(var(--primary-color-dark-rgb, 10, 124, 255), 0.2);
    border-radius: 12px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.7);
    z-index: 2000;
    opacity: 0;
    transition: opacity 0.4s cubic-bezier(0.25, 0.1, 0.25, 1), transform 0.4s cubic-bezier(0.25, 0.1, 0.25, 1);
    overflow: hidden;
    color: #FFFFFF;
    font-family: -apple-system, BlinkMacSystemFont, 'CircularSp', 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.retrospective-modal.show {
    display: flex;
    flex-direction: column;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

body.light .retrospective-modal-overlay {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(8px);
}

body.light .retrospective-modal {
    /* background: #FFFFFF; Será sobrescrito pelo .retrospective-screen */
    border-color: rgba(var(--primary-color-light-rgb, 10, 124, 255), 0.3);
    color: #121212;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
}

/* Botão de Controle de Música e Fechar (X) */
.retrospective-music-control-button,
.retrospective-final-close-x-btn {
    position: absolute;
    top: 15px;
    background-color: rgba(255, 255, 255, 0.1);
    color: #FFFFFF;
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    font-size: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease, opacity 0.3s ease;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    opacity: 0.8;
}

.retrospective-music-control-button {
    left: 15px;
    z-index: 2011;
}

.retrospective-final-close-x-btn {
    right: 15px;
    z-index: 2012;
}


.retrospective-music-control-button:hover,
.retrospective-final-close-x-btn:hover {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    transform: scale(1.1);
    opacity: 1;
}

.retrospective-music-control-button:active,
.retrospective-final-close-x-btn:active {
    transform: scale(1);
}

body.light .retrospective-music-control-button,
body.light .retrospective-final-close-x-btn {
    background-color: rgba(0, 0, 0, 0.08);
    color: var(--text-color-light, #222);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

body.light .retrospective-music-control-button:hover,
body.light .retrospective-final-close-x-btn:hover {
    background-color: rgba(0, 0, 0, 0.15);
}


/* Animações de Transição de Tela */
@keyframes fadeInFromDirection {
    from {
        opacity: 0;
        transform: var(--transform-from) scale(0.97);
    }

    to {
        opacity: 1;
        transform: translateX(0) scale(1);
    }
}

@keyframes fadeOutToDirection {
    from {
        opacity: 1;
        transform: translateX(0) scale(1);
    }

    to {
        opacity: 0;
        transform: var(--transform-to) scale(0.97);
        visibility: hidden;
    }
}

.retrospective-screen {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px clamp(15px, 4vw, 25px);
    box-sizing: border-box;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    visibility: hidden;
    transform-origin: center center;
    overflow-y: auto;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch;
    transform-style: preserve-3d;
    backface-visibility: hidden;
    background: linear-gradient(160deg,
            color-mix(in srgb, rgba(var(--primary-color-dark-rgb, 10, 124, 255), 1) 30%, #000000 70%),
            #000000 60%,
            color-mix(in srgb, rgba(var(--primary-color-dark-rgb, 10, 124, 255), 1) 15%, #000000 85%) 100%);
    color: var(--text-color-dark, #FFFFFF);
}

body.light .retrospective-screen {
    background: linear-gradient(160deg,
            color-mix(in srgb, rgba(var(--primary-color-light-rgb, 10, 124, 255), 1) 30%, #ffffff 70%),
            #ffffff 60%,
            color-mix(in srgb, rgba(var(--primary-color-light-rgb, 10, 124, 255), 1) 15%, #ffffff 85%) 100%);
    color: var(--text-color-light, #121212);
}

.retrospective-screen.active {
    opacity: 1;
    visibility: visible;
    --transform-from: translateX(40px);
    animation: fadeInFromDirection 0.7s cubic-bezier(0.3, 0, 0.1, 1) forwards;
    z-index: 10;
}

.retrospective-screen.previous {
    opacity: 0;
    visibility: hidden;
    --transform-to: translateX(-40px);
    animation: fadeOutToDirection 0.7s cubic-bezier(0.3, 0, 0.1, 1) forwards;
    z-index: 1;
}

.retrospective-screen.next-out {
    opacity: 0;
    visibility: hidden;
    --transform-to: translateX(40px);
    animation: fadeOutToDirection 0.7s cubic-bezier(0.3, 0, 0.1, 1) forwards;
    z-index: 1;
}

.retrospective-screen.previous-in.active {
    opacity: 1;
    visibility: visible;
    --transform-from: translateX(-40px);
    animation: fadeInFromDirection 0.7s cubic-bezier(0.3, 0, 0.1, 1) forwards;
    z-index: 10;
}

.retrospective-content-wrapper {
    width: 100%;
    max-width: 100%;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-grow: 1;
    padding: 5px 0;
    flex-shrink: 0;
}

/* Garante que o conteúdo de telas específicas não cause scroll */
#retrospective-main-stats-screen .retrospective-content-wrapper,
#retrospective-productive-day-screen .retrospective-content-wrapper,
#retrospective-comparison-screen .retrospective-content-wrapper {
    justify-content: center;
    overflow: hidden;
}

#retrospective-main-stats-screen,
#retrospective-productive-day-screen,
#retrospective-comparison-screen {
    overflow: hidden;
}


.retrospective-text-center {
    text-align: center;
}

/* Tela de Seleção de Métricas */
.retrospective-selection-card {
    background: transparent;
    border: none;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 20px;
    width: 100%;
    max-width: 400px;
    flex-grow: 1;
}

.retrospective-logo-icon-wrapper {
    width: 70px;
    height: 70px;
    margin: 0 auto 15px;
    background: linear-gradient(135deg, var(--primary-color-dark, #0A7CFF) 0%, color-mix(in srgb, var(--primary-color-dark, #0A7CFF) 60%, #000000 40%) 100%);
    border-radius: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 6px 20px rgba(var(--primary-color-dark-rgb, 10, 124, 255), 0.3);
}

body.light .retrospective-logo-icon-wrapper {
    background: linear-gradient(135deg, var(--primary-color-light, #0A7CFF) 0%, color-mix(in srgb, var(--primary-color-light, #0A7CFF) 70%, #ffffff 30%) 100%);
    box-shadow: 0 6px 20px rgba(var(--primary-color-light-rgb, 10, 124, 255), 0.2);
}

.retrospective-logo-icon-wrapper .retrospective-icon {
    font-size: 32px;
    color: white;
}

.retrospective-main-title {
    font-size: clamp(28px, 6vw, 32px);
    font-weight: 700;
    color: var(--text-color-dark, #FFFFFF);
    margin-bottom: 5px;
    text-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

body.light .retrospective-main-title {
    color: var(--text-color-light, #222);
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.retrospective-month {
    font-size: clamp(16px, 4vw, 18px);
    color: rgba(var(--text-color-dark-rgb, 255, 255, 255), 0.7);
    margin-bottom: 20px;
    font-weight: 500;
}

body.light .retrospective-month {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), 0.7);
}

.retrospective-selection-prompt {
    font-size: clamp(15px, 3.5vw, 17px);
    color: rgba(var(--text-color-dark-rgb, 255, 255, 255), 0.8);
    margin-bottom: 15px;
    font-weight: 500;
}

body.light .retrospective-selection-prompt {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), 0.8);
}

.retrospective-metrics-selection {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
}

.retrospective-metric-button {
    width: 100%;
    padding: 14px 20px;
    font-size: clamp(16px, 3.8vw, 17px);
    font-weight: 500;
    border-radius: 8px;
    border: 1px solid var(--card-border-dark, rgba(255, 255, 255, 0.15));
    background-color: var(--card-bg-dark, rgba(255, 255, 255, 0.07));
    color: var(--text-color-dark, #FFFFFF);
    display: flex;
    align-items: center;
    gap: 12px;
    transition: all .2s cubic-bezier(.25, .1, .25, 1);
    text-align: left;
    box-shadow: 0 3px 10px rgba(0, 0, 0, .15);
}

.retrospective-metric-button .retrospective-icon {
    font-size: 20px;
    color: rgba(var(--text-color-dark-rgb, 255, 255, 255), 0.7);
    transition: color .2s ease;
    min-width: 22px;
    text-align: center;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

body.light .retrospective-metric-button {
    background-color: var(--card-bg-light, rgba(0, 0, 0, 0.04));
    border-color: var(--card-border-light, rgba(0, 0, 0, 0.1));
    color: var(--text-color-light, #222);
}

body.light .retrospective-metric-button .retrospective-icon {
    color: var(--text-muted-light, #555);
}

.retrospective-metric-button:hover {
    border-color: var(--primary-color-dark);
    background-color: rgba(var(--primary-color-dark-rgb), 0.15);
    transform: translateY(-2px) scale(1.01);
    box-shadow: 0 5px 15px rgba(var(--primary-color-dark-rgb), 0.2);
}

.retrospective-metric-button:active {
    transform: translateY(0px) scale(.99);
}

body.light .retrospective-metric-button:hover {
    border-color: var(--primary-color-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.15);
}

body.light .retrospective-metric-button:hover .retrospective-icon {
    color: var(--primary-color-light);
}

.retrospective-metric-button.selected {
    background-color: var(--primary-color-dark);
    color: white;
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 15px rgba(var(--primary-color-dark-rgb), .5);
}

.retrospective-metric-button.selected .retrospective-icon {
    color: white;
}

.retrospective-metric-button .retrospective-checkmark-placeholder {
    margin-left: auto;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform .2s ease;
}

.retrospective-metric-button.selected .retrospective-checkmark-placeholder::before {
    content: "\F26E";
    font-family: 'bootstrap-icons';
    font-size: 22px;
    transform: scale(1.1);
}

body.light .retrospective-metric-button.selected {
    background-color: var(--primary-color-light);
    border-color: var(--primary-color-light);
    box-shadow: 0 0 15px rgba(var(--primary-color-light-rgb), .5);
}

body.light .retrospective-metric-button.selected .retrospective-icon {
    color: var(--card-bg-light, #FFFFFF);
}

.retrospective-metric-button .retrospective-checkmark-placeholder::before {
    color: white;
}

body.light .retrospective-metric-button.selected .retrospective-checkmark-placeholder::before {
    color: var(--card-bg-light, #FFFFFF);
}

.retrospective-button {
    padding: 12px 28px;
    font-size: clamp(15px, 3.5vw, 16px);
    font-weight: 700;
    border-radius: 50px;
    border: none;
    transition: all .2s cubic-bezier(.25, .1, .25, 1);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    text-transform: uppercase;
    letter-spacing: .8px;
    cursor: pointer;
    line-height: 1.3;
}

.retrospective-button:active {
    transform: scale(.97);
}

.retrospective-start-button {
    width: 100%;
    max-width: 280px;
    background: var(--primary-color-dark);
    color: white;
    box-shadow: 0 4px 15px rgba(var(--primary-color-dark-rgb), .3);
    margin-top: 10px;
}

body.light .retrospective-start-button {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #FFFFFF);
    box-shadow: 0 4px 15px rgba(var(--primary-color-light-rgb), .3);
}

.retrospective-start-button:hover {
    transform: scale(1.03);
    opacity: .9;
    box-shadow: 0 6px 20px rgba(var(--primary-color-dark-rgb), .4);
}

body.light .retrospective-start-button:hover {
    box-shadow: 0 6px 20px rgba(var(--primary-color-light-rgb), .4);
}

.retrospective-start-button:disabled {
    background: #535353;
    color: #A0A0A0;
    cursor: not-allowed;
    opacity: 1;
    box-shadow: none;
    transform: scale(1);
}

body.light .retrospective-start-button:disabled {
    background-color: #B3B3B3;
    color: #757575;
}

/* Tela de Introdução */
#retrospective-intro-screen .retrospective-content-wrapper {
    justify-content: center;
    align-items: center;
    flex-grow: 1;
}

.retrospective-intro-content {
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    width: 100%;
}

.retrospective-intro-icon-wrapper {
    width: clamp(100px, 25vw, 130px);
    height: clamp(100px, 25vw, 130px);
    margin-bottom: 30px;
    background: linear-gradient(145deg, color-mix(in srgb, var(--primary-color-dark, #0A7CFF) 90%, #fff 10%), var(--primary-color-dark, #0A7CFF));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: pulseStar 2.2s infinite cubic-bezier(.455, .03, .515, .955);
    box-shadow: 0 0 30px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .5);
}

body.light .retrospective-intro-icon-wrapper {
    background: linear-gradient(145deg, color-mix(in srgb, var(--primary-color-light, #0A7CFF) 90%, #333 10%), var(--primary-color-light, #0A7CFF));
    box-shadow: 0 0 30px rgba(var(--primary-color-light-rgb, 10, 124, 255), .4);
}

.retrospective-intro-icon-wrapper .retrospective-icon-large {
    font-size: clamp(50px, 12vw, 65px);
    color: #fff;
}

@keyframes pulseStar {
    0% {
        transform: scale(1);
        filter: drop-shadow(0 0 8px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .4));
    }

    50% {
        transform: scale(1.1);
        filter: drop-shadow(0 0 20px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .7));
    }

    100% {
        transform: scale(1);
        filter: drop-shadow(0 0 8px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .4));
    }
}

body.light .pulse-effect {
    animation: pulseStar 2s infinite;
}


.retrospective-intro-title {
    font-size: clamp(34px, 9vw, 48px);
    font-weight: 800;
    margin-bottom: 12px;
    line-height: 1.15;
    background: linear-gradient(45deg, var(--primary-color-dark, #0A7CFF) 0%, color-mix(in srgb, var(--primary-color-dark, #0A7CFF) 70%, #fff 30%) 50%, var(--primary-color-dark, #0A7CFF) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, .3));
}

body.light .retrospective-intro-title {
    background: linear-gradient(45deg, var(--primary-color-light, #0A7CFF) 0%, color-mix(in srgb, var(--primary-color-light, #0A7CFF) 70%, #000 30%) 50%, var(--primary-color-light, #0A7CFF) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, .15));
}

.retrospective-intro-subtitle {
    font-size: clamp(18px, 4.5vw, 22px);
    color: rgba(255, 255, 255, .75);
    margin-bottom: 40px;
    font-weight: 400;
}

body.light .retrospective-intro-subtitle {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .7);
}

.retrospective-intro-button {
    background: var(--primary-color-dark, #0A7CFF);
    color: #fff;
    padding: 14px 32px;
    font-size: clamp(16px, 4vw, 18px);
    box-shadow: 0 5px 20px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .4);
}

body.light .retrospective-intro-button {
    background: var(--primary-color-light, #0A7CFF);
    color: var(--card-bg-light, #fff);
    box-shadow: 0 5px 20px rgba(var(--primary-color-light-rgb, 10, 124, 255), .4);
}

.retrospective-intro-button:hover {
    transform: scale(1.05) translateY(-2px);
    opacity: .9;
    box-shadow: 0 8px 25px rgba(var(--primary-color-dark-rgb, 10, 124, 255), .5);
}

body.light .retrospective-intro-button:hover {
    box-shadow: 0 8px 25px rgba(var(--primary-color-light-rgb, 10, 124, 255), .5);
}

/* Tela de Estatísticas Principais ("Brilharam!") */
.retrospective-screen-title {
    font-size: clamp(26px, 7vw, 36px);
    font-weight: 700;
    margin-bottom: 25px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    color: var(--text-color-dark, #FFFFFF);
    text-shadow: 0 2px 6px rgba(0, 0, 0, .3);
}

body.light .retrospective-screen-title {
    color: var(--text-color-light, #222);
    text-shadow: 0 1px 4px rgba(0, 0, 0, .15);
}

.retrospective-title-icon {
    font-size: .85em;
    color: var(--primary-color-dark);
    filter: brightness(1.2) saturate(1.2);
    text-shadow: 0 0 10px rgba(var(--primary-color-dark-rgb), .7);
}

body.light .retrospective-title-icon {
    color: var(--primary-color-light);
    text-shadow: 0 0 10px rgba(var(--primary-color-light-rgb), .6);
}

.retrospective-stats-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 25px;
    width: 100%;
    max-width: 100%;
    justify-content: center;
    align-items: stretch;
}

.retrospective-stat-card {
    background: var(--card-bg-dark, rgba(var(--primary-color-dark-rgb), .08));
    border: 1px solid var(--card-border-dark, rgba(var(--primary-color-dark-rgb), .2));
    box-shadow: 0 4px 15px rgba(var(--primary-color-dark-rgb), .1);
    padding: clamp(15px, 3vw, 20px);
    border-radius: 10px;
    text-align: center;
    transition: transform .25s cubic-bezier(.25, .1, .25, 1), box-shadow .25s cubic-bezier(.25, .1, .25, 1);
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    min-height: clamp(170px, 38vw, 190px);
    flex-grow: 1;
    flex-basis: calc(33.333% - 10px);
    min-width: 140px;
}

body.light .retrospective-stat-card {
    background: var(--card-bg-light, rgba(var(--primary-color-light-rgb), .08));
    border-color: var(--card-border-light, rgba(var(--primary-color-light-rgb), .25));
    box-shadow: 0 4px 15px rgba(var(--primary-color-light-rgb), .1);
}

.retrospective-stats-grid:has(> .retrospective-stat-card:nth-child(1):not(:nth-child(2))) .retrospective-stat-card {
    flex-basis: clamp(180px, 55%, 260px);
    max-width: 260px;
}

.retrospective-stats-grid:has(> .retrospective-stat-card:nth-child(2):not(:nth-child(3))) .retrospective-stat-card {
    flex-basis: calc(50% - 7.5px);
    max-width: calc(50% - 7.5px);
}

.retrospective-stat-card:hover {
    transform: translateY(-4px) scale(1.03);
    box-shadow: 0 8px 25px rgba(var(--primary-color-dark-rgb), .15);
}

body.light .retrospective-stat-card:hover {
    box-shadow: 0 8px 25px rgba(var(--primary-color-light-rgb), .15);
}

.retrospective-stat-card:active {
    transform: translateY(0) scale(1);
}

@keyframes metricCardAppear {
    from {
        opacity: 0;
        transform: translateY(20px) scale(.96);
    }

    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.animated-metric-card {
    opacity: 0;
    animation: metricCardAppear .5s cubic-bezier(.25, .1, .25, 1) forwards;
}

.retrospective-stats-grid>.animated-metric-card:nth-child(1) {
    animation-delay: .1s;
}

.retrospective-stats-grid>.animated-metric-card:nth-child(2) {
    animation-delay: .2s;
}

.retrospective-stats-grid>.animated-metric-card:nth-child(3) {
    animation-delay: .3s;
}

.retrospective-icon-large {
    font-size: 48px;
    margin-bottom: 15px;
}

.retrospective-icon-medium {
    font-size: 24px;
}

.retrospective-icon-small {
    font-size: 16px;
}

.retrospective-icon-xlarge {
    font-size: 75px;
    margin-bottom: 25px;
}

.retrospective-stat-card .retrospective-icon-large {
    font-size: clamp(32px, 7.5vw, 40px);
    margin-bottom: 10px;
    color: var(--primary-color-dark);
    filter: brightness(1.1);
}

body.light .retrospective-stat-card .retrospective-icon-large {
    color: var(--primary-color-light);
}

.retrospective-stat-value {
    font-size: clamp(28px, 8vw, 38px);
    font-weight: 700;
    color: var(--text-color-dark, #FFFFFF);
    margin-bottom: 4px;
    line-height: 1.1;
    text-shadow: 0 0 10px rgba(var(--primary-color-dark-rgb), .3);
}

body.light .retrospective-stat-value {
    color: var(--text-color-light, #222);
    text-shadow: 0 0 8px rgba(var(--primary-color-light-rgb), .2);
}

.retrospective-stat-label {
    font-size: clamp(12px, 2.8vw, 14px);
    color: rgba(var(--text-color-dark-rgb, 255, 255, 255), .7);
    margin-bottom: 8px;
    flex-grow: 1;
    line-height: 1.3;
}

body.light .retrospective-stat-label {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .65);
}

.retrospective-badge {
    display: block;
    padding: 6px 9px;
    border-radius: 6px;
    font-size: clamp(10px, 2.3vw, 12px);
    line-height: 1.3;
    font-weight: 500;
    text-transform: none;
    letter-spacing: .2px;
    word-break: break-word;
    white-space: normal;
    margin-top: auto;
    background-color: rgba(var(--primary-color-dark-rgb), .2);
    color: var(--primary-color-dark);
    border: 1px solid rgba(var(--primary-color-dark-rgb), .4);
    filter: brightness(1.1);
}

body.light .retrospective-badge {
    background-color: rgba(var(--primary-color-light-rgb), .2);
    color: var(--primary-color-light);
    border: 1px solid rgba(var(--primary-color-light-rgb), .4);
}

.retrospective-navigation-button {
    background: var(--primary-color-dark);
    color: #fff;
    margin-top: 20px;
    margin-bottom: 10px;
}

body.light .retrospective-navigation-button {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #fff);
}

.retrospective-navigation-button:hover {
    opacity: .9;
    transform: scale(1.03);
}

/* Tela Dia Mais Produtivo */
.retrospective-icon-container .retrospective-icon-xlarge {
    font-size: clamp(60px, 15vw, 70px);
    margin-bottom: 20px;
    color: var(--primary-color-dark);
    filter: brightness(1.3) saturate(1.3);
    text-shadow: 0 0 20px rgba(var(--primary-color-dark-rgb), .6);
}

body.light .retrospective-icon-container .retrospective-icon-xlarge {
    color: var(--primary-color-light);
    text-shadow: 0 0 20px rgba(var(--primary-color-light-rgb), .5);
}

#retrospective-productive-day-screen .retrospective-screen-title {
    background: linear-gradient(135deg, var(--primary-color-dark), color-mix(in srgb, var(--primary-color-dark) 60%, #fff 40%));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, .2));
}

body.light #retrospective-productive-day-screen .retrospective-screen-title {
    background: linear-gradient(135deg, var(--primary-color-light), color-mix(in srgb, var(--primary-color-light) 60%, #000 40%));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
}

.retrospective-productive-day-card {
    background: rgba(var(--primary-color-dark-rgb), .1);
    border: 1px solid rgba(var(--primary-color-dark-rgb), .25);
    padding: clamp(20px, 4vw, 25px);
    border-radius: 10px;
    margin-bottom: 20px;
    box-shadow: 0 0 20px rgba(var(--primary-color-dark-rgb), .15);
    width: 100%;
    max-width: 400px;
}

body.light .retrospective-productive-day-card {
    background: rgba(var(--primary-color-light-rgb), .1);
    border: 1px solid rgba(var(--primary-color-light-rgb), .25);
    box-shadow: 0 0 20px rgba(var(--primary-color-light-rgb), .15);
}

.retrospective-productive-day-date {
    font-size: clamp(40px, 12vw, 54px);
    font-weight: 700;
    color: var(--text-color-dark, #FFFFFF);
    margin-bottom: 8px;
    text-shadow: 0 0 10px rgba(var(--primary-color-dark-rgb), .4);
}

body.light .retrospective-productive-day-date {
    color: var(--text-color-light, #222);
    text-shadow: 0 0 10px rgba(var(--primary-color-light-rgb), .3);
}

.retrospective-productive-day-value {
    font-size: clamp(16px, 4vw, 19px);
    color: color-mix(in srgb, var(--primary-color-dark) 80%, #fff 20%);
    margin-bottom: 15px;
    line-height: 1.4;
    font-weight: 500;
}

body.light .retrospective-productive-day-value {
    color: color-mix(in srgb, var(--primary-color-light) 80%, #333 20%);
}

.retrospective-stars-container {
    display: flex;
    justify-content: center;
    gap: 8px;
}

.retrospective-stars-container i {
    text-shadow: 0 0 7px var(--primary-color-dark);
    font-size: clamp(20px, 5vw, 24px);
    color: var(--primary-color-dark);
    filter: brightness(1.2);
}

body.light .retrospective-stars-container i {
    text-shadow: 0 0 7px var(--primary-color-light);
    color: var(--primary-color-light);
}

.retrospective-motivational-text {
    font-size: clamp(17px, 4.2vw, 20px);
    color: rgba(var(--text-color-dark-rgb, 255, 255, 255), .75);
    margin-bottom: 25px;
    font-weight: 300;
}

body.light .retrospective-motivational-text {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .7);
}

.retrospective-highlight-primary {
    color: var(--primary-color-dark);
    font-weight: 600;
    text-shadow: 0 0 5px var(--primary-color-dark);
}

body.light .retrospective-highlight-primary {
    color: var(--primary-color-light);
    text-shadow: 0 0 5px var(--primary-color-light);
}

#retrospective-productive-day-next-button.retrospective-button {
    background: var(--primary-color-dark);
    color: #fff;
    box-shadow: 0 4px 15px rgba(var(--primary-color-dark-rgb), .4);
}

body.light #retrospective-productive-day-next-button.retrospective-button {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #fff);
    box-shadow: 0 4px 15px rgba(var(--primary-color-light-rgb), .4);
}

#retrospective-productive-day-next-button.retrospective-button:hover {
    opacity: .9;
    transform: scale(1.03);
    box-shadow: 0 6px 20px rgba(var(--primary-color-dark-rgb), .5);
}

body.light #retrospective-productive-day-next-button.retrospective-button:hover {
    box-shadow: 0 6px 20px rgba(var(--primary-color-light-rgb), .5);
}

/* === Tela Padrões de Produtividade === */
#retrospective-time-patterns-screen .retrospective-content-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: clamp(10px, 1.8vh, 15px);
    width: 100%;
    flex-grow: 1;
    align-items: center;
}

#retrospective-time-patterns-screen .retrospective-screen-title {
    color: var(--text-color-dark, #FFFFFF);
    margin-bottom: clamp(8px, 1.5vh, 12px);
    flex-shrink: 0;
}

body.light #retrospective-time-patterns-screen .retrospective-screen-title {
    color: var(--text-color-light, #222);
}

#retrospective-time-patterns-screen .retrospective-time-patterns-main-content {
    display: flex;
    flex-direction: column;
    gap: clamp(8px, 1.5vh, 12px);
    width: 100%;
    flex-grow: 1;
    justify-content: flex-start;
}

#retrospective-time-patterns-screen .retrospective-time-patterns-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: clamp(8px, 1.5vh, 12px);
    width: 100%;
    flex-shrink: 0;
}

#retrospective-time-patterns-screen .retrospective-time-patterns-grid .retrospective-stat-card,
#retrospective-time-patterns-screen .retrospective-card-indigo {
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    color: var(--text-color-dark);
    padding: clamp(10px, 1.8vh, 15px);
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
}

body.light #retrospective-time-patterns-screen .retrospective-time-patterns-grid .retrospective-stat-card,
body.light #retrospective-time-patterns-screen .retrospective-card-indigo {
    background: var(--card-bg-light);
    border: 1px solid var(--card-border-light);
    color: var(--text-color-light);
}

#retrospective-time-patterns-screen .retrospective-time-patterns-grid .retrospective-stat-card {
    min-height: clamp(110px, 18vh, 130px);
    flex-grow: 0;
    flex-shrink: 1;
}

#retrospective-time-patterns-screen .retrospective-time-patterns-grid .retrospective-stat-card:hover {
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
    transform: translateY(-2px);
}

#retrospective-time-patterns-screen .retrospective-card-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: clamp(5px, 1vh, 8px);
}

#retrospective-time-patterns-screen .retrospective-card-header .retrospective-icon-large {
    color: var(--primary-color-dark);
    font-size: clamp(24px, 4.5vw, 28px);
    margin-bottom: 5px;
}

body.light #retrospective-time-patterns-screen .retrospective-card-header .retrospective-icon-large {
    color: var(--primary-color-light);
}

#retrospective-time-patterns-screen .retrospective-card-title {
    color: var(--text-color-dark);
    font-size: clamp(14px, 3vw, 16px);
    font-weight: 600;
    margin-bottom: 3px;
}

body.light #retrospective-time-patterns-screen .retrospective-card-title {
    color: var(--text-color-light);
}

#retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-value {
    color: var(--text-color-dark);
    font-size: clamp(26px, 6.5vw, 34px);
    font-weight: 700;
    margin-bottom: 2px;
    line-height: 1.1;
}

body.light #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-value {
    color: var(--text-color-light);
}

#retrospective-time-patterns-screen .retrospective-stat-card .retrospective-card-subtitle,
#retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-label {
    color: var(--text-muted-dark);
    font-size: clamp(11px, 2.5vw, 13px);
    line-height: 1.2;
}

body.light #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-card-subtitle,
body.light #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-label {
    color: var(--text-muted-light);
}

/* Card de Distribuição Semanal */
#retrospective-time-patterns-screen .retrospective-card-indigo {
    min-height: clamp(150px, 25vh, 200px);
    width: 100%;
    justify-content: space-between;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

#retrospective-time-patterns-screen .retrospective-weekday-chart {
    min-height: 70px;
    height: clamp(70px, 13vh, 100px);
    width: 100%;
    display: flex;
    justify-content: space-around;
    align-items: flex-end;
    margin-top: auto;
    flex-grow: 1;
    padding-bottom: 3px;
}

.retrospective-weekday-bar-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    justify-content: flex-end;
    flex-basis: 12%;
    max-width: 35px;
}

.retrospective-weekday-bar {
    width: clamp(15px, 3.5vw, 24px);
    background: var(--primary-color-dark);
    border-radius: 4px 4px 0 0;
    transition: height 0.5s ease-out, background-color 0.3s ease, filter 0.2s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
}

body.light .retrospective-weekday-bar {
    background: var(--primary-color-light);
}

.retrospective-weekday-bar:hover {
    filter: brightness(1.2);
}

.retrospective-weekday-label {
    margin-top: 6px;
    font-size: clamp(10px, 2vw, 12px);
    color: var(--text-muted-dark);
    text-align: center;
}

body.light .retrospective-weekday-label {
    color: var(--text-muted-light);
}

#retrospective-time-patterns-screen #retrospective-time-patterns-next-button.retrospective-button {
    background: var(--primary-color-dark);
    color: white;
    box-shadow: 0 4px 15px rgba(var(--primary-color-dark-rgb), 0.3);
    margin-top: clamp(15px, 2vh, 20px);
    align-self: center;
    flex-shrink: 0;
}

body.light #retrospective-time-patterns-screen #retrospective-time-patterns-next-button.retrospective-button {
    background: var(--primary-color-light);
    box-shadow: 0 4px 15px rgba(var(--primary-color-light-rgb), 0.3);
}

#retrospective-time-patterns-screen #retrospective-time-patterns-next-button.retrospective-button:hover {
    opacity: 0.9;
    box-shadow: 0 6px 20px rgba(var(--primary-color-dark-rgb), 0.4);
}

body.light #retrospective-time-patterns-screen #retrospective-time-patterns-next-button.retrospective-button:hover {
    box-shadow: 0 6px 20px rgba(var(--primary-color-light-rgb), 0.4);
}


/* === Tela Comparação === */
#retrospective-comparison-screen .retrospective-content-wrapper {
    gap: clamp(15px, 2.5vh, 20px);
    /* Espaçamento entre título, grid e botão */
}

#retrospective-comparison-screen .retrospective-screen-title {
    background: linear-gradient(135deg, var(--primary-color-dark), color-mix(in srgb, var(--primary-color-dark) 60%, #fff 40%));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, .2));
    margin-bottom: clamp(15px, 2.5vh, 20px);
}

body.light #retrospective-comparison-screen .retrospective-screen-title {
    background: linear-gradient(135deg, var(--primary-color-light), color-mix(in srgb, var(--primary-color-light) 60%, #000 40%));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
}

#retrospective-comparison-screen .retrospective-stats-grid {
    margin-bottom: clamp(15px, 2.5vh, 20px);
    gap: clamp(10px, 2vw, 15px);
    /* Espaçamento entre os cards */
}

#retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card {
    min-height: clamp(130px, 30vh, 160px);
    padding: clamp(12px, 2.2vh, 18px); /* Ajustado padding para dar mais espaço interno */
    justify-content: center; /* Centraliza o bloco de conteúdo verticalmente */
    align-items: center; /* Centraliza o conteúdo horizontalmente */
}

/* Melhorias de Margens Internas dos Cards da Tela de Comparação */
#retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-icon-medium {
    margin-bottom: clamp(6px, 1vh, 10px);
}

#retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-stat-value {
    margin-bottom: clamp(3px, 0.6vh, 5px);
}

#retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-stat-label {
    margin-bottom: clamp(6px, 1vh, 10px);
    flex-grow: 0; /* Já existia, mantém */
    line-height: 1.2; /* Já existia, mantém */
}

#retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-comparison-percentage {
    margin-top: 0; /* Remove o margin-top original para depender do margin-bottom do label */
    /* Demais estilos de .retrospective-comparison-percentage são mantidos */
}
/* Fim das Melhorias de Margens Internas */


.retrospective-comparison-percentage {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    font-size: clamp(1em, 2.8vw, 1.15em);
    font-weight: 600;
    /* margin-top foi movido para o controle individual acima */
}

.retrospective-comparison-percentage .retrospective-icon-small.retrospective-icon-green {
    color: var(--primary-color-dark) !important;
}

.retrospective-comparison-percentage .retrospective-icon-small.retrospective-icon-red {
    color: #FF453A;
}

body.light .retrospective-comparison-percentage .retrospective-icon-small.retrospective-icon-red {
    color: #FF3B30;
}

#retrospective-comparison-screen .retrospective-motivational-text {
    margin-bottom: clamp(15px, 2.5vh, 20px);
    font-size: clamp(16px, 4vw, 18px);
}


#retrospective-comparison-next-button.retrospective-button {
    background: var(--primary-color-dark);
    color: #fff;
    box-shadow: 0 4px 15px rgba(var(--primary-color-dark-rgb), .4);
    margin-top: 0;
    /* A margem virá do gap do content-wrapper */
}

body.light #retrospective-comparison-next-button.retrospective-button {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #fff);
    box-shadow: 0 4px 15px rgba(var(--primary-color-light-rgb), .4);
}

#retrospective-comparison-next-button.retrospective-button:hover {
    opacity: .9;
    transform: scale(1.03);
    box-shadow: 0 6px 20px rgba(var(--primary-color-dark-rgb), .5);
}

body.light #retrospective-comparison-next-button.retrospective-button:hover {
    box-shadow: 0 6px 20px rgba(var(--primary-color-light-rgb), .5);
}

/* --- ESTILOS DA TELA FINAL (SPOTIFY WRAPPED STYLE) --- */
.retrospective-final-screen-spotify-style {
    padding: 20px clamp(10px, 3vw, 20px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;
    box-sizing: border-box;
    overflow: hidden !important;
}

.retrospective-final-content-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    max-width: 380px;
    background: linear-gradient(160deg, rgba(var(--primary-color-dark-rgb, 10, 124, 255), .2) 0%, rgba(var(--primary-color-dark-rgb, 10, 124, 255), .08) 40%, #050505 100%);
    color: #fff;
    padding: 25px 20px clamp(15px, 3vh, 25px) 20px;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, .6);
    overflow: hidden;
    box-sizing: border-box;
    position: relative;
    flex-shrink: 0;
    flex-grow: 0;
    margin-bottom: clamp(10px, 2vh, 15px);
}

body.light .retrospective-final-content-wrapper {
    background: linear-gradient(160deg, rgba(var(--primary-color-light-rgb, 10, 124, 255), .2) 0%, rgba(var(--primary-color-light-rgb, 10, 124, 255), .08) 40%, #f8f8f8 100%);
    color: var(--text-color-light, #222);
    box-shadow: 0 10px 30px rgba(0, 0, 0, .2);
}

.retrospective-final-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: clamp(15px, 3.5vh, 20px);
}

.retrospective-final-logo {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: clamp(17px, 2.8vw, 19px);
    font-weight: 700;
    color: #fff;
}

body.light .retrospective-final-logo {
    color: var(--text-color-light, #222);
}

.retrospective-final-logo .logo-icon {
    width: clamp(18px, 3vw, 22px);
    height: clamp(18px, 3vw, 22px);
    background: var(--primary-color-dark);
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: clamp(9px, 1.6vw, 11px);
    font-weight: 700;
    line-height: 1;
}

body.light .retrospective-final-logo .logo-icon {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #fff);
}

.retrospective-final-date {
    font-size: clamp(12px, 2.2vw, 14px);
    color: rgba(255, 255, 255, .7);
}

body.light .retrospective-final-date {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .6);
}

.retrospective-final-main-title {
    font-size: clamp(22px, 4.5vh, 28px);
    font-weight: 800;
    text-align: center;
    margin-bottom: clamp(18px, 3.8vh, 28px);
    line-height: 1.2;
    text-shadow: 0 2px 5px rgba(0, 0, 0, .3);
    color: #fff;
}

body.light .retrospective-final-main-title {
    text-shadow: 0 1px 3px rgba(0, 0, 0, .15);
    color: var(--text-color-light, #222);
}

.retrospective-final-highlights {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    justify-content: center;
    gap: clamp(6px, 1.2vw, 12px);
    width: 100%;
    margin-bottom: clamp(18px, 3.8vh, 28px);
}

.retrospective-final-highlights[data-item-count="1"] {
    grid-template-columns: minmax(100px, .5fr);
}

.retrospective-final-highlights[data-item-count="2"] {
    grid-template-columns: repeat(2, minmax(90px, 1fr));
}

.retrospective-final-highlights[data-item-count="3"] {
    grid-template-columns: repeat(3, 1fr);
}

.retrospective-final-highlight-item {
    background: rgba(255, 255, 255, .08);
    border-radius: 8px;
    padding: clamp(8px, 1.8vh, 12px) clamp(6px, 1.2vw, 10px);
    text-align: center;
    border: 1px solid rgba(255, 255, 255, .15);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 80px;
}

body.light .retrospective-final-highlight-item {
    background: rgba(0, 0, 0, .04);
    border-color: rgba(0, 0, 0, .1);
}

.retrospective-final-highlight-value {
    font-size: clamp(17px, 3.2vh, 22px);
    font-weight: 700;
    margin-bottom: 3px;
    color: var(--primary-color-dark);
    white-space: nowrap;
}

body.light .retrospective-final-highlight-value {
    color: var(--primary-color-light);
}

.retrospective-final-highlight-label {
    font-size: clamp(9px, 1.6vh, 12px);
    color: rgba(255, 255, 255, .7);
    margin-bottom: 5px;
    flex-grow: 1;
    line-height: 1.2;
}

body.light .retrospective-final-highlight-label {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .6);
}

.final-highlight-icon {
    font-size: clamp(15px, 2.5vh, 20px);
    color: rgba(255, 255, 255, .5);
    margin-top: auto;
}

body.light .final-highlight-icon {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .4);
}

.retrospective-final-other-stats {
    width: 100%;
    margin-bottom: clamp(12px, 2.8vh, 22px);
    font-size: clamp(12px, 2.2vh, 15px);
}

.retrospective-final-other-stat-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: clamp(5px, 1.2vh, 8px) 0;
    border-bottom: 1px solid rgba(255, 255, 255, .1);
}

.retrospective-final-other-stat-item:last-child {
    border-bottom: none;
}

body.light .retrospective-final-other-stat-item {
    border-bottom-color: rgba(0, 0, 0, .08);
}

.retrospective-final-other-stat-item i {
    font-size: clamp(15px, 2.5vh, 18px);
    color: var(--primary-color-dark);
    min-width: 18px;
}

body.light .retrospective-final-other-stat-item i {
    color: var(--primary-color-light);
}

.retrospective-final-other-stat-item strong {
    font-weight: 600;
}

.retrospective-final-achievements-container {
    width: 100%;
    margin-top: auto;
    margin-bottom: clamp(8px, 1.8vh, 12px);
    text-align: center;
}

.retrospective-final-achievements-title {
    font-size: clamp(13px, 2.5vh, 16px);
    font-weight: 600;
    margin-bottom: 8px;
    color: rgba(255, 255, 255, .8);
}

body.light .retrospective-final-achievements-title {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .7);
}

.retrospective-final-achievements-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 6px;
}

.retrospective-badge-achievement {
    background: linear-gradient(45deg, var(--primary-color-dark), color-mix(in srgb, var(--primary-color-dark) 60%, #000 40%), var(--primary-color-dark));
    background-size: 300% 300%;
    animation: achievementGradient 4s ease infinite;
    color: #fff;
    padding: clamp(6px, 1.2vh, 8px) clamp(10px, 2vw, 15px);
    font-size: clamp(10px, 1.8vh, 13px);
    border-radius: 15px;
    border: none;
    box-shadow: 0 0 8px rgba(var(--primary-color-dark-rgb), .4), 0 0 10px rgba(255, 255, 255, .1) inset;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, .3);
    font-weight: 600;
}

body.light .retrospective-badge-achievement {
    background: linear-gradient(45deg, var(--primary-color-light), color-mix(in srgb, var(--primary-color-light) 70%, #fff 30%), var(--primary-color-light));
    background-size: 300% 300%;
    animation: achievementGradient 4s ease infinite;
    color: var(--card-bg-light, #fff);
    text-shadow: 1px 1px 2px rgba(0, 0, 0, .15);
    box-shadow: 0 0 8px rgba(var(--primary-color-light-rgb), .3), 0 0 10px rgba(0, 0, 0, .05) inset;
}

@keyframes achievementGradient {
    0% {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 0% 50%;
    }
}

.retrospective-final-footer {
    width: 100%;
    text-align: center;
    font-size: clamp(11px, 2vh, 13px);
    color: rgba(255, 255, 255, .6);
    padding-top: clamp(8px, 1.8vh, 15px);
    border-top: 1px solid rgba(255, 255, 255, .1);
    margin-top: auto;
}

body.light .retrospective-final-footer {
    color: rgba(var(--text-color-light-rgb, 34, 34, 34), .5);
    border-top-color: rgba(0, 0, 0, .08);
}

.retrospective-action-buttons-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
    width: 100%;
    max-width: 380px;
    margin-top: clamp(15px, 2.5vh, 20px);
    padding-bottom: 0;
    flex-shrink: 0;
}

.retrospective-action-buttons {
    display: flex;
    flex-direction: column;
    gap: 12px;
    justify-content: center;
    width: 100%;
}

.retrospective-action-button {
    color: #fff;
    flex-grow: 1;
    max-width: 100%;
    box-shadow: 0 4px 12px rgba(0, 0, 0, .25);
    padding: 10px 18px;
    font-size: clamp(14px, 3.5vw, 15px);
}

.retrospective-action-button:active {
    transform: scale(.98);
}

.retrospective-action-button#retrospective-share-button {
    background: var(--primary-color-dark);
    color: #fff;
    border: none;
}

.retrospective-action-button#retrospective-share-button:hover {
    background: color-mix(in srgb, var(--primary-color-dark) 85%, #000 15%);
}

body.light .retrospective-action-button#retrospective-share-button {
    background: var(--primary-color-light);
    color: var(--card-bg-light, #fff);
}

body.light .retrospective-action-button#retrospective-share-button:hover {
    background: color-mix(in srgb, var(--primary-color-light) 85%, #fff 15%);
}

.twitter-logo-retro {
    width: 1.3em;
    height: 1.3em;
    fill: currentColor;
    vertical-align: middle;
    margin-right: 6px;
}

.retrospective-action-button#retrospective-download-button {
    background: transparent;
    border: 2px solid var(--primary-color-dark);
    color: var(--primary-color-dark);
}

body.light .retrospective-action-button#retrospective-download-button {
    border-color: var(--primary-color-light);
    color: var(--primary-color-light);
}

.retrospective-action-button#retrospective-download-button:hover {
    background: rgba(var(--primary-color-dark-rgb), .15);
    border-color: var(--primary-color-dark);
}

body.light .retrospective-action-button#retrospective-download-button:hover {
    background: rgba(var(--primary-color-light-rgb), .15);
    border-color: var(--primary-color-light);
}

.retrospective-action-button .retrospective-icon-small {
    font-size: 1.1em;
}

/* Ícones Globais da Retrospectiva */
.retrospective-icon,
.retrospective-icon-small,
.retrospective-icon-medium,
.retrospective-icon-large,
.retrospective-icon-xlarge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
}

/* Ajustes de responsividade para o modal */
@media (min-width: 701px) {

    /* Padrões de Produtividade: Cards superiores lado a lado */
    #retrospective-time-patterns-screen .retrospective-time-patterns-grid {
        grid-template-columns: 1fr 1fr;
    }

    .retrospective-action-buttons-container {
        max-width: 420px;
    }

    .retrospective-action-buttons {
        flex-direction: row;
        gap: 15px;
    }

    .retrospective-action-button {
        flex-grow: 1;
        max-width: calc(50% - 7.5px);
    }
}

@media (max-width: 700px) {
    .retrospective-modal {
        max-width: 95vw;
    }

    .retrospective-screen {
        padding: 20px clamp(15px, 4vw, 20px);
    }

    .retrospective-music-control-button,
    .retrospective-final-close-x-btn {
        top: 10px;
        width: 32px;
        height: 32px;
        font-size: 16px;
    }

    .retrospective-music-control-button {
        left: 10px;
    }

    .retrospective-final-close-x-btn {
        right: 10px;
    }

    .retrospective-stats-grid .retrospective-stat-card {
        flex-basis: calc(50% - 7.5px);
        max-width: calc(50% - 7.5px);
    }

    .retrospective-stats-grid:has(> .retrospective-stat-card:nth-child(1):not(:nth-child(2))) .retrospective-stat-card {
        flex-basis: clamp(180px, 80%, 250px);
        max-width: 250px;
    }

    .retrospective-final-content-wrapper {
        padding: 20px 15px clamp(15px, 3vh, 20px) 15px;
    }

    /* Padrões de Produtividade - garantir empilhamento em telas menores */
    #retrospective-time-patterns-screen .retrospective-time-patterns-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 600px) {
    .retrospective-modal {
        height: 95vh;
        max-height: 95vh;
        border-radius: 10px;
    }

    .retrospective-screen {
        padding: 15px clamp(10px, 3vw, 15px);
    }

    .retrospective-main-title {
        font-size: clamp(24px, 5.5vw, 28px);
    }

    .retrospective-screen-title {
        font-size: clamp(22px, 6vw, 30px);
        margin-bottom: 15px;
    }

    .retrospective-stats-grid {
        gap: 12px;
    }

    .retrospective-stats-grid .retrospective-stat-card {
        flex-basis: 100%;
        max-width: 100%;
        min-height: clamp(140px, 33vw, 160px);
        padding: 12px 10px;
    }

    .retrospective-stat-card .retrospective-icon-large {
        font-size: clamp(30px, 7vw, 36px);
    }

    .retrospective-stat-value {
        font-size: clamp(24px, 7vw, 32px);
    }

    .retrospective-stat-label {
        font-size: clamp(11px, 2.8vw, 13px);
    }

    .retrospective-badge {
        font-size: clamp(10px, 2.2vw, 12px);
        padding: 5px 8px;
    }

    .retrospective-final-screen-spotify-style {
        padding: 15px 5px;
    }

    .retrospective-final-content-wrapper {
        padding: 15px 10px clamp(10px, 2.5vh, 15px) 10px;
        border-radius: 10px;
    }

    .retrospective-final-main-title {
        font-size: clamp(20px, 4vh, 24px);
        margin-bottom: 12px;
    }

    .retrospective-final-highlights {
        gap: 6px;
        margin-bottom: 12px;
    }

    .retrospective-final-highlight-item {
        padding: clamp(6px, 1.2vh, 10px) clamp(4px, 1vw, 6px);
    }

    .retrospective-final-highlight-value {
        font-size: clamp(16px, 3vh, 20px);
    }

    .retrospective-final-highlight-label {
        font-size: clamp(9px, 1.5vh, 11px);
    }

    .final-highlight-icon {
        font-size: clamp(14px, 2.5vh, 18px);
    }

    .retrospective-final-other-stats {
        font-size: clamp(11px, 2vh, 13px);
        margin-bottom: 12px;
    }

    .retrospective-final-other-stat-item i {
        font-size: clamp(14px, 2.2vh, 16px);
    }

    .retrospective-badge-achievement {
        font-size: clamp(9px, 1.8vh, 11px);
        padding: 5px 10px;
    }

    .retrospective-action-buttons-container {
        margin-top: 10px;
    }

    .retrospective-action-button {
        max-width: 100%;
        font-size: clamp(14px, 3.5vw, 15px);
    }
}

@media (max-width: 380px) {
    .retrospective-modal {
        border-radius: 8px;
    }

    .retrospective-screen {
        padding: 10px 5px;
    }

    .retrospective-music-control-button,
    .retrospective-final-close-x-btn {
        top: 8px;
        width: 30px;
        height: 30px;
        font-size: 15px;
    }

    .retrospective-music-control-button {
        left: 8px;
    }

    .retrospective-final-close-x-btn {
        right: 8px;
    }

    .retrospective-main-title {
        font-size: clamp(20px, 5vw, 22px);
    }

    .retrospective-screen-title {
        font-size: clamp(20px, 5.5vw, 26px);
        margin-bottom: 10px;
    }

    .retrospective-intro-title {
        font-size: clamp(30px, 8vw, 36px);
    }

    .retrospective-intro-subtitle {
        font-size: clamp(15px, 4vw, 17px);
        margin-bottom: 25px;
    }

    .retrospective-intro-icon-wrapper {
        width: clamp(80px, 20vw, 90px);
        height: clamp(80px, 20vw, 90px);
        margin-bottom: 20px;
    }

    .retrospective-intro-icon-wrapper .retrospective-icon-large {
        font-size: clamp(40px, 10vw, 45px);
    }

    .retrospective-stats-grid .retrospective-stat-card {
        min-height: clamp(130px, 30vw, 150px);
    }

    /* Ajustes específicos para #retrospective-time-patterns-screen em telas muito pequenas */
    #retrospective-time-patterns-screen .retrospective-content-wrapper {
        gap: clamp(8px, 1.5vh, 12px);
    }

    #retrospective-time-patterns-screen .retrospective-screen-title {
        margin-bottom: clamp(5px, 1vh, 8px);
        font-size: clamp(18px, 5vw, 22px);
    }

    #retrospective-time-patterns-screen .retrospective-time-patterns-main-content {
        gap: clamp(6px, 1vh, 10px);
    }

    #retrospective-time-patterns-screen .retrospective-time-patterns-grid {
        gap: clamp(6px, 1vh, 10px);
    }

    #retrospective-time-patterns-screen .retrospective-time-patterns-grid .retrospective-stat-card {
        min-height: clamp(100px, 16vh, 120px);
        padding: clamp(8px, 1.5vh, 12px);
    }

    #retrospective-time-patterns-screen .retrospective-card-header .retrospective-icon-large {
        font-size: clamp(20px, 4vw, 24px);
        margin-bottom: 3px;
    }

    #retrospective-time-patterns-screen .retrospective-card-title {
        font-size: clamp(12px, 2.8vw, 14px);
        margin-bottom: 2px;
    }

    #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-value {
        font-size: clamp(22px, 6vw, 28px);
    }

    #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-card-subtitle,
    #retrospective-time-patterns-screen .retrospective-stat-card .retrospective-stat-label {
        font-size: clamp(10px, 2.2vw, 12px);
    }

    #retrospective-time-patterns-screen .retrospective-card-indigo {
        min-height: clamp(130px, 22vh, 170px);
        padding: clamp(8px, 1.5vh, 12px);
    }

    #retrospective-time-patterns-screen .retrospective-weekday-chart {
        min-height: 60px;
        height: clamp(60px, 10vh, 80px);
    }

    .retrospective-weekday-bar {
        width: clamp(12px, 3vw, 20px);
    }

    .retrospective-weekday-label {
        margin-top: 4px;
        font-size: clamp(9px, 1.8vw, 11px);
    }

    #retrospective-time-patterns-screen #retrospective-time-patterns-next-button.retrospective-button {
        margin-top: clamp(10px, 1.5vh, 15px);
        padding: 10px 24px;
        font-size: clamp(13px, 3vw, 14px);
    }

    /* Ajustes específicos para #retrospective-comparison-screen em telas muito pequenas */
    #retrospective-comparison-screen .retrospective-screen-title {
        font-size: clamp(18px, 5vw, 22px);
        margin-bottom: clamp(10px, 2vh, 15px);
    }

    #retrospective-comparison-screen .retrospective-stats-grid {
        gap: clamp(8px, 1.5vw, 12px);
        margin-bottom: clamp(10px, 2vh, 15px);
    }

    #retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card {
        min-height: clamp(110px, 28vh, 140px); /* A altura já era menor aqui, mantive */
        padding: clamp(8px, 1.5vh, 12px); /* Padding também já era menor */
    }

    /* As margens internas dos cards de comparação já são tratadas pelos seletores específicos adicionados */
    #retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-icon-medium {
        margin-bottom: clamp(4px, 0.8vh, 8px); /* Ajuste fino para telas menores */
    }
    #retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-stat-value {
        font-size: clamp(20px, 5.5vw, 26px); /* Ajuste do tamanho do valor */
        margin-bottom: clamp(2px, 0.4vh, 4px); /* Ajuste fino para telas menores */
    }
    #retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-stat-label {
        font-size: clamp(10px, 2.2vw, 11px); /* Ajuste do tamanho do label */
        margin-bottom: clamp(4px, 0.8vh, 8px); /* Ajuste fino para telas menores */
    }
    #retrospective-comparison-screen .retrospective-stats-grid .retrospective-stat-card > .retrospective-comparison-percentage {
        font-size: clamp(0.85em, 2.3vw, 0.95em); /* Ajuste do tamanho da porcentagem */
    }


    #retrospective-comparison-screen .retrospective-motivational-text {
        font-size: clamp(13px, 3.5vw, 15px);
        margin-bottom: clamp(10px, 2vh, 15px);
    }

    #retrospective-comparison-screen #retrospective-comparison-next-button.retrospective-button {
        padding: 10px 24px;
        font-size: clamp(13px, 3vw, 14px);
    }


    .retrospective-final-screen-spotify-style {
        padding: 10px 3px;
    }

    .retrospective-final-content-wrapper {
        padding: 10px 8px clamp(8px, 2vh, 12px) 8px;
        border-radius: 10px;
    }

    .retrospective-final-main-title {
        font-size: clamp(18px, 3.8vh, 22px);
    }

    .retrospective-final-highlights {
        gap: 5px;
        grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
    }

    .retrospective-final-highlight-value {
        font-size: clamp(14px, 2.8vh, 18px);
    }

    .retrospective-final-highlight-label {
        font-size: clamp(8px, 1.3vh, 10px);
    }

    .final-highlight-icon {
        font-size: clamp(12px, 2.2vh, 16px);
    }

    .retrospective-final-other-stats {
        font-size: clamp(10px, 1.8vh, 12px);
    }

    .retrospective-final-other-stat-item i {
        font-size: clamp(12px, 2vh, 14px);
    }

    .retrospective-badge-achievement {
        font-size: clamp(8px, 1.5vh, 10px);
        padding: 4px 8px;
    }

    .retrospective-action-button {
        font-size: clamp(13px, 3.2vw, 14px);
    }
}

/* Garante que as telas que precisam de centralização vertical funcionem corretamente */
#retrospective-selection-screen .retrospective-content-wrapper,
#retrospective-intro-screen .retrospective-content-wrapper,
#retrospective-main-stats-screen .retrospective-content-wrapper,
#retrospective-productive-day-screen .retrospective-content-wrapper,
#retrospective-comparison-screen .retrospective-content-wrapper,
#retrospective-final-screen .retrospective-final-screen-spotify-style {
    justify-content: center;
    /* Centraliza o conteúdo verticalmente quando ele é menor que a tela */
}

/* Para a tela de padrões de produtividade, o space-between é importante para o botão no final */
#retrospective-time-patterns-screen .retrospective-content-wrapper {
    justify-content: space-between;
    /* Mantém o botão no final */
}
</file>

<file path="css/style.css">
:root {
    --nav-icon-btn-color-light: #333;
    --nav-icon-btn-color-dark: #fff;
    --primary-color-light: #0A7CFF;
    --primary-color-dark: #0A7CFF;
    --primary-color-dark-rgb: 10, 124, 255;
    --primary-color-light-rgb: 10, 124, 255;
    --counter-btn-base-bg-dark: #282a2e;
    --counter-btn-base-bg-light: #e8eaed;
    --pomodoro-focus-color: var(--primary-color-dark);
    --pomodoro-break-color-dark: color-mix(in srgb, var(--primary-color-dark) 65%, #bbbbbb 35%);
    --pomodoro-break-color-light: color-mix(in srgb, var(--primary-color-light) 65%, #666666 35%);
    --task-delete-btn-hover-bg-dark: rgba(255, 59, 48, 0.2);
    --task-delete-btn-hover-color-dark: #FF3B30;
    --task-delete-btn-hover-color-dark-rgb: 255, 59, 48;
    --task-delete-btn-hover-bg-light: rgba(220, 0, 0, 0.1);
    --task-delete-btn-hover-color-light: #D90000;
    --task-delete-btn-hover-color-light-rgb: 220, 0, 0;
    --body-bg-dark: #020306;
    --card-solid-bg-dark: #1C1C1E;
    --card-bg-dark: rgba(30, 32, 37, 0.75);
    --card-border-dark: rgba(255, 255, 255, 0.1);
    --text-color-dark: white;
    --text-muted-dark: #aaa;
    --header-bg-dark: var(--card-bg-dark);
    --header-border-dark: var(--card-border-dark);

    --body-bg-light: #f4f4f4;
    --card-solid-bg-light: #ffffff;
    --card-bg-light: #ffffff;
    --card-border-light: #e8e8e8;
    --text-color-light: #222;
    --text-muted-light: #555;
    --header-bg-light: var(--card-bg-light);
    --header-border-light: var(--card-border-light);

    --scrollbar-thumb-bg-dark: var(--primary-color-dark);
    --scrollbar-track-bg-dark: rgba(255, 255, 255, 0.08);
    --scrollbar-thumb-bg-light: var(--primary-color-light);
    --scrollbar-track-bg-light: rgba(0, 0, 0, 0.08);

    --day-card-v2-bg-dark: #121217;
    --day-card-v2-border-dark: rgba(255, 255, 255, 0.07);
    --day-card-v2-selected-bg-dark: var(--primary-color-dark);
    --day-card-v2-selected-border-dark: var(--primary-color-dark);
    --day-card-v2-text-dark: #D1D5DB;
    --day-card-v2-text-selected-dark: white;
    --day-card-v2-indicator-dark: var(--primary-color-dark);

    --day-card-v2-bg-light: #F0F2F5;
    --day-card-v2-border-light: #D1D5DB;
    --day-card-v2-selected-bg-light: var(--primary-color-light);
    --day-card-v2-selected-border-light: var(--primary-color-light);
    --day-card-v2-text-light: #374151;
    --day-card-v2-text-selected-light: white;
    --day-card-v2-indicator-light: var(--primary-color-light);

    --task-item-recurrent-v2-bg-dark: rgba(var(--primary-color-dark-rgb), 0.08);
    --task-item-recurrent-v2-border-dark: rgba(var(--primary-color-dark-rgb), 0.15);
    --task-item-recurrent-v2-text-dark: var(--text-color-dark);
    --task-item-recurrent-v2-icon-color-dark: var(--text-muted-dark);
    --task-routine-checkbox-border-dark: var(--text-muted-dark);
    --task-routine-checkbox-border-hover-dark: var(--primary-color-dark);
    --task-routine-checkbox-checked-bg-dark: var(--primary-color-dark);
    --task-routine-checkbox-checked-border-dark: var(--primary-color-dark);

    --task-item-recurrent-v2-bg-light: rgba(var(--primary-color-light-rgb), 0.08);
    --task-item-recurrent-v2-border-light: rgba(var(--primary-color-light-rgb), 0.15);
    --task-item-recurrent-v2-text-light: var(--text-color-light);
    --task-item-recurrent-v2-icon-color-light: var(--text-muted-light);
    --task-routine-checkbox-border-light: var(--text-muted-light);
    --task-routine-checkbox-border-hover-light: var(--primary-color-light);
    --task-routine-checkbox-checked-bg-light: var(--primary-color-light);
    --task-routine-checkbox-checked-border-light: var(--primary-color-light);

    --task-edit-btn-hover-bg-dark: rgba(var(--primary-color-dark-rgb), 0.2);
    --task-edit-btn-hover-color-dark: var(--primary-color-dark);
    --task-edit-btn-hover-bg-light: rgba(var(--primary-color-light-rgb), 0.2);
    --task-edit-btn-hover-color-light: var(--primary-color-light);

    --logo-icon-color: white;
}

body.light {
    --pomodoro-focus-color: var(--primary-color-light);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

#particle-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    color: var(--text-color-dark);
    min-height: 100vh;
    background: var(--body-bg-dark);
    transition: color 0.3s ease, background-color 0.3s ease;
}

body.light {
    color: var(--text-color-light);
    background: var(--body-bg-light);
}

body.modal-open {
    overflow: hidden;
}

body.modal-open .header {
    z-index: 998;
}

body.retrospective-open {
    overflow: hidden;
}

a,
button,
input[type="button"],
input[type="submit"],
input[type="reset"],
.btn,
.counter-btn,
.theme-toggle-btn,
.btn-icon-nav,
.modal-close-btn,
input[type="color"],
.pomodoro-controls button,
.task-item-delete-btn,
#add-task-btn,
.palette-btn,
.mode-btn,
.custom-alert-ok-btn,
.delete-option-card,
.btn-icon-recurring,
.btn-recurring,
.btn-icon-recurrent-task,
.btn-add-task-to-day,
.day-card-v2,
.btn-show-add-task-input-v2,
.btn-confirm-add-task-v2,
.btn-icon-recurrent-task-v2 {
    cursor: pointer;
}

.logo {
    cursor: pointer !important;
}

input[type="text"],
input[type="number"],
textarea {
    cursor: text;
}

.loader-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    opacity: 1;
    transition: opacity 0.5s ease;
}

html.light-theme-active .loader-container,
body.light .loader-container {
    background: rgba(255, 255, 255, 0.8);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding-top: 20px;
    padding-left: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    position: relative;
    z-index: 1;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 31px;
    padding: 22px 22px 22px 17px;
    background: var(--header-bg-dark);
    border: 1px solid var(--header-border-dark);
    border-radius: 16px;
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease,
        padding 0.3s ease, height 0.3s ease;
    position: relative;
}

body.light .header {
    background: var(--header-bg-light);
    border-color: var(--header-border-light);
    color: var(--text-color-light);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.btn-icon-nav,
.theme-toggle-btn {
    background: none;
    border: none;
    font-size: 1.6rem;
    padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s ease, color 0.3s ease, font-size 0.2s ease, padding 0.2s ease;
    line-height: 1;
    color: var(--primary-color-dark);
}

body.light .btn-icon-nav,
body.light .theme-toggle-btn {
    color: var(--primary-color-light);
}

.btn-icon-nav:hover,
.theme-toggle-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

body.light .btn-icon-nav:hover,
body.light .theme-toggle-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

.logo {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 28px;
    font-weight: 700;
    transition: transform 0.15s cubic-bezier(0.175, 0.885, 0.32, 1.275), font-size 0.2s ease;
    user-select: none;
    flex-shrink: 0;
}

body.light .logo {
    color: var(--text-color-light);
}

.logo-text {
    line-height: 1;
    transition: transform 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275), color 0.3s ease;
}

.logo-text-short {
    display: none;
}

.logo-icon {
    width: 28px;
    height: 28px;
    background: var(--primary-color-dark);
    /* USA A COR PRIMÁRIA DO TEMA ATUAL */
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--logo-icon-color);
    font-size: 16px;
    font-weight: normal;
    transition: transform 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275),
        box-shadow 0.25s ease-out, background-color 0.3s ease;
    margin-top: 0;
}

body.light .logo-icon {
    background: var(--primary-color-light);
    /* USA A COR PRIMÁRIA DO TEMA ATUAL (light) */
}

body.light .logo:hover .logo-icon {
    box-shadow: 0 2px 10px 0 color-mix(in srgb, var(--primary-color-light) 40%, transparent);
}

.logo:hover .logo-icon {
    transform: scale(1.15) rotate(-10deg);
    /* O box-shadow já usa a cor primária dinâmica, então está ok */
    box-shadow: 0 2px 10px 0 color-mix(in srgb, var(--primary-color-dark) 40%, transparent);
}

.logo:hover .logo-text {
    transform: translateX(3px) scale(1.02);
}


.header-controls {
    display: flex;
    gap: 12px;
    align-items: center;
    transition: gap 0.2s ease;
    flex-shrink: 0;
}

.scroll-indicator {
    display: none;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-top: 10px;
    padding-bottom: 10px;
    color: var(--primary-color-dark);
    opacity: 0;
    transform: translateY(0px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out,
        height 0.4s ease-out, padding-top 0.4s ease-out, padding-bottom 0.4s ease-out;
    user-select: none;
    height: auto;
    overflow: hidden;
}

.scroll-indicator.visible {
    opacity: 1;
    transform: translateY(0);
}

.scroll-indicator.collapsed {
    height: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    opacity: 0 !important;
}

body.light .scroll-indicator {
    color: var(--primary-color-light);
}

.scroll-indicator i {
    font-size: 1.8rem;
    margin-bottom: 2px;
    animation: bounce-subtle 2s infinite ease-in-out;
}

.scroll-indicator span {
    font-size: 0.8rem;
}

@keyframes bounce-subtle {

    0%,
    20%,
    50%,
    80%,
    100% {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-5px);
    }

    60% {
        transform: translateY(-2px);
    }
}


.productivity-focus-area {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    align-items: stretch;
    width: 100%;
    max-width: 100%;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
}

.productivity-focus-area.visible {
    opacity: 1;
    transform: translateY(0);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
    transition: gap 0.2s ease, margin-bottom 0.2s ease;
}

.stat-card {
    border-radius: 16px;
    padding: 24px;
    text-align: center;
    position: relative;
    transition: all 0.3s ease;
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
}

body.light .stat-card {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    color: var(--text-color-light);
}

.stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 20px -3px rgba(0, 0, 0, 0.15), 0 5px 8px -4px rgba(0, 0, 0, 0.15);
}

body.light .stat-card:hover {
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.stat-title {
    font-size: 14px;
    color: var(--text-muted-dark);
    margin-bottom: 16px;
    font-weight: 500;
    transition: font-size 0.2s ease, margin-bottom 0.2s ease;
}

body.light .stat-title {
    color: var(--text-muted-light);
    font-weight: 600;
}

.circular-progress {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto 16px;
    transition: width 0.2s ease, height 0.2s ease, margin-bottom 0.2s ease;
}

.progress-ring {
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
}

.progress-ring-circle {
    fill: none;
    stroke-width: 8;
    r: 52;
    cx: 60;
    cy: 60;
    transition: stroke-dashoffset 0.35s, stroke 0.3s ease, stroke-width 0.2s ease;
}

.progress-ring-bg {
    stroke: rgba(255, 255, 255, 0.15);
}

body.light .progress-ring-bg {
    stroke: #e9ecef;
}

.progress-ring-fill {
    stroke: var(--primary-color-dark);
    stroke-linecap: round;
}

body.light .progress-ring-fill {
    stroke: var(--primary-color-light);
}

.progress-number {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 32px;
    font-weight: 700;
    transition: font-size 0.2s ease;
}

body.light .progress-number {
    color: var(--text-color-light);
    font-weight: 700;
}

.progress-target {
    font-size: 14px;
    color: #d1d1d1;
    margin-top: 4px;
    transition: font-size 0.2s ease;
}

body.light .progress-target {
    color: #6c757d;
}

.bottom-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
    transition: gap 0.2s ease, margin-bottom 0.2s ease;
}

.info-card {
    border-radius: 16px;
    padding: 24px;
    transition: all 0.3s ease;
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
}

body.light .info-card {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    color: var(--text-color-light);
}

.info-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 20px -3px rgba(0, 0, 0, 0.15), 0 5px 8px -4px rgba(0, 0, 0, 0.15);
}

body.light .info-card:hover {
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.card-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 16px;
    color: var(--text-muted-dark);
    margin-bottom: 12px;
    font-weight: 500;
    transition: font-size 0.2s ease, margin-bottom 0.2s ease;
}

body.light .card-title {
    color: var(--text-muted-light);
    font-weight: 600;
}

.card-title-icon {
    font-size: 1.1rem;
    margin-left: 8px;
    color: var(--primary-color-dark);
    transition: color 0.3s ease;
}

body.light .card-title-icon {
    color: var(--primary-color-light);
}

.card-value {
    font-size: 32px;
    font-weight: 700;
    margin-bottom: 8px;
    transition: font-size 0.2s ease, margin-bottom 0.2s ease;
}

.streak-value-meta-container {
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    margin-bottom: 8px;
}

body.light .card-value {
    color: var(--text-color-light);
    font-weight: 700;
}

.card-subtitle {
    font-size: 14px;
    color: #888;
    transition: font-size 0.2s ease;
}

body.light .card-subtitle {
    color: #6c757d;
}

.progress-bar-horizontal {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 4px;
    overflow: hidden;
    margin-top: 0;
}

body.light .progress-bar-horizontal {
    background: #e0e0e0;
}

.progress-fill {
    height: 100%;
    background: var(--primary-color-dark);
    border-radius: 4px;
    transition: width 0.5s ease, background-color 0.3s ease;
}

body.light .progress-fill {
    background: var(--primary-color-light);
}

.card-streak-target {
    font-size: 13px;
    color: #d1d1d1;
    transition: color 0.3s ease;
}

body.light .card-streak-target {
    color: #6c757d;
}

.activity-section {
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 20px;
    transition: all 0.3s ease;
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
}

body.light .activity-section {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    color: var(--text-color-light);
}

.activity-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    transition: margin-bottom 0.2s ease;
}

.activity-title {
    font-size: 18px;
    font-weight: 600;
    transition: font-size 0.2s ease;
    color: var(--text-color-dark);
}

body.light .activity-title {
    color: var(--text-color-light);
}

.activity-controls {
    display: flex;
    align-items: center;
    gap: 12px;
}

body.light .activity-controls span {
    color: #666 !important;
}

.activity-controls .control-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #ccc;
    width: 32px;
    height: 32px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s, width 0.2s ease, height 0.2s ease;
}

body.light .activity-controls .control-btn {
    background: #eee;
    border-color: #ddd;
    color: #555;
}

.activity-controls .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
}

body.light .activity-controls .control-btn:hover {
    background: #ddd;
}

.activity-value {
    background: var(--primary-color-dark);
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    transition: background-color 0.3s ease, padding 0.2s ease, font-size 0.2s ease;
}

body.light .activity-value {
    background: var(--primary-color-light);
    color: white;
}

.chart-container {
    height: 200px;
    position: relative;
    overflow: hidden;
    transition: height 0.2s ease;
}

.question-counter {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    transition: gap 0.2s ease;
    flex-shrink: 1;
    min-width: 120px;
}

.counter-btn {
    width: 36px;
    height: 36px;
    border: none;
    border-radius: 50%;
    background: color-mix(in srgb, var(--primary-color-dark) 25%, var(--counter-btn-base-bg-dark));
    color: var(--primary-color-dark);
    font-size: 20px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease, color 0.3s ease, background-color 0.3s ease, width 0.2s ease, height 0.2s ease, font-size 0.2s ease;
}

body.light .counter-btn {
    background: color-mix(in srgb, var(--primary-color-light) 25%, var(--counter-btn-base-bg-light));
    color: var(--primary-color-light);
}

.counter-btn:hover {
    background: color-mix(in srgb, var(--primary-color-dark) 40%, var(--counter-btn-base-bg-dark));
    transform: scale(1.05);
}

body.light .counter-btn:hover {
    background: color-mix(in srgb, var(--primary-color-light) 40%, var(--counter-btn-base-bg-light));
}

.counter-btn:active {
    transform: scale(0.95);
}

.counter-display {
    font-size: 24px;
    font-weight: 600;
    min-width: 50px;
    text-align: center;
    color: var(--primary-color-dark);
    margin: 0 4px;
    transition: color 0.3s ease, font-size 0.2s ease, min-width 0.2s ease;
    border: none;
    background-color: transparent;
    padding: 0;
    outline: none;
    box-shadow: none;
}

body.light .counter-display {
    color: var(--primary-color-light);
}

#questions-step-input.counter-display {
    max-width: 80px;
    transition: max-width 0.2s ease;
}

#questions-step-input.counter-display::-webkit-outer-spin-button,
#questions-step-input.counter-display::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

#questions-step-input.counter-display {
    -moz-appearance: textfield;
}

.pomodoro-section-wrapper,
.tasks-section-wrapper {
    flex: 1 1 0;
    min-width: 0;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.pomodoro-section,
.tasks-section {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: auto;
    border-radius: 16px;
    padding: 24px;
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;
}

body.light .pomodoro-section,
body.light .tasks-section {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
}

.pomodoro-section {
    align-items: center;
    text-align: center;
}

.pomodoro-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.pomodoro-title {
    font-size: 18px;
    font-weight: 600;
    color: var(--text-color-dark);
    text-align: left;
}

body.light .pomodoro-section .pomodoro-title {
    color: var(--text-color-light);
}

.pomodoro-settings-btn {
    background: none;
    border: none;
    font-size: 1.3rem;
    color: var(--primary-color-dark);
    padding: 6px;
    border-radius: 50%;
    transition: background-color 0.2s ease, color 0.3s ease, transform 0.15s ease;
}

body.light .pomodoro-settings-btn {
    color: var(--primary-color-light);
}

body.light .pomodoro-section .pomodoro-settings-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

.pomodoro-settings-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: rotate(15deg);
}


.pomodoro-timer-display {
    font-size: 5.5rem;
    font-weight: 700;
    margin: 10px 0 10px 0;
    line-height: 1;
    color: var(--pomodoro-focus-color);
    transition: color 0.3s ease;
}

.pomodoro-timer-display.break-mode {
    color: var(--pomodoro-break-color-dark);
}

body.light .pomodoro-timer-display.break-mode {
    color: var(--pomodoro-break-color-light);
}


.pomodoro-status {
    font-size: 0.95rem;
    color: var(--text-muted-dark);
    margin-bottom: 15px;
    min-height: 1.5em;
}

body.light .pomodoro-section .pomodoro-status {
    color: var(--text-muted-light);
}

.pomodoro-controls {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 15px;
}

.pomodoro-controls button {
    padding: 8px 16px;
    font-size: 0.9rem;
    font-weight: 600;
    border-radius: 20px;
    border: 1px solid transparent;
    min-width: 90px;
    transition: all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.pomodoro-controls button:hover {
    transform: translateY(-2px);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
}

.pomodoro-controls button:active {
    transform: translateY(0px) scale(0.95);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
}

.pomodoro-controls .btn-start {
    background-color: var(--pomodoro-focus-color);
    color: white;
}

.pomodoro-controls .btn-start.break-mode {
    background-color: var(--pomodoro-break-color-dark);
}

body.light .pomodoro-controls .btn-start.break-mode {
    background-color: var(--pomodoro-break-color-light);
}

.pomodoro-controls .btn-start:hover {
    opacity: 0.85;
}

.pomodoro-controls .btn-pause,
.pomodoro-controls .btn-reset {
    background-color: transparent;
    border: 1px solid var(--text-muted-dark);
    color: var(--text-muted-dark);
}

body.light .pomodoro-controls .btn-pause,
body.light .pomodoro-controls .btn-reset {
    border-color: var(--text-muted-light);
    color: var(--text-muted-light);
}

.pomodoro-controls .btn-pause:hover,
.pomodoro-controls .btn-reset:hover {
    background-color: var(--text-muted-dark);
    color: var(--body-bg-dark);
}

body.light .pomodoro-controls .btn-pause:hover,
body.light .pomodoro-controls .btn-reset:hover {
    background-color: var(--text-muted-light);
    color: var(--body-bg-light);
}

.pomodoro-cycles {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    margin-top: 10px;
}

body.light .pomodoro-section .pomodoro-cycles {
    color: var(--text-muted-light);
}

.pomodoro-cycles i {
    font-size: 1.2rem;
    color: var(--primary-color-dark);
}

body.light .pomodoro-section .pomodoro-cycles i {
    color: var(--primary-color-light);
}

.pomodoro-cycles .pomodoro-cycles-text-label {
    margin-right: -4px;
}


.tasks-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.tasks-title {
    font-size: 18px;
    font-weight: 600;
    color: var(--text-color-dark);
    text-align: left;
}

body.light .tasks-section .tasks-title {
    color: var(--text-color-light);
}

.tasks-header-actions {
    display: flex;
    align-items: center;
    gap: 10px;
}

.tasks-header-actions .btn-icon-nav {
    padding: 6px;
    font-size: 1.3rem;
}


.tasks-counter {
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    background-color: rgba(255, 255, 255, 0.05);
    padding: 3px 8px;
    border-radius: 10px;
}

body.light .tasks-section .tasks-counter {
    color: var(--text-muted-light);
    background-color: rgba(0, 0, 0, 0.03);
}

#task-form {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
    align-items: center;
}

#task-input {
    flex-grow: 1;
    flex-basis: 200px;
    min-width: 150px;
    padding: 10px 12px;
    border: 1px solid var(--card-border-dark);
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
    font-size: 0.95rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

body.light .tasks-section #task-input {
    background: rgba(255, 255, 255, 0.5);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
}

#task-input::placeholder {
    color: var(--text-muted-dark);
    opacity: 0.6;
}

body.light .tasks-section #task-input::placeholder {
    color: var(--text-muted-light);
}

#task-input:focus {
    outline: none;
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color-dark) 20%, transparent);
    background: var(--card-bg-dark);
}

body.light #task-input:focus {
    border-color: var(--primary-color-light);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color-light) 20%, transparent);
    background: var(--card-bg-light);
}

.task-date-input.flatpickr-input {
    padding: 9px 30px 9px 10px;
    border: 1px solid var(--card-border-dark);
    border-radius: 8px;
    background-color: rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
    font-size: 0.9rem;
    line-height: normal;
    height: 38px;
    flex-shrink: 0;
    flex-basis: 140px;
    min-width: 130px;
    transition: border-color 0.2s ease, box-shadow 0.2s ease, color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23cccccc' class='bi bi-calendar-event' viewBox='0 0 16 16'%3E%3Cpath d='M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z'/%3E%3Cpath d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 16px 16px;
}

body.light .task-date-input.flatpickr-input {
    background-color: rgba(255, 255, 255, 0.5);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23555555' class='bi bi-calendar-event' viewBox='0 0 16 16'%3E%3Cpath d='M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z'/%3E%3Cpath d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z'/%3E%3C/svg%3E");
}

.task-date-input.flatpickr-input::placeholder {
    color: var(--text-muted-dark);
    opacity: 0.8;
}

body.light .task-date-input.flatpickr-input::placeholder {
    color: var(--text-muted-light);
}

.task-date-input.flatpickr-input:focus {
    outline: none;
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color-dark) 20%, transparent);
}

body.light .task-date-input.flatpickr-input:focus {
    border-color: var(--primary-color-light);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color-light) 20%, transparent);
}


#task-input,
.task-date-input,
#add-task-btn,
.btn-recurring {
    height: 38px;
}

#add-task-btn {
    padding: 0 18px;
    line-height: 38px;
    background: var(--primary-color-dark);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 600;
    transition: opacity 0.2s ease, transform 0.15s ease;
    flex-shrink: 0;
}

.btn-recurring {
    padding: 0 15px;
    line-height: 38px;
    font-size: 0.9rem;
    font-weight: 500;
    flex-shrink: 0;
}

.btn-recurring i {
    margin-right: 6px;
    font-size: 1em;
}


body.light #add-task-btn {
    background: var(--primary-color-light);
}

#add-task-btn:hover {
    opacity: 0.85;
    transform: translateY(-1px);
}

#add-task-btn:active {
    transform: scale(0.95) translateY(0px);
    opacity: 1;
}

#task-list {
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
    overflow-y: auto;
    padding-right: 5px;
    min-height: 50px;
    height: 0;
}

.task-item {
    display: flex;
    align-items: center;
    padding: 12px 5px 12px 0;
    border-bottom: 1px solid var(--card-border-dark);
    transition: background-color 0.15s ease, opacity 0.2s ease, box-shadow 0.2s ease;
    cursor: grab;
}

.task-item:active {
    cursor: grabbing;
}

body.light .tasks-section .task-item {
    border-bottom-color: var(--card-border-light);
}

.task-item:last-child {
    border-bottom: none;
}

.task-item:hover {
    background-color: rgba(255, 255, 255, 0.03);
}

body.light .tasks-section .task-item:hover {
    background-color: rgba(0, 0, 0, 0.02);
}

.task-item.dragging,
.task-item-recurrent-v2.dragging {
    opacity: 0.5;
    background-color: var(--primary-color-dark) !important;
    color: white !important;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

body.light .task-item.dragging,
body.light .task-item-recurrent-v2.dragging {
    background-color: var(--primary-color-light) !important;
}

.task-item.dragging .task-item-text,
.task-item.dragging .task-item-delete-btn,
.task-item.dragging .task-item-checkbox,
.task-item-recurrent-v2.dragging .task-text-recurrent-v2,
.task-item-recurrent-v2.dragging .btn-icon-recurrent-task-v2 {
    color: white !important;
    border-color: white !important;
}


.task-item.dragging .task-item-checkbox:checked::before {
    color: var(--primary-color-dark);
}

body.light .task-item.dragging .task-item-checkbox:checked::before {
    color: var(--primary-color-light);
}


.drag-over-placeholder {
    height: 2px;
    background-color: var(--primary-color-dark);
    opacity: 0.7;
    margin: 6px 0;
    list-style: none;
    border-radius: 1px;
}

body.light .drag-over-placeholder {
    background-color: var(--primary-color-light);
}


.task-item-checkbox {
    margin-right: 12px;
    width: 18px;
    height: 18px;
    accent-color: var(--primary-color-dark);
    cursor: pointer;
    flex-shrink: 0;
    appearance: none;
    -webkit-appearance: none;
    background-color: transparent;
    border: 1.5px solid var(--text-muted-dark);
    border-radius: 4px;
    position: relative;
    transition: border-color 0.2s ease, background-color 0.2s ease;
}

body.light .tasks-section .task-item-checkbox {
    accent-color: var(--primary-color-light);
    border-color: var(--text-muted-light);
}

.task-item-checkbox:hover {
    border-color: var(--primary-color-dark);
}

body.light .tasks-section .task-item-checkbox:hover {
    border-color: var(--primary-color-light);
}

.task-item-checkbox:checked {
    background-color: var(--primary-color-dark);
    border-color: var(--primary-color-dark);
}

body.light .tasks-section .task-item-checkbox:checked {
    background-color: var(--primary-color-light);
    border-color: var(--primary-color-light);
}

.task-item-checkbox:checked::before {
    content: '✔';
    font-size: 12px;
    color: white;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    line-height: 1;
}


.task-item-text {
    flex-grow: 1;
    font-size: 0.95rem;
    color: var(--text-color-dark);
    transition: color 0.3s ease, opacity 0.3s ease;
    word-break: break-word;
    line-height: 1.4;
    position: relative;
    display: flex;
    align-items: center;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}

.task-recurring-icon {
    font-size: 0.9em;
    color: var(--primary-color-dark);
    margin-right: 8px;
    opacity: 0.7;
    flex-shrink: 0;
}

body.light .task-recurring-icon {
    color: var(--primary-color-light);
}

.task-item.completed .task-recurring-icon {
    opacity: 0.4;
}


.task-assigned-date-indicator {
    font-size: 0.75em;
    color: var(--text-muted-dark);
    background-color: rgba(255, 255, 255, 0.05);
    padding: 1px 5px;
    border-radius: 4px;
    margin-left: 8px;
    font-style: italic;
    white-space: nowrap;
}

body.light .task-assigned-date-indicator {
    color: var(--text-muted-light);
    background-color: rgba(0, 0, 0, 0.03);
}


body.light .tasks-section .task-item-text {
    color: var(--text-color-light);
}

.task-item.completed .task-item-text {
    opacity: 0.6;
    color: var(--text-muted-dark);
}

body.light .tasks-section .task-item.completed .task-item-text {
    opacity: 0.6;
    color: var(--text-muted-light);
}

.task-item.completed .task-item-text::after {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    height: 1.5px;
    background-color: var(--primary-color-dark);
    animation: strikeThroughAnim 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55) forwards;
    transform-origin: left;
}

body.light .task-item.completed .task-item-text::after {
    background-color: var(--primary-color-light);
}

@keyframes strikeThroughAnim {
    from {
        width: 0%;
        opacity: 0;
    }

    to {
        width: 100%;
        opacity: 0.8;
    }
}


.task-item-delete-btn {
    background: none;
    border: none;
    color: var(--text-muted-dark);
    font-size: 1.1rem;
    padding: 5px 8px;
    margin-left: 10px;
    border-radius: 6px;
    line-height: 1;
    transition: background-color 0.2s ease, color 0.2s ease, transform 0.15s ease;
    flex-shrink: 0;
    opacity: 0.6;
}

body.light .tasks-section .task-item-delete-btn {
    color: var(--text-muted-light);
}

.task-item:hover .task-item-delete-btn {
    opacity: 1;
}

.task-item-delete-btn:hover {
    background-color: var(--task-delete-btn-hover-bg-dark);
    color: var(--task-delete-btn-hover-color-dark);
    transform: scale(1.1);
}

body.light .task-item-delete-btn:hover {
    background-color: var(--task-delete-btn-hover-bg-light);
    color: var(--task-delete-btn-hover-color-light);
}


.task-list-empty-message {
    text-align: center;
    color: var(--text-muted-dark);
    padding: 25px 0;
    font-style: italic;
    font-size: 0.9rem;
    opacity: 0.7;
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
}

body.light .tasks-section .task-list-empty-message {
    color: var(--text-muted-light);
}


.chart-section {
    border-radius: 16px;
    padding: 18px;
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
    height: 218px;
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
}

body.light .chart-section {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    color: var(--text-color-light);
}

.chart-section .chart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 18px;
    flex-shrink: 0;
}

.chart-section .chart-title {
    font-size: 16px;
    font-weight: 600;
    color: var(--text-color-dark);
}

body.light .chart-section .chart-title {
    color: var(--text-color-light);
}

.chart-section .chart-period-label {
    font-size: 0.9em;
    color: var(--text-muted-dark);
}

body.light .chart-section .chart-period-label {
    color: var(--text-muted-light);
}

.chart-section .chart-container {
    height: 170px;
    flex-grow: 1;
    position: relative;
    overflow: hidden;
}

.custom-alert-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    z-index: 10000;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
}

.custom-alert-overlay.show {
    display: block;
    opacity: 1;
}

body.light .custom-alert-overlay {
    background: rgba(220, 220, 220, 0.5);
}

.custom-alert-modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.9);
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    border-radius: 12px;
    padding: 24px;
    width: 90%;
    max-width: 400px;
    z-index: 10001;
    opacity: 0;
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    color: var(--text-color-dark);
    text-align: center;
}

.custom-alert-modal.show {
    display: block;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

body.light .custom-alert-modal {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

.custom-alert-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 0;
    margin-bottom: 12px;
    color: var(--primary-color-dark);
}

body.light .custom-alert-title {
    color: var(--primary-color-light);
}

.custom-alert-message {
    font-size: 0.95rem;
    line-height: 1.5;
    margin-bottom: 20px;
    color: var(--text-muted-dark);
}

body.light .custom-alert-message {
    color: var(--text-muted-light);
}

.custom-alert-ok-btn {
    background-color: var(--primary-color-dark);
    color: white;
    padding: 8px 24px;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease, opacity 0.2s ease;
    border: none;
}

body.light .custom-alert-ok-btn {
    background-color: var(--primary-color-light);
}

.custom-alert-ok-btn:hover {
    opacity: 0.85;
}


.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal-overlay.show {
    display: block;
    opacity: 1;
}

body.light .modal-overlay {
    background: rgba(220, 220, 220, 0.5);
}

.modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.95);
    background: var(--card-bg-dark);
    border: 1px solid var(--card-border-dark);
    border-radius: 16px;
    padding: 32px;
    padding-top: 48px;
    width: 90%;
    max-width: 500px;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-height: 90vh;
    overflow-y: auto;
}

.modal.show {
    display: block;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

body.light .modal {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    color: var(--text-color-light);
}


/* ==========================================================================
   Estilos para o MODAL DE TAREFAS RECORRENTES (v2 - novo layout da imagem)
   ========================================================================== */

#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] {
    max-width: clamp(90vw, 1600px, 95vw);
    width: 95vw;
    height: 85vh;
    max-height: 85vh;
    padding: 0;
    background: var(--card-bg-dark);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: 1px solid var(--card-border-dark);
    border-radius: 12px;
    color: var(--text-color-dark);
    overflow: hidden;
}

body.light #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] {
    background: var(--card-bg-light);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
}

.recurring-pattern-definition-v2-content {
    display: flex;
    flex-direction: column;
    height: 100%;
    padding: 24px 28px;
    gap: 15px;
}

.recurring-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--card-border-dark);
    flex-shrink: 0;
}

body.light .recurring-modal-header {
    border-bottom-color: var(--card-border-light);
}

.recurring-modal-title-group .modal-title {
    font-size: 1.4rem;
    font-weight: 700;
    margin-bottom: 4px;
    text-align: left;
    color: var(--text-color-dark);
    display: flex;
    align-items: center;
    gap: 10px;
}

body.light #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .recurring-modal-title-group .modal-title {
    color: var(--text-color-light);
}

.icon-title-recurring {
    font-size: 1em;
    color: var(--primary-color-dark);
}

body.light .icon-title-recurring {
    color: var(--primary-color-light);
}


.recurring-modal-title-group .modal-subtitle-description {
    font-size: 0.85rem;
    color: var(--text-muted-dark);
    margin-bottom: 0;
    text-align: left;
    line-height: 1.4;
}

body.light .recurring-modal-title-group .modal-subtitle-description {
    color: var(--text-muted-light);
}

#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .modal-close-btn {
    position: static;
    padding: 6px;
    font-size: 1.3rem;
    color: var(--text-muted-dark);
    margin-left: 10px;
}

#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .modal-close-btn:hover {
    color: var(--text-color-dark);
    background-color: rgba(255, 255, 255, 0.05);
}

body.light #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .modal-close-btn {
    color: var(--text-muted-light);
}

body.light #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .modal-close-btn:hover {
    color: var(--text-color-light);
    background-color: rgba(0, 0, 0, 0.05);
}

.recurring-modal-controls-top {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 8px 0 0 0;
    flex-shrink: 0;
}

.new-task-input-container-v2 {
    display: flex;
    align-items: center;
    gap: 10px;
    width: 100%;
}

#new-task-text-input-v2 {
    flex-grow: 1;
    height: 38px;
    padding: 8px 12px;
    /* Herda .form-input */
}

#new-task-text-input-v2::placeholder {
    color: var(--text-muted-dark);
    opacity: 0.7;
}

body.light #new-task-text-input-v2::placeholder {
    color: var(--text-muted-light);
}


.new-task-input-container-v2 .btn-confirm-add-task-v2 {
    flex-shrink: 0;
    padding: 0 12px;
    height: 38px;
    font-size: 0.85rem;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    /* Herda .btn e .btn-primary */
}

.new-task-input-container-v2 .btn-confirm-add-task-v2 i {
    font-size: 1.1em;
}


.recurring-modal-sub-controls-line {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-top: 8px;
    padding-bottom: 8px;
}

.recurring-modal-controls-top .selected-days-count {
    font-size: 0.85rem;
    color: var(--text-muted-dark);
    margin-left: 0;
}

body.light .recurring-modal-controls-top .selected-days-count {
    color: var(--text-muted-light);
}

.recurring-modal-controls-top .day-selection-actions {
    display: flex;
    gap: 10px;
    margin-left: 0;
}

.recurring-modal-controls-top .day-selection-actions .btn {
    font-size: 0.8rem;
    padding: 5px 10px;
    /* Herda .btn e .btn-secondary */
}

.recurring-pattern-v2-days-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 12px;
    flex-grow: 1;
    min-height: 0;
    overflow: hidden;
    padding: 5px 2px;
}

.day-card-v2 {
    background-color: color-mix(in srgb, var(--card-bg-dark) 95%, rgba(255, 255, 255, 0.05) 5%);
    border: 1px solid var(--card-border-dark);
    border-radius: 8px;
    padding: 12px;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    text-align: left;
    transition: border-color 0.2s ease, background-color 0.2s ease, box-shadow 0.15s ease;
    position: relative;
    height: 100%;
    min-width: 150px;
    overflow: hidden;
}

body.light .day-card-v2 {
    background-color: color-mix(in srgb, var(--card-bg-light) 95%, rgba(0, 0, 0, 0.03) 5%);
    border-color: var(--card-border-light);
}

.day-card-v2:hover {
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 10px rgba(var(--primary-color-dark-rgb), 0.15);
}

body.light .day-card-v2:hover {
    border-color: var(--primary-color-light);
    box-shadow: 0 0 10px rgba(var(--primary-color-light-rgb), 0.1);
}

.day-card-v2.selected {
    border-color: var(--day-card-v2-selected-border-dark) !important;
    background-color: color-mix(in srgb, var(--day-card-v2-selected-bg-dark) 15%, var(--day-card-v2-bg-dark) 85%) !important;
}

body.light .day-card-v2.selected {
    border-color: var(--day-card-v2-selected-border-light) !important;
    background-color: color-mix(in srgb, var(--day-card-v2-selected-bg-light) 20%, var(--day-card-v2-bg-light) 80%) !important;
}

.day-card-v2.selected .day-card-v2-short,
.day-card-v2.selected .day-card-task-count-v2 {
    color: var(--day-card-v2-text-selected-dark);
}

body.light .day-card-v2.selected .day-card-v2-short,
body.light .day-card-v2.selected .day-card-task-count-v2 {
    color: var(--day-card-v2-text-selected-light);
}

.day-card-header-v2 {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 8px;
    flex-shrink: 0;
}

.day-card-v2-short {
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--day-card-v2-text-dark);
    flex-grow: 1;
    margin-right: 5px;
}

body.light .day-card-v2-short {
    color: var(--day-card-v2-text-light);
}

.day-card-task-count-v2 {
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--text-muted-dark);
    background-color: rgba(var(--primary-color-dark-rgb), 0.08);
    padding: 2px 6px;
    border-radius: 4px;
    line-height: 1.2;
    white-space: nowrap;
}

body.light .day-card-task-count-v2 {
    color: var(--text-muted-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.08);
}

.day-card-v2.selected .day-card-task-count-v2 {
    color: var(--day-card-v2-text-selected-dark);
    background-color: rgba(255, 255, 255, 0.1);
}

body.light .day-card-v2.selected .day-card-task-count-v2 {
    color: var(--day-card-v2-text-selected-light);
    background-color: rgba(0, 0, 0, 0.05);
}

.day-card-v2-full {
    display: none;
}

.day-card-v2-tasks {
    width: 100%;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: flex-start;
    overflow-y: auto;
    min-height: 50px;
    gap: 6px;
    padding-right: 5px;
}

.day-card-v2-tasks .no-tasks-msg {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
    opacity: 0.6;
    text-align: center;
    margin-top: auto;
    margin-bottom: auto;
    padding: 10px 0;
}

body.light .day-card-v2-tasks .no-tasks-msg {
    color: var(--text-muted-light);
}

.task-item-recurrent-v2 {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 8px 8px 8px 0;
    background-color: var(--task-item-recurrent-v2-bg-dark);
    border: 1px solid var(--task-item-recurrent-v2-border-dark);
    border-radius: 6px;
    font-size: 0.85rem;
    color: var(--task-item-recurrent-v2-text-dark);
    cursor: grab;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
    position: relative;
    flex-shrink: 0;
}

body.light .task-item-recurrent-v2 {
    background-color: var(--task-item-recurrent-v2-bg-light);
    border-color: var(--task-item-recurrent-v2-border-light);
    color: var(--task-item-recurrent-v2-text-light);
}

.task-item-recurrent-v2:hover {
    background-color: color-mix(in srgb, var(--task-item-recurrent-v2-bg-dark) 70%, var(--primary-color-dark) 30%);
    border-color: var(--primary-color-dark);
}

body.light .task-item-recurrent-v2:hover {
    background-color: color-mix(in srgb, var(--task-item-recurrent-v2-bg-light) 70%, var(--primary-color-light) 30%);
    border-color: var(--primary-color-light);
}

.task-routine-checkbox {
    appearance: none;
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    border: 1.5px solid var(--task-routine-checkbox-border-dark);
    border-radius: 4px;
    margin-left: 8px;
    margin-right: 8px;
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
    transition: border-color 0.2s ease, background-color 0.2s ease;
}

body.light .task-routine-checkbox {
    border-color: var(--task-routine-checkbox-border-light);
}

.task-routine-checkbox:hover {
    border-color: var(--task-routine-checkbox-border-hover-dark);
}

body.light .task-routine-checkbox:hover {
    border-color: var(--task-routine-checkbox-border-hover-light);
}

.task-routine-checkbox:checked {
    background-color: var(--task-routine-checkbox-checked-bg-dark);
    border-color: var(--task-routine-checkbox-checked-border-dark);
}

body.light .task-routine-checkbox:checked {
    background-color: var(--task-routine-checkbox-checked-bg-light);
    border-color: var(--task-routine-checkbox-checked-border-light);
}

.task-routine-checkbox:checked::before {
    content: '✔';
    font-size: 10px;
    color: white;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    line-height: 1;
}

.task-text-recurrent-v2 {
    flex-grow: 1;
    line-height: 1.4;
    white-space: normal;
    word-break: break-word;
    overflow-wrap: break-word;
    text-align: left;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    cursor: pointer;
    padding-right: 3px;
}

.task-actions-recurrent-v2 {
    display: flex;
    gap: 4px;
    flex-shrink: 0;
    opacity: 0;
    transition: opacity 0.2s ease;
    margin-left: 4px;
}

.task-item-recurrent-v2:hover .task-actions-recurrent-v2 {
    opacity: 1;
}

.btn-icon-recurrent-task-v2 {
    background: transparent;
    border: none;
    color: var(--task-item-recurrent-v2-icon-color-dark);
    font-size: 0.8rem;
    padding: 2px;
    border-radius: 4px;
    line-height: 1;
    transition: color 0.2s ease, background-color 0.2s ease;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

body.light .btn-icon-recurrent-task-v2 {
    color: var(--task-item-recurrent-v2-icon-color-light);
}

.btn-icon-recurrent-task-v2.edit:hover {
    color: var(--task-edit-btn-hover-color-dark);
    background-color: var(--task-edit-btn-hover-bg-dark);
}

body.light .btn-icon-recurrent-task-v2.edit:hover {
    color: var(--task-edit-btn-hover-color-light);
    background-color: var(--task-edit-btn-hover-bg-light);
}

.btn-icon-recurrent-task-v2.save:hover {
    color: var(--primary-color-dark);
    background-color: rgba(var(--primary-color-dark-rgb), 0.2);
}

body.light .btn-icon-recurrent-task-v2.save:hover {
    color: var(--primary-color-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.2);
}

.btn-icon-recurrent-task-v2.delete:hover,
.btn-icon-recurrent-task-v2.cancel-edit:hover {
    color: var(--task-delete-btn-hover-color-dark);
    background-color: var(--task-delete-btn-hover-bg-dark);
}

body.light .btn-icon-recurrent-task-v2.delete:hover,
body.light .btn-icon-recurrent-task-v2.cancel-edit:hover {
    color: var(--task-delete-btn-hover-color-light);
    background-color: var(--task-delete-btn-hover-bg-light);
}


.day-card-v2-selected-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: transparent;
    position: absolute;
    bottom: 6px;
    left: 50%;
    transform: translateX(-50%);
    transition: background-color 0.2s ease;
    flex-shrink: 0;
}

.day-card-v2.selected .day-card-v2-selected-indicator {
    background-color: var(--day-card-v2-indicator-dark);
}

body.light .day-card-v2.selected .day-card-v2-selected-indicator {
    background-color: var(--day-card-v2-indicator-light);
}

.recurring-modal-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 15px;
    border-top: 1px solid var(--card-border-dark);
    flex-shrink: 0;
    margin-top: auto;
}

body.light .recurring-modal-footer {
    border-top-color: var(--card-border-light);
}

.recurring-modal-footer .footer-info-text {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
}

body.light .recurring-modal-footer .footer-info-text {
    color: var(--text-muted-light);
}

.recurring-modal-footer .footer-total-tasks-count {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
    font-weight: 500;
}

body.light .recurring-modal-footer .footer-total-tasks-count {
    color: var(--text-muted-light);
}

.recurring-modal-footer .modal-buttons {
    display: none;
}


/* Modal de tarefas recorrentes antigo (v1) - Ocultar se o novo (v2) estiver sendo usado */
#recurring-task-modal[data-modal-type="recurring-task-definition"] {
    display: none !important;
}

#recurring-task-modal[data-modal-type="recurring-task"] {
    max-width: 580px;
    padding: 28px;
    padding-top: 52px;
}

#recurring-task-modal[data-modal-type="recurring-task"] .modal-content {
    display: flex;
    flex-direction: column;
    height: 100%;
}


#recurring-task-modal .modal-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 8px;
}

body.light #recurring-task-modal .modal-title {
    color: var(--text-color-light);
}

#recurring-task-modal .modal-subtitle-description {
    font-size: 0.95rem;
    color: var(--text-muted-dark);
    margin-bottom: 24px;
    text-align: center;
}

body.light #recurring-task-modal .modal-subtitle-description {
    color: var(--text-muted-light);
}

#recurring-task-modal .form-group {
    margin-bottom: 18px;
}

#recurring-task-modal .form-label {
    font-weight: 500;
    margin-bottom: 6px;
    display: block;
}

.form-label-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.required-asterisk {
    color: var(--task-delete-btn-hover-color-dark);
    font-weight: bold;
    margin-left: 2px;
}

body.light .required-asterisk {
    color: var(--task-delete-btn-hover-color-light);
}

.label-hint {
    font-size: 0.85em;
    color: var(--text-muted-dark);
    font-weight: normal;
}

body.light .label-hint {
    color: var(--text-muted-light);
}

.form-group-inline:not(.pattern-meta-inputs) {
    display: flex;
    gap: 15px;
    align-items: flex-start;
}

.form-group-inline:not(.pattern-meta-inputs)>.form-group {
    flex: 1;
    margin-bottom: 0;
}


.recurring-days-checkbox-group {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
    background-color: transparent;
    padding: 0;
    border: none;
}

.recurring-days-checkbox-group label {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 10px 6px;
    border-radius: 8px;
    background-color: rgba(var(--primary-color-dark-rgb), 0.08);
    border: 1px solid rgba(var(--primary-color-dark-rgb), 0.15);
    transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    font-weight: 500;
    text-align: center;
    cursor: pointer;
}

body.light .recurring-days-checkbox-group label {
    background-color: rgba(var(--primary-color-light-rgb), 0.08);
    border-color: rgba(var(--primary-color-light-rgb), 0.15);
    color: var(--text-muted-light);
}

.recurring-days-checkbox-group label:hover {
    border-color: var(--primary-color-dark);
    background-color: rgba(var(--primary-color-dark-rgb), 0.15);
    color: var(--primary-color-dark);
}

body.light .recurring-days-checkbox-group label:hover {
    border-color: var(--primary-color-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.15);
    color: var(--primary-color-light);
}

.recurring-days-checkbox-group input[type="checkbox"] {
    display: none;
}

.recurring-days-checkbox-group label.checked {
    background-color: var(--primary-color-dark) !important;
    border-color: var(--primary-color-dark) !important;
    color: white !important;
}

body.light .recurring-days-checkbox-group label.checked {
    background-color: var(--primary-color-light) !important;
    border-color: var(--primary-color-light) !important;
    color: white !important;
}

.form-info-notice {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 15px;
    border-radius: 8px;
    background-color: rgba(var(--primary-color-dark-rgb), 0.1);
    border: 1px solid rgba(var(--primary-color-dark-rgb), 0.2);
    font-size: 0.85rem;
    color: var(--text-muted-dark);
    margin-top: 12px;
    margin-bottom: 20px;
}

body.light .form-info-notice {
    background-color: rgba(var(--primary-color-light-rgb), 0.1);
    border-color: rgba(var(--primary-color-light-rgb), 0.2);
    color: var(--text-muted-light);
}

.form-info-notice i {
    font-size: 1.2rem;
    color: var(--primary-color-dark);
    flex-shrink: 0;
}

body.light .form-info-notice i {
    color: var(--primary-color-light);
}

.form-info-notice span {
    line-height: 1.4;
}


.recurring-task-divider {
    margin: 28px 0 20px 0;
    border-color: var(--card-border-dark);
    opacity: 0.5;
}

body.light .recurring-task-divider {
    border-color: var(--card-border-light);
}

.recurring-patterns-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--card-border-dark);
    flex-shrink: 0;
}

body.light .recurring-patterns-header {
    border-bottom-color: var(--card-border-light);
}

.recurring-patterns-header .modal-subtitle {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0;
    color: var(--text-color-dark);
}

body.light .recurring-patterns-header .modal-subtitle {
    color: var(--text-color-light);
}

.recurring-patterns-count {
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    font-weight: 500;
    background-color: rgba(var(--primary-color-dark-rgb), 0.1);
    padding: 4px 8px;
    border-radius: 6px;
}

body.light .recurring-patterns-count {
    color: var(--text-muted-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.1);
}


#recurring-patterns-list {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 220px;
    overflow-y: auto;
    background-color: transparent;
    border: none;
    padding-right: 5px;
    flex-shrink: 1;
    min-height: 50px;
}

.recurring-pattern-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 15px;
    padding: 15px;
    margin-bottom: 12px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background-color 0.15s ease, box-shadow 0.15s ease;
    background-color: rgba(var(--primary-color-dark-rgb), 0.1);
    border: 1px solid rgba(var(--primary-color-dark-rgb), 0.2);
}

.recurring-pattern-item:last-child {
    margin-bottom: 0;
}

body.light .recurring-pattern-item {
    background-color: var(--card-solid-bg-light);
    border-color: var(--card-border-light);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.recurring-pattern-item:hover {
    box-shadow: 0 4px 10px rgba(var(--primary-color-dark-rgb), 0.1) !important;
}

body.light .recurring-pattern-item:hover {
    box-shadow: 0 4px 10px rgba(var(--primary-color-light-rgb), 0.1);
}

.recurring-pattern-info {
    display: flex;
    flex-direction: column;
    gap: 8px;
    min-width: 0;
    flex-grow: 1;
}

.recurring-pattern-name {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--text-color-dark);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 2px;
}

body.light .recurring-pattern-name {
    color: var(--text-color-light);
}

.recurring-pattern-details-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.recurring-pattern-days {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-bottom: 2px;
}

.day-pill {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 3px 7px;
    border-radius: 12px;
    background-color: rgba(var(--primary-color-dark-rgb), 0.15);
    color: var(--primary-color-dark);
    border: 1px solid rgba(var(--primary-color-dark-rgb), 0.25);
    white-space: nowrap;
}

body.light .day-pill {
    background-color: rgba(var(--primary-color-light-rgb), 0.15);
    color: var(--primary-color-light);
    border-color: rgba(var(--primary-color-light-rgb), 0.25);
}

.recurring-pattern-dates {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
    line-height: 1.3;
}

body.light .recurring-pattern-dates {
    color: var(--text-muted-light);
}

.recurring-pattern-dates .date-label {
    font-weight: 500;
    color: var(--text-muted-dark);
}

body.light .recurring-pattern-dates .date-label {
    color: var(--text-muted-light);
}


.recurring-pattern-actions {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-shrink: 0;
}

.btn-icon-recurring {
    background: transparent;
    border: 1px solid transparent;
    font-size: 1.1rem;
    padding: 6px;
    border-radius: 50%;
    color: var(--text-muted-dark);
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease, transform 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
}

body.light .btn-icon-recurring {
    color: var(--text-muted-light);
}

.btn-icon-recurring:hover {
    transform: scale(1.1);
}

.btn-icon-recurring.edit:hover {
    background-color: rgba(var(--primary-color-dark-rgb), 0.15);
    color: var(--primary-color-dark);
}

body.light .btn-icon-recurring.edit:hover {
    background-color: rgba(var(--primary-color-light-rgb), 0.15);
    color: var(--primary-color-light);
}

.btn-icon-recurring.delete:hover {
    background-color: var(--task-delete-btn-hover-bg-dark);
    color: var(--task-delete-btn-hover-color-dark);
}

body.light .btn-icon-recurring.delete:hover {
    background-color: var(--task-delete-btn-hover-bg-light);
    color: var(--task-delete-btn-hover-color-light);
}


.recurring-pattern-empty-message {
    text-align: center;
    color: var(--text-muted-dark);
    padding: 20px 0;
    font-style: italic;
    font-size: 0.9rem;
}

body.light .recurring-pattern-empty-message {
    color: var(--text-muted-light);
}

/* Modal de Exclusão de Tarefa Recorrente */
#delete-recurring-task-modal .modal-content {
    padding: 28px;
    padding-top: 48px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

#delete-recurring-task-modal .modal-title {
    font-size: 1.4rem;
    margin-bottom: 12px;
}

#delete-recurring-task-modal .modal-body-text {
    font-size: 0.95rem;
    line-height: 1.5;
    color: var(--text-muted-dark);
    margin-bottom: 20px;
}

body.light #delete-recurring-task-modal .modal-body-text {
    color: var(--text-muted-light);
}

.delete-options-group {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
    width: 100%;
    max-width: 380px;
}

.delete-option-card {
    display: flex;
    align-items: center;
    padding: 12px 15px;
    border-radius: 8px;
    border: 1px solid var(--card-border-dark);
    background-color: rgba(var(--primary-color-dark-rgb), 0.05);
    transition: border-color 0.2s ease, background-color 0.2s ease;
    cursor: pointer;
}

body.light .delete-option-card {
    border-color: var(--card-border-light);
    background-color: rgba(var(--primary-color-light-rgb), 0.05);
}

.delete-option-card input[type="radio"] {
    appearance: none;
    -webkit-appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid var(--text-muted-dark);
    margin-right: 12px;
    flex-shrink: 0;
    position: relative;
    outline: none;
    transition: border-color 0.2s ease, background-color 0.2s ease;
}

body.light .delete-option-card input[type="radio"] {
    border-color: var(--text-muted-light);
}

.delete-option-card input[type="radio"]:checked {
    border-color: var(--primary-color-dark);
    background-color: var(--primary-color-dark);
}

body.light .delete-option-card input[type="radio"]:checked {
    border-color: var(--primary-color-light);
    background-color: var(--primary-color-light);
}

.delete-option-card input[type="radio"]:checked::before {
    content: '';
    display: block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: var(--card-solid-bg-dark);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

body.light .delete-option-card input[type="radio"]:checked::before {
    background-color: var(--card-solid-bg-light);
}

.delete-option-card:hover input[type="radio"]:not(:checked) {
    border-color: var(--primary-color-dark);
}

body.light .delete-option-card:hover input[type="radio"]:not(:checked) {
    border-color: var(--primary-color-light);
}

.delete-option-card.selected {
    border-color: var(--primary-color-dark) !important;
    background-color: rgba(var(--primary-color-dark-rgb), 0.15) !important;
}

body.light .delete-option-card.selected {
    border-color: var(--primary-color-light) !important;
    background-color: rgba(var(--primary-color-light-rgb), 0.15) !important;
}

.delete-option-card.selected .delete-option-icon i,
.delete-option-card.selected .delete-option-text strong {
    color: var(--primary-color-dark);
}

.delete-option-card.selected .delete-option-text small {
    color: color-mix(in srgb, var(--primary-color-dark) 70%, var(--text-muted-dark) 30%);
}

body.light .delete-option-card.selected .delete-option-icon i,
body.light .delete-option-card.selected .delete-option-text strong {
    color: var(--primary-color-light);
}

body.light .delete-option-card.selected .delete-option-text small {
    color: color-mix(in srgb, var(--primary-color-light) 70%, var(--text-muted-light) 30%);
}

#delete-option-all-card.selected {
    border-color: var(--task-delete-btn-hover-color-dark) !important;
    background-color: rgba(var(--task-delete-btn-hover-color-dark-rgb), 0.15) !important;
}

body.light #delete-option-all-card.selected {
    border-color: var(--task-delete-btn-hover-color-light) !important;
    background-color: rgba(var(--task-delete-btn-hover-color-light-rgb), 0.15) !important;
}

#delete-option-all-card.selected .delete-option-icon i,
#delete-option-all-card.selected .delete-option-text strong {
    color: var(--task-delete-btn-hover-color-dark) !important;
}

#delete-option-all-card.selected .delete-option-text small {
    color: color-mix(in srgb, var(--task-delete-btn-hover-color-dark) 70%, var(--text-muted-dark) 30%) !important;
}

body.light #delete-option-all-card.selected .delete-option-icon i,
body.light #delete-option-all-card.selected .delete-option-text strong {
    color: var(--task-delete-btn-hover-color-light) !important;
}

body.light #delete-option-all-card.selected .delete-option-text small {
    color: color-mix(in srgb, var(--task-delete-btn-hover-color-light) 70%, var(--text-muted-light) 30%) !important;
}


.delete-option-card-content {
    display: flex;
    align-items: center;
    gap: 10px;
}

.delete-option-icon i {
    font-size: 1.3rem;
    color: var(--text-muted-dark);
    transition: color 0.2s ease;
    width: 24px;
    text-align: center;
}

.delete-option-text {
    display: flex;
    flex-direction: column;
    text-align: left;
}

.delete-option-text strong {
    font-weight: 600;
    color: var(--text-color-dark);
    font-size: 0.95rem;
    line-height: 1.3;
}

body.light .delete-option-text strong {
    color: var(--text-color-light);
}

.delete-option-text small {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
    line-height: 1.3;
}

body.light .delete-option-text small {
    color: var(--text-muted-light);
}

.delete-recurring-warning {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 12px;
    border-radius: 8px;
    background-color: rgba(var(--primary-color-dark-rgb), 0.08);
    border: 1px solid rgba(var(--primary-color-dark-rgb), 0.2);
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    margin-bottom: 24px;
    width: 100%;
    max-width: 380px;
    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
    text-align: left;
}

body.light .delete-recurring-warning {
    background-color: rgba(var(--primary-color-light-rgb), 0.08);
    border-color: rgba(var(--primary-color-light-rgb), 0.2);
    color: var(--text-muted-light);
}

.delete-recurring-warning i {
    font-size: 1.2rem;
    color: var(--primary-color-dark);
    flex-shrink: 0;
}

body.light .delete-recurring-warning i {
    color: var(--primary-color-light);
}

.delete-recurring-warning.danger {
    background-color: rgba(var(--task-delete-btn-hover-color-dark-rgb), 0.1);
    border-color: rgba(var(--task-delete-btn-hover-color-dark-rgb), 0.3);
    color: var(--task-delete-btn-hover-color-dark);
}

body.light .delete-recurring-warning.danger {
    background-color: rgba(var(--task-delete-btn-hover-color-light-rgb), 0.1);
    border-color: rgba(var(--task-delete-btn-hover-color-light-rgb), 0.3);
    color: var(--task-delete-btn-hover-color-light);
}

.delete-recurring-warning.danger i {
    color: var(--task-delete-btn-hover-color-dark);
}

body.light .delete-recurring-warning.danger i {
    color: var(--task-delete-btn-hover-color-light);
}


#delete-recurring-task-modal .modal-buttons {
    justify-content: center;
    width: 100%;
    max-width: 380px;
    margin-top: 20px;
}

#btn-confirm-delete-recurring-action {
    flex-grow: 1;
}

#btn-confirm-delete-recurring-action.btn-danger-style {
    background-color: var(--task-delete-btn-hover-color-dark) !important;
    color: white !important;
}

body.light #btn-confirm-delete-recurring-action.btn-danger-style {
    background-color: var(--task-delete-btn-hover-color-light) !important;
}

#btn-confirm-delete-recurring-action.btn-danger-style:hover {
    background-color: color-mix(in srgb, var(--task-delete-btn-hover-color-dark) 85%, black) !important;
}

body.light #btn-confirm-delete-recurring-action.btn-danger-style:hover {
    background-color: color-mix(in srgb, var(--task-delete-btn-hover-color-light) 85%, white) !important;
}

#btn-cancel-delete-recurring {
    background-color: transparent;
    border: 1px solid var(--card-border-dark);
    color: var(--text-muted-dark);
    flex-grow: 1;
    font-weight: 500;
}

body.light #btn-cancel-delete-recurring {
    border-color: var(--card-border-light);
    color: var(--text-muted-light);
}

#btn-cancel-delete-recurring:hover {
    background-color: rgba(255, 255, 255, 0.05);
    border-color: var(--text-muted-dark);
}

body.light #btn-cancel-delete-recurring:hover {
    background-color: rgba(0, 0, 0, 0.04);
    border-color: var(--text-muted-light);
}

#themes-modal {
    background: var(--card-bg-dark);
    border-color: var(--card-border-dark);
    color: var(--text-color-dark);
    max-width: 520px;
}

body.light #themes-modal {
    background: var(--card-bg-light);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
}

#themes-modal .modal-title {
    color: var(--text-color-dark);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 1.6rem;
}

body.light #themes-modal .modal-title {
    color: var(--text-color-light);
}

.themes-modal-title-icon {
    color: var(--primary-color-dark);
    font-size: 1.3em;
}

body.light .themes-modal-title-icon {
    color: var(--primary-color-light);
}

.themes-modal-section {
    margin-bottom: 28px;
}

.themes-modal-section-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 6px;
    color: var(--text-color-dark);
    display: flex;
    align-items: center;
    gap: 8px;
}

body.light .themes-modal-section-title {
    color: var(--text-color-light);
}

.themes-modal-section-subtitle {
    font-size: 0.9rem;
    color: var(--text-muted-dark);
    margin-bottom: 16px;
}

body.light .themes-modal-section-subtitle {
    color: var(--text-muted-light);
}

.palette-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 12px;
}

.palette-btn {
    aspect-ratio: 1.5 / 1;
    border-radius: 10px;
    border: 2px solid transparent;
    transition: border-color 0.2s ease, transform 0.15s ease;
    position: relative;
    overflow: hidden;
}

.palette-btn:hover {
    transform: scale(1.05);
}

.palette-btn.active {
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 0 2px var(--primary-color-dark);
}

body.light .palette-btn.active {
    border-color: var(--primary-color-light);
    box-shadow: 0 0 0 2px var(--primary-color-light);
}

.palette-btn .active-check {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1.8rem;
    color: white;
    text-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
}

.palette-btn.active .active-check {
    display: block;
}


.mode-buttons {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
}

.mode-btn {
    background-color: color-mix(in srgb, var(--card-bg-dark) 95%, rgba(255, 255, 255, 0.05) 5%);
    border: 1px solid var(--card-border-dark);
    color: var(--text-color-dark);
    border-radius: 10px;
    padding: 16px;
    text-align: left;
    transition: background-color 0.2s, border-color 0.2s, transform 0.15s ease;
    display: flex;
    flex-direction: column;
    gap: 6px;
    position: relative;
}

body.light .mode-btn {
    background-color: color-mix(in srgb, var(--card-bg-light) 95%, rgba(0, 0, 0, 0.03) 5%);
    border: 1px solid var(--card-border-light);
    color: var(--text-color-light);
}

.mode-btn:hover {
    background-color: color-mix(in srgb, var(--card-bg-dark) 85%, rgba(255, 255, 255, 0.1) 15%);
    transform: translateY(-2px);
}

body.light .mode-btn:hover {
    background-color: color-mix(in srgb, var(--card-bg-light) 85%, rgba(0, 0, 0, 0.06) 15%);
}

.mode-btn.active {
    border-color: var(--primary-color-dark);
    background-color: color-mix(in srgb, var(--primary-color-dark) 15%, var(--card-bg-dark));
}

body.light .mode-btn.active {
    border-color: var(--primary-color-light);
    background-color: color-mix(in srgb, var(--primary-color-light) 15%, var(--card-bg-light));
}

.mode-btn .mode-icon {
    font-size: 1.5rem;
    color: var(--primary-color-dark);
    margin-bottom: 4px;
}

body.light .mode-btn .mode-icon {
    color: var(--primary-color-light);
}

.mode-btn .mode-title {
    font-size: 1rem;
    font-weight: 600;
}

.mode-btn .mode-subtitle {
    font-size: 0.8rem;
    color: var(--text-muted-dark);
}

body.light .mode-btn .mode-subtitle {
    color: var(--text-muted-light);
}

.mode-btn .active-dot {
    display: none;
    position: absolute;
    top: 10px;
    right: 10px;
    width: 10px;
    height: 10px;
    background-color: var(--primary-color-dark);
    border-radius: 50%;
}

body.light .mode-btn .active-dot {
    background-color: var(--primary-color-light);
}

.mode-btn.active .active-dot {
    display: block;
}

#themes-modal .modal-buttons {
    justify-content: space-between;
    margin-top: 30px;
}

.themes-btn-apply {
    background: var(--primary-color-dark);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

body.light #themes-modal .themes-btn-apply {
    background: var(--primary-color-light);
}

.themes-btn-apply i {
    font-size: 1em;
    display: none;
}


.modal-close-btn {
    position: absolute;
    top: 16px;
    right: 16px;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--text-color-dark);
    padding: 8px;
    line-height: 1;
    border-radius: 50%;
    transition: background-color 0.2s ease, color 0.2s ease, transform 0.1s ease, font-size 0.2s ease;
    z-index: 10;
}

body.light .modal-close-btn {
    color: var(--text-color-light);
}

.modal-close-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

body.light .modal-close-btn:hover {
    background-color: rgba(0, 0, 0, 0.08);
}


.modal-title {
    font-size: 22px;
    font-weight: 600;
    margin-bottom: 24px;
    text-align: center;
}

body.light .modal-title {
    color: var(--text-color-light);
}

.modal-body-text {
    font-size: 14px;
    line-height: 1.6;
    margin-bottom: 24px;
    color: var(--text-muted-dark);
}

body.light .modal-body-text {
    color: var(--text-muted-light);
}

.modal-body-text ul {
    list-style-position: inside;
    padding-left: 0px;
    margin-top: 8px;
    margin-bottom: 12px;
}

.modal-body-text ul ul {
    margin-left: 20px;
    margin-top: 4px;
    margin-bottom: 8px;
}

.guide-text p {
    margin-bottom: 10px;
}

.guide-text li {
    margin-bottom: 8px;
}

.guide-highlight {
    color: var(--primary-color-dark);
    font-weight: 500;
}

body.light .guide-highlight {
    color: var(--primary-color-light);
}

.guide-icon-example,
.guide-btn-example {
    padding: 0 2px;
    border-radius: 3px;
    background-color: rgba(128, 128, 128, 0.1);
}

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    color: var(--text-muted-dark);
}

body.light .form-label {
    color: var(--text-muted-light);
}

.form-group-checkbox {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 20px;
    margin-bottom: 10px;
}

.form-group-checkbox input[type="checkbox"] {
    width: auto;
}

.form-input {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--card-border-dark);
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.1);
    color: var(--text-color-dark);
    font-size: 16px;
    -moz-appearance: textfield;
    transition: border-color 0.3s ease, box-shadow 0.3s ease, padding 0.2s ease, font-size 0.2s ease;
}

body.light .form-input {
    background: rgba(255, 255, 255, 0.5);
    border-color: var(--card-border-light);
    color: var(--text-color-light);
}

.form-input::-webkit-outer-spin-button,
.form-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-color-dark);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--primary-color-dark) 30%, transparent);
}

body.light .form-input:focus {
    border-color: var(--primary-color-light);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--primary-color-light) 20%, transparent);
}

.modal-buttons {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 24px;
    flex-shrink: 0;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.2s ease, background-color 0.3s ease, color 0.3s ease, padding 0.2s ease, font-size 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
}

.btn-primary {
    background: var(--primary-color-dark);
    color: white;
}

body.light .btn-primary {
    background: var(--primary-color-light);
}

.btn-primary:hover {
    opacity: 0.8;
}

.btn-secondary {
    background: var(--card-bg-dark);
    color: var(--text-muted-dark);
    border: 1px solid var(--card-border-dark);
}

body.light .btn-secondary {
    background: var(--card-bg-light);
    color: var(--text-muted-light);
    border: 1px solid var(--card-border-light);
}

.btn-secondary:hover {
    background: color-mix(in srgb, var(--card-bg-dark) 80%, black);
}

body.light .btn-secondary:hover {
    background: color-mix(in srgb, var(--card-bg-light) 80%, white);
}

.btn-reset-app {
    background-color: #dc3545;
    color: white;
    padding-left: 15px;
    justify-content: flex-start;
    gap: 8px;
}

.btn-reset-app:hover {
    background-color: #c82333;
}

.btn-reset-app:active {
    background-color: #bd2130;
}

.modal-buttons .btn-reset-app {
    margin-right: auto;
}

.loader {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: inline-block;
    position: relative;
    border: 3px solid;
    border-color: var(--primary-color-dark) var(--primary-color-dark) transparent transparent;
    animation: rotation 1s linear infinite;
}

html.light-theme-active .loader,
body.light .loader {
    border-color: var(--primary-color-light) var(--primary-color-light) transparent transparent;
}

.loader::after,
.loader::before {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    margin: auto;
    border-radius: 50%;
}

.loader::after {
    width: 40px;
    height: 40px;
    border: 3px solid;
    border-color: transparent transparent var(--primary-color-dark) var(--primary-color-dark);
    animation: rotationBack 0.5s linear infinite;
}

html.light-theme-active .loader::after,
body.light .loader::after {
    border-color: transparent transparent var(--primary-color-light) var(--primary-color-light);
}

@keyframes rotation {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

@keyframes rotationBack {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(-360deg);
    }
}

body.theme-mode-focus {
    --body-bg-dark: #0A0A0A;
    --card-bg-dark: rgba(40, 40, 42, 0.75);
    --card-solid-bg-dark: #121212;
    --header-bg-dark: var(--card-bg-dark);
    --body-bg-light: #EFEFEF;
    --card-bg-light: #FAFAFA;
    --card-solid-bg-light: #FAFAFA;
    --header-bg-light: var(--card-bg-light);
}

body.theme-mode-night {
    --body-bg-dark: #000000;
    --card-bg-dark: #101010;
    --card-solid-bg-dark: #0D0D0D;
    --card-border-dark: #1F1F1F;
    --header-bg-dark: var(--card-bg-dark);
    --header-border-dark: var(--card-border-dark);
    --body-bg-light: #E0E0E0;
    --card-bg-light: #F0F0F0;
    --card-solid-bg-light: #F0F0F0;
    --card-border-light: #D8D8D8;
    --header-bg-light: var(--card-bg-light);
    --header-border-light: var(--card-border-light);
}

body.theme-mode-motivational {
    --body-bg-dark: #020306;
    --card-border-dark: var(--primary-color-dark);
    --card-solid-bg-dark: #1A1A1D;
    --body-bg-light: linear-gradient(180deg, color-mix(in srgb, var(--primary-color-light) 20%, #f4f4f4) 0%, #f4f4f4 30%);
    --card-border-light: var(--primary-color-light);
    --card-solid-bg-light: var(--card-bg-light);
}

body.theme-mode-motivational .header {
    border-color: var(--primary-color-dark);
}

body.light.theme-mode-motivational .header {
    border-color: var(--primary-color-light);
}


@media (min-width: 769px) {
    .header {}

    .question-counter {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
    }

    .header-controls {
        margin-left: auto;
    }

    .scroll-indicator {
        display: flex;
    }
}

@media screen and (min-width: 769px) and (max-width: 1700px) {
    .container {
        padding-top: 15px;
    }

    .header {
        padding: 18px 20px 18px 15px;
        margin-bottom: 20px;
    }

    .logo {
        font-size: 22px;
    }

    .logo-icon {
        width: 22px;
        height: 22px;
        font-size: 12px;
    }

    .question-counter {
        gap: 6px;
    }

    .counter-btn {
        width: 32px;
        height: 32px;
        font-size: 18px;
    }

    .counter-display,
    #questions-step-input.counter-display {
        font-size: 20px;
        min-width: 40px;
    }

    #questions-step-input.counter-display {
        max-width: 60px;
    }

    .btn-icon-nav,
    .theme-toggle-btn {
        font-size: 1.4rem;
        padding: 7px;
    }

    .header-controls {
        gap: 10px;
    }

    .stats-grid {
        gap: 15px;
        margin-bottom: 20px;
    }

    .stat-card {
        padding: 18px;
        border-radius: 12px;
    }

    .stat-title {
        font-size: 13px;
        margin-bottom: 12px;
    }

    .circular-progress {
        width: 90px;
        height: 90px;
        margin-bottom: 12px;
    }

    .progress-ring-circle {
        stroke-width: 7;
    }

    .progress-number {
        font-size: 26px;
    }

    .progress-target {
        font-size: 12px;
    }

    .bottom-cards {
        gap: 15px;
        margin-bottom: 20px;
    }

    .info-card {
        padding: 18px;
        border-radius: 12px;
    }

    .card-title {
        font-size: 14px;
        margin-bottom: 10px;
    }

    .card-title-icon {
        font-size: 1rem;
    }

    .card-value {
        font-size: 26px;
        margin-bottom: 6px;
    }

    .streak-value-meta-container {
        margin-bottom: 6px;
    }

    .card-subtitle {
        font-size: 13px;
    }

    .card-streak-target {
        font-size: 12px;
    }

    .progress-bar-horizontal {
        height: 7px;
    }

    .activity-section,
    .pomodoro-section,
    .tasks-section,
    .chart-section {
        padding: 18px;
        border-radius: 12px;
    }

    .activity-section {
        margin-bottom: 20px;
    }

    .activity-header,
    .chart-section .chart-header {
        margin-bottom: 18px;
    }

    .activity-title,
    .pomodoro-title,
    .tasks-title,
    .chart-section .chart-title {
        font-size: 16px;
    }

    .tasks-header-actions .btn-icon-nav {
        padding: 5px;
        font-size: 1.2rem;
    }

    .activity-controls .control-btn {
        width: 28px;
        height: 28px;
    }

    .activity-value {
        padding: 5px 10px;
        font-size: 13px;
    }

    .activity-section .chart-container,
    .chart-section .chart-container {
        height: 130px;
    }

    .pomodoro-settings-btn {
        font-size: 1.2rem;
    }

    .pomodoro-timer-display {
        font-size: 3.5rem;
        margin-bottom: 12px;
    }

    .pomodoro-status {
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .pomodoro-controls button {
        padding: 8px 16px;
        font-size: 0.9rem;
    }

    .pomodoro-cycles {
        font-size: 0.8rem;
    }

    #task-form {
        flex-wrap: nowrap;
    }

    #task-input,
    .task-date-input.flatpickr-input {
        padding: 9px;
        font-size: 0.95rem;
        flex-basis: auto;
        height: 36px;
    }

    .task-date-input.flatpickr-input {
        flex-basis: 140px;
        padding-right: 30px;
    }

    #add-task-btn,
    .btn-recurring {
        padding: 0 18px;
        font-size: 0.9rem;
        line-height: 36px;
        height: 36px;
    }

    .btn-recurring {
        padding: 0 15px;
    }

    #task-list {
        max-height: 220px;
    }

    .task-item-text {
        font-size: 0.95rem;
    }

    .tasks-counter {
        font-size: 0.85rem;
    }

    footer {
        padding: 15px 0;
        font-size: 0.8rem;
        margin-top: 20px;
    }

    .modal {
        padding: 24px;
        padding-top: 40px;
        border-radius: 12px;
    }

    .modal-close-btn {
        top: 12px;
        right: 12px;
        font-size: 1.3rem;
        padding: 6px;
    }

    .modal-title {
        font-size: 20px;
        margin-bottom: 20px;
    }

    .modal-body-text {
        margin-bottom: 20px;
    }

    .form-label {
        font-size: 13px;
    }

    .form-input {
        padding: 10px;
        font-size: 15px;
        border-radius: 6px;
    }

    .modal-buttons {
        margin-top: 20px;
    }

    .btn {
        padding: 8px 16px;
        font-size: 13px;
        border-radius: 6px;
    }

    .productivity-focus-area {
        margin-bottom: 20px;
    }

    #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] {
        width: clamp(850px, 95vw, 1600px);
        max-height: calc(90vh - 30px);
    }

    .recurring-pattern-definition-v2-content {
        padding: 24px 28px;
    }

    .recurring-pattern-v2-days-grid {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 15px;
    }

    .day-card-v2 {
        padding: 12px;
        height: 100%;
    }

    .recurring-modal-controls-top .day-selection-actions .btn {
        font-size: 0.8rem;
        padding: 5px 10px;
    }

    #new-task-text-input-v2,
    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        height: 40px;
    }

    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        line-height: normal;
    }
}

@media (max-width: 992px) {
    .productivity-focus-area {
        flex-direction: column;
        gap: 15px;
        margin-top: 0;
        margin-bottom: 15px;
        align-items: stretch;
    }

    .pomodoro-section-wrapper,
    .tasks-section-wrapper {
        width: 100%;
        gap: 15px;
    }

    .pomodoro-section-wrapper>.pomodoro-section,
    .pomodoro-section-wrapper>.chart-section,
    .tasks-section-wrapper>.tasks-section,
    .tasks-section-wrapper>.chart-section {
        margin-bottom: 0 !important;
    }

    .activity-section {
        margin-bottom: 15px;
    }

    #task-list {
        max-height: 200px;
    }

    #recurring-task-modal[data-modal-type="recurring-task-definition-v2"] {
        width: 95vw;
        max-width: 95vw;
        height: 90vh;
        max-height: 90vh;
    }

    .recurring-pattern-definition-v2-content {
        padding: 20px;
        gap: 12px;
    }

    .recurring-modal-controls-top {
        flex-direction: column;
        align-items: stretch;
        gap: 10px;
        padding: 6px 0 10px 0;
    }

    .recurring-modal-controls-top .new-task-input-container-v2 {
        order: 1;
        max-width: none;
    }

    .recurring-modal-sub-controls-line {
        order: 2;
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        margin-top: 8px;
    }

    .recurring-modal-controls-top .selected-days-count {
        margin-left: 0;
        margin-bottom: 0;
        width: auto;
    }

    .recurring-modal-controls-top .day-selection-actions {
        width: auto;
        margin-left: 0;
        justify-content: flex-end;
    }

    .recurring-pattern-v2-days-grid {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
    }

    .recurring-modal-footer {
        flex-direction: row;
        align-items: center;
        gap: 15px;
        padding-top: 15px;
    }
}


@media (max-width: 768px) {
    .container {
        padding-left: 15px;
        padding-right: 15px;
    }

    .header {
        flex-wrap: wrap;
        padding: 16px;
        margin-bottom: 15px;
        gap: 10px 15px;
    }

    .header .logo {
        order: 1;
        flex-grow: 1;
        font-size: 24px;
    }

    .header .logo-icon {
        width: 22px;
        height: 22px;
        font-size: 11px;
    }

    .header .question-counter {
        position: static;
        transform: none;
        justify-content: center;
        order: 2;
        flex-grow: 2;
        min-width: 150px;
    }

    .header .header-controls {
        justify-content: flex-end;
        order: 3;
        flex-grow: 1;
    }

    .stats-grid {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .bottom-cards {
        grid-template-columns: 1fr;
        gap: 15px;
        margin-bottom: 15px;
    }

    .stat-card,
    .info-card,
    .activity-section {
        padding: 16px;
        border-radius: 12px;
    }

    .activity-section {
        margin-bottom: 15px;
    }

    .circular-progress {
        width: 100px;
        height: 100px;
    }

    .progress-number {
        font-size: 26px;
    }

    .stat-title {
        font-size: 13px;
    }

    .progress-target {
        font-size: 13px;
    }

    .card-value {
        font-size: 28px;
    }

    .card-title {
        font-size: 14px;
    }

    .card-subtitle {
        font-size: 13px;
    }

    .activity-header,
    .chart-section .chart-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
        margin-bottom: 16px;
    }

    .activity-title,
    .pomodoro-title,
    .tasks-title,
    .chart-section .chart-title {
        font-size: 17px;
    }

    .tasks-header-actions .btn-icon-nav {
        padding: 4px;
        font-size: 1.1rem;
    }

    .activity-section .chart-container,
    .pomodoro-section-wrapper .chart-section .chart-container,
    .tasks-section-wrapper .chart-section .chart-container {
        height: 180px;
    }

    .pomodoro-timer-display {
        font-size: 3rem;
    }

    .pomodoro-controls button {
        padding: 8px 15px;
        font-size: 0.9rem;
    }

    .pomodoro-status {
        font-size: 0.95rem;
    }

    .tasks-counter {
        font-size: 0.9rem;
    }

    .scroll-indicator {
        display: none !important;
    }

    #task-form {
        flex-wrap: wrap;
    }

    #task-input {
        flex-basis: calc(100% - 140px - 10px);
        min-width: 120px;
    }

    .task-date-input.flatpickr-input {
        flex-basis: 140px;
        height: 38px;
    }

    #add-task-btn,
    .btn-recurring {
        flex-basis: auto;
    }

    @media (max-width: 570px) {
        #task-input {
            flex-basis: 100%;
            margin-bottom: 8px;
        }

        .task-date-input.flatpickr-input {
            flex-grow: 1;
            flex-basis: calc(50% - 5px);
            min-width: 130px;
        }

        .btn-recurring {
            flex-grow: 1;
            flex-basis: calc(50% - 5px);
            min-width: 0;
            padding: 0 10px;
        }

        #add-task-btn {
            flex-basis: 100%;
            margin-top: 8px;
        }
    }

    #delete-recurring-task-modal .modal-content {
        justify-content: flex-start;
        min-height: auto;
    }

    .recurring-pattern-definition-v2-content {
        padding: 15px 20px;
    }

    .recurring-modal-title-group .modal-title {
        font-size: 1.3rem;
    }

    .recurring-modal-title-group .modal-subtitle-description {
        font-size: 0.8rem;
    }

    #new-task-text-input-v2,
    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        height: 38px;
        font-size: 0.85rem;
    }

    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        padding: 0 10px;
    }

    .new-task-input-container-v2 .btn-confirm-add-task-v2 i {
        font-size: 1em;
    }

    .recurring-modal-controls-top .selected-days-count,
    .recurring-modal-controls-top .day-selection-actions .btn {
        font-size: 0.75rem;
    }

    .recurring-pattern-v2-days-grid {
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 8px;
    }

    .day-card-header-v2 {
        margin-bottom: 6px;
    }

    .day-card-v2-short {
        font-size: 0.9rem;
    }

    .day-card-task-count-v2 {
        font-size: 0.75rem;
        padding: 1px 4px;
    }

    .task-item-recurrent-v2 {
        font-size: 0.8rem;
        padding: 6px 6px 6px 0;
    }

    .task-routine-checkbox {
        width: 15px;
        height: 15px;
        margin-right: 6px;
    }

    .btn-icon-recurrent-task-v2 {
        font-size: 0.75rem;
        width: 18px;
        height: 18px;
    }

    .recurring-modal-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
}

@media (max-width: 520px) {
    #task-form {
        flex-direction: column;
        align-items: stretch;
    }

    #task-input,
    .task-date-input.flatpickr-input,
    .btn-recurring,
    #add-task-btn {
        width: 100%;
        max-width: none;
        flex-basis: auto;
        margin-bottom: 8px;
    }

    #add-task-btn {
        margin-bottom: 0;
    }

    .task-date-input.flatpickr-input {
        height: 38px;
    }

    .recurring-pattern-v2-days-grid {
        grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
    }
}


@media (max-width: 480px) {
    .container {
        padding-left: 12px;
        padding-right: 12px;
    }

    .header {
        position: sticky;
        top: 0;
        z-index: 100;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 10px;
        height: 56px;
        margin-bottom: 15px;
        border-radius: 0 0 12px 12px;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    body.light .header {
        border-bottom: 1px solid var(--header-border-light);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .header .logo {
        width: auto;
        font-size: 20px;
        flex-shrink: 0;
        gap: 6px;
        order: 1;
    }

    .header .logo-icon {
        width: 20px;
        height: 20px;
        font-size: 10px;
    }

    .header .logo-text-full {
        display: none;
    }

    .header .logo-text-short {
        display: inline;
    }

    .header .question-counter {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        width: auto;
        gap: 6px;
        order: 2;
    }

    .header .counter-btn {
        width: 30px;
        height: 30px;
        font-size: 16px;
    }

    .header .counter-display,
    #questions-step-input.counter-display {
        font-size: 18px;
        min-width: 30px;
        max-width: 45px;
        padding: 0 2px;
        line-height: 1.2;
    }

    .header .header-controls {
        width: auto;
        gap: 6px;
        flex-shrink: 0;
        order: 3;
        margin-left: auto;
    }

    .header .btn-icon-nav,
    .header .theme-toggle-btn {
        font-size: 1.2rem;
        padding: 5px;
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
        margin-bottom: 15px;
    }

    .stat-card,
    .info-card,
    .activity-section,
    .pomodoro-section,
    .tasks-section,
    .chart-section {
        padding: 12px;
    }

    .activity-section {
        margin-bottom: 15px;
    }

    .productivity-focus-area {
        margin-top: 0;
        gap: 15px;
        margin-bottom: 15px;
    }

    .pomodoro-section-wrapper,
    .tasks-section-wrapper {
        gap: 15px;
    }

    .circular-progress {
        width: 80px;
        height: 80px;
        margin-bottom: 8px;
    }

    .progress-ring-circle {
        stroke-width: 6;
    }

    .progress-number {
        font-size: 22px;
    }

    .stat-title {
        font-size: 11px;
        margin-bottom: 8px;
    }

    .progress-target {
        font-size: 11px;
    }

    .bottom-cards {
        gap: 12px;
        margin-bottom: 15px;
    }

    .card-value {
        font-size: 24px;
    }

    .card-title {
        font-size: 12px;
        margin-bottom: 6px;
    }

    .card-subtitle {
        font-size: 11px;
    }

    .card-streak-target {
        font-size: 11px;
    }

    .activity-section .chart-container,
    .pomodoro-section-wrapper .chart-section .chart-container,
    .tasks-section-wrapper .chart-section .chart-container {
        height: 150px;
    }

    .pomodoro-section,
    .tasks-section {
        min-height: auto;
    }

    #task-list {
        max-height: 180px;
    }

    .activity-title,
    .pomodoro-title,
    .tasks-title,
    .chart-section .chart-title {
        font-size: 15px;
    }

    .tasks-header-actions .btn-icon-nav {
        padding: 3px;
        font-size: 1rem;
    }

    .activity-controls .control-btn {
        width: 28px;
        height: 28px;
    }

    .activity-value {
        padding: 4px 8px;
        font-size: 12px;
    }

    .pomodoro-settings-btn {
        font-size: 1.1rem;
    }

    .pomodoro-timer-display {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .pomodoro-status {
        font-size: 0.85rem;
        margin-bottom: 15px;
    }

    .pomodoro-controls {
        gap: 10px;
        flex-wrap: wrap;
    }

    .pomodoro-controls button {
        padding: 8px 12px;
        font-size: 0.85rem;
        min-width: 80px;
        flex-grow: 1;
    }

    .pomodoro-cycles {
        font-size: 0.75rem;
    }

    .tasks-counter {
        font-size: 0.8rem;
    }

    #task-input,
    .task-date-input.flatpickr-input,
    #add-task-btn,
    .btn-recurring {
        font-size: 0.9rem;
    }

    .task-date-input.flatpickr-input {
        padding: 9px 30px 9px 10px;
    }

    #add-task-btn,
    .btn-recurring {
        padding: 10px 15px;
        line-height: normal;
    }

    .task-item-text {
        font-size: 0.9rem;
    }

    .task-assigned-date-indicator {
        font-size: 0.7em;
        margin-left: 6px;
        padding: 1px 4px;
    }

    .task-item-checkbox {
        width: 16px;
        height: 16px;
    }

    .task-item-delete-btn {
        font-size: 1rem;
        padding: 4px 6px;
    }

    .modal {
        padding: 20px;
        padding-top: 40px;
        max-width: calc(100% - 24px);
        border-radius: 12px;
    }

    .modal-close-btn {
        top: 10px;
        right: 10px;
        font-size: 1.2rem;
        padding: 6px;
    }

    .modal-title {
        font-size: 18px;
        margin-bottom: 16px;
    }

    .form-label {
        font-size: 13px;
        margin-bottom: 6px;
    }

    .form-input {
        padding: 10px;
        font-size: 14px;
        border-radius: 6px;
    }

    .modal-buttons {
        margin-top: 16px;
        gap: 8px;
    }

    .btn {
        padding: 8px 12px;
        font-size: 13px;
        border-radius: 6px;
    }

    .streak-value-meta-container {
        margin-bottom: 6px;
    }

    #welcome-guide-modal .modal-title {
        font-size: 17px;
    }

    #welcome-guide-modal .modal-body-text {
        font-size: 13px;
        line-height: 1.5;
    }

    #welcome-guide-modal .modal-body-text ul ul {
        margin-left: 15px;
    }

    #welcome-guide-modal .guide-text li {
        margin-bottom: 6px;
    }

    #welcome-guide-modal .form-group-checkbox label {
        font-size: 12px;
    }

    #welcome-guide-modal .modal-buttons .btn {
        padding: 7px 10px;
        font-size: 12px;
    }

    #recurring-patterns-list {
        max-height: 150px;
    }

    .recurring-pattern-item {
        flex-direction: column;
        align-items: stretch;
    }

    .recurring-pattern-actions {
        justify-content: flex-end;
        margin-top: 10px;
    }

    #delete-recurring-task-modal .modal-buttons {
        flex-direction: column;
        gap: 10px;
        align-items: stretch;
    }

    #delete-recurring-task-modal .modal-buttons .btn {
        width: 100%;
    }

    .recurring-pattern-definition-v2-content {
        padding: 12px 15px;
        gap: 10px;
    }

    .recurring-modal-header {
        padding-bottom: 10px;
    }

    .recurring-modal-title-group .modal-title {
        font-size: 1.1rem;
    }

    .recurring-modal-title-group .modal-title .icon-title-recurring {
        font-size: 0.9em;
        margin-right: 6px;
    }

    .recurring-modal-title-group .modal-subtitle-description {
        font-size: 0.75rem;
    }

    #new-task-text-input-v2,
    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        height: 34px;
        font-size: 0.75rem;
    }

    .new-task-input-container-v2 .btn-confirm-add-task-v2 {
        padding: 0 8px;
        gap: 3px;
    }

    .new-task-input-container-v2 .btn-confirm-add-task-v2 i {
        font-size: 0.9em;
    }

    .recurring-modal-sub-controls-line {
        margin-top: 6px;
        padding-bottom: 6px;
        gap: 6px;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .recurring-modal-controls-top .selected-days-count {
        width: 100%;
        margin-bottom: 6px;
    }

    .recurring-modal-controls-top .day-selection-actions {
        width: auto;
    }

    .recurring-modal-controls-top .day-selection-actions .btn {
        font-size: 0.7rem;
        padding: 4px 8px;
    }

    .recurring-pattern-v2-days-grid {
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 5px;
    }

    .day-card-v2 {
        padding: 6px;
    }

    .day-card-header-v2 {
        margin-bottom: 5px;
    }

    .day-card-v2-short {
        font-size: 0.8rem;
    }

    .day-card-task-count-v2 {
        font-size: 0.65rem;
        padding: 1px 3px;
    }

    .task-item-recurrent-v2 {
        font-size: 0.7rem;
        gap: 3px;
        padding: 4px 4px 4px 0;
    }

    .task-routine-checkbox {
        width: 13px;
        height: 13px;
        margin-left: 5px;
        margin-right: 5px;
    }

    .task-routine-checkbox:checked::before {
        font-size: 8px;
    }

    .task-actions-recurrent-v2 {
        gap: 2px;
        margin-left: 2px;
    }

    .btn-icon-recurrent-task-v2 {
        width: 16px;
        height: 16px;
        font-size: 0.65rem;
    }

    .recurring-modal-footer .footer-info-text,
    .recurring-modal-footer .footer-total-tasks-count {
        font-size: 0.7rem;
        width: 100%;
        text-align: center;
    }

    .recurring-modal-footer .footer-total-tasks-count {
        margin-top: 4px;
    }
}

/* Estilos para a barra de rolagem */
::-webkit-scrollbar {
    width: 10px; /* Largura para scrollbars verticais */
    height: 10px; /* Altura para scrollbars horizontais */
}

::-webkit-scrollbar-track {
    background: var(--scrollbar-track-bg-dark); /* Cor de fundo do trilho para tema escuro */
    border-radius: 10px;
}
body.light ::-webkit-scrollbar-track {
    background: var(--scrollbar-track-bg-light); /* Cor de fundo do trilho para tema claro */
}

::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-thumb-bg-dark); /* Cor do polegar para tema escuro */
    border-radius: 10px;
    border: 2px solid transparent; /* Cria um "padding" visual */
    background-clip: content-box;
}
body.light ::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-thumb-bg-light); /* Cor do polegar para tema claro */
}

::-webkit-scrollbar-thumb:hover {
    filter: brightness(1.2); /* Um pouco mais claro ao passar o mouse */
}

/* Aplica a mesma estilização para elementos específicos com overflow */
#task-list::-webkit-scrollbar,
#recurring-patterns-list::-webkit-scrollbar, /* Para o modal antigo, se ainda usado */
.day-card-v2-tasks::-webkit-scrollbar,
.modal::-webkit-scrollbar, /* Para todos os modais genéricos */
.retrospective-screen::-webkit-scrollbar /* Para telas da retrospectiva */
{
    width: 8px;
    height: 8px;
}

#task-list::-webkit-scrollbar-track,
#recurring-patterns-list::-webkit-scrollbar-track,
.day-card-v2-tasks::-webkit-scrollbar-track,
.modal::-webkit-scrollbar-track,
.retrospective-screen::-webkit-scrollbar-track
{
    background: var(--scrollbar-track-bg-dark);
    border-radius: 10px;
}
body.light #task-list::-webkit-scrollbar-track,
body.light #recurring-patterns-list::-webkit-scrollbar-track,
body.light .day-card-v2-tasks::-webkit-scrollbar-track,
body.light .modal::-webkit-scrollbar-track,
body.light .retrospective-screen::-webkit-scrollbar-track
{
    background: var(--scrollbar-track-bg-light);
}


#task-list::-webkit-scrollbar-thumb,
#recurring-patterns-list::-webkit-scrollbar-thumb,
.day-card-v2-tasks::-webkit-scrollbar-thumb,
.modal::-webkit-scrollbar-thumb,
.retrospective-screen::-webkit-scrollbar-thumb
{
    background-color: var(--scrollbar-thumb-bg-dark);
    border-radius: 10px;
    border: 2px solid transparent;
    background-clip: content-box;
}

body.light #task-list::-webkit-scrollbar-thumb,
body.light #recurring-patterns-list::-webkit-scrollbar-thumb,
body.light .day-card-v2-tasks::-webkit-scrollbar-thumb,
body.light .modal::-webkit-scrollbar-thumb,
body.light .retrospective-screen::-webkit-scrollbar-thumb
{
    background-color: var(--scrollbar-thumb-bg-light);
}

#task-list::-webkit-scrollbar-thumb:hover,
#recurring-patterns-list::-webkit-scrollbar-thumb:hover,
.day-card-v2-tasks::-webkit-scrollbar-thumb:hover,
.modal::-webkit-scrollbar-thumb:hover,
.retrospective-screen::-webkit-scrollbar-thumb:hover
{
    filter: brightness(1.2);
}


footer {
    text-align: center;
    padding: 20px 0;
    font-size: 0.85rem;
    color: #777;
    border-top: 1px solid rgba(255, 255, 255, 0.05);
    margin-top: 20px;
}

body.light footer {
    color: #888;
    border-top-color: rgba(0, 0, 0, 0.05);
}

.footer-link {
    color: var(--primary-color-dark);
    text-decoration: none;
    transition: color 0.2s ease, text-decoration 0.2s ease;
}

.footer-link:hover {
    text-decoration: underline;
}

body.light .footer-link {
    color: var(--primary-color-light);
}

.retrospective-final-logo .logo-icon {
    width: clamp(20px, 3.2vw, 24px);
    height: clamp(20px, 3.2vw, 24px);
    background: var(--primary-color-dark);
    /* USA A COR PRIMÁRIA DO TEMA ATUAL */
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--logo-icon-color);
    font-size: clamp(10px, 1.8vw, 12px);
    font-weight: normal;
    line-height: 1;
}

body.light .retrospective-final-logo .logo-icon {
    background: var(--primary-color-light);
    /* USA A COR PRIMÁRIA DO TEMA ATUAL (light) */
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taskify</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/retrospective.css">

    <script>
        (function () {
            function hexToRgbArrayInline(hex) {
                // ... (função hexToRgbArrayInline permanece a mesma)
            }

            try {
                const savedPrimaryColor = localStorage.getItem('taskify-primary-color');
                const savedTheme = localStorage.getItem('taskify-theme');
                const docElement = document.documentElement;
                const defaultPrimaryColor = '#0A7CFF'; // Sua cor primária padrão

                let colorToApply = savedPrimaryColor || defaultPrimaryColor;

                if (!/^#[0-9A-F]{6}$/i.test(colorToApply) && !/^#[0-9A-F]{3}$/i.test(colorToApply)) {
                    colorToApply = defaultPrimaryColor;
                }

                docElement.style.setProperty('--primary-color-light', colorToApply);
                docElement.style.setProperty('--primary-color-dark', colorToApply);

                const rgbArray = hexToRgbArrayInline(colorToApply);
                if (rgbArray) {
                    const rgbString = rgbArray.join(', ');
                    docElement.style.setProperty('--primary-color-light-rgb', rgbString);
                    docElement.style.setProperty('--primary-color-dark-rgb', rgbString);
                } else {
                    const defaultRgbArray = hexToRgbArrayInline(defaultPrimaryColor);
                    if (defaultRgbArray) {
                        const defaultRgbString = defaultRgbArray.join(', ');
                        docElement.style.setProperty('--primary-color-light-rgb', defaultRgbString);
                        docElement.style.setProperty('--primary-color-dark-rgb', defaultRgbString);
                    }
                }

                // REMOVIDO: docElement.style.setProperty('--logo-icon-bg-color', logoIconColor);
                // A cor da logo será definida pelo CSS usando --primary-color-dark/light

                if (savedTheme === 'light') {
                    docElement.classList.add('light-theme-active');
                }

                // Favicon dinâmico com a COR PRIMÁRIA ATUAL
                const faviconBaseColor = colorToApply; // Usa a cor primária carregada
                const faviconSvg = `<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 24 24'><rect width='24' height='24' rx='4' fill='${faviconBaseColor}'/><path fill='white' d='M13.083 3.031a.5.5 0 0 0-.944-.313L5.986 13.41a.5.5 0 0 0 .38.738H11V21a.5.5 0 0 0 .893.33L17.83 10.33a.5.5 0 0 0-.743-.66l-3.087 2.7V3.57a.5.5 0 0 0-.5-.5zM12 4.553v5.377l2.49-2.18L12 4.553zm-1 5.92L8.046 13H11v-2.527z'/></svg>`;
                const faviconLink = document.getElementById('favicon') || document.createElement('link');
                faviconLink.id = 'favicon';
                faviconLink.rel = 'icon';
                faviconLink.href = `data:image/svg+xml,${encodeURIComponent(faviconSvg)}`;
                if (!document.getElementById('favicon')) {
                    document.head.appendChild(faviconLink);
                }

            } catch (e) {
                console.warn('Error applying initial theme/color/logo from inline script:', e);
            }
        })();
    </script>
    <!-- O link do favicon será atualizado pelo script acima -->
    <link id="favicon" rel="icon" href="" type="image/svg+xml">

</head>

<body>
    <canvas id="particle-canvas"></canvas>
    <div class="loader-container" id="loader">
        <span class="loader"></span>
    </div>

    <div class="container">
        <header class="header">
            <div class="logo" title="Taskify - Seu Gerenciador de Tarefas e Foco">
                <div class="logo-icon">
                    <i class="bi bi-lightning-charge-fill"></i>
                </div>
                <span class="logo-text logo-text-full">Taskify</span>
                <span class="logo-text logo-text-short">Taskify</span>
            </div>

            <div class="question-counter">
                <button class="counter-btn" id="decrement-btn" onclick="decrementToday()"
                    title="Diminuir 1 questão">−</button>
                <input type="number" class="counter-display" id="questions-step-input" value="1" min="1"
                    title="Define a quantidade de questões por clique">
                <button class="counter-btn" id="increment-btn" onclick="incrementToday()"
                    title="Aumentar 1 questão">+</button>
            </div>

            <div class="header-controls">
                <button class="btn-icon-nav" id="btn-edit-goals-header" aria-label="Editar metas"
                    onclick="openGoalsModal()">
                    <i class="bi bi-pencil-square"></i>
                </button>
                <button class="btn-icon-nav" id="btn-open-themes" aria-label="Personalizar Aparência"
                    onclick="openThemesModal()">
                    <i class="bi bi-palette-fill"></i>
                </button>
                <button class="theme-toggle-btn" id="theme-toggle" aria-label="Alternar tema" onclick="toggleTheme()">
                    <i id="theme-icon" class="bi bi-moon-fill"></i>
                </button>
            </div>
        </header>


        <section class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">Hoje</div>
                <div class="circular-progress">
                    <svg class="progress-ring" width="120" height="120" viewBox="0 0 120 120">
                        <circle class="progress-ring-circle progress-ring-bg" cx="60" cy="60" r="52" stroke-width="8" />
                        <circle class="progress-ring-circle progress-ring-fill" id="today-progress" cx="60" cy="60"
                            r="52" stroke-width="8"
                            style="stroke-dasharray: 326.7256359611859, 326.7256359611859; stroke-dashoffset: 326.7256359611859" />
                    </svg>
                    <div class="progress-number" id="today-count">0</div>
                </div>
                <div class="progress-target">Meta: <span id="today-target">20</span></div>
            </div>

            <div class="stat-card">
                <div class="stat-title">Semana</div>
                <div class="circular-progress">
                    <svg class="progress-ring" width="120" height="120" viewBox="0 0 120 120">
                        <circle class="progress-ring-circle progress-ring-bg" cx="60" cy="60" r="52" stroke-width="8" />
                        <circle class="progress-ring-circle progress-ring-fill" id="week-progress" cx="60" cy="60"
                            r="52" stroke-width="8"
                            style="stroke-dasharray: 326.7256359611859, 326.7256359611859; stroke-dashoffset: 326.7256359611859" />
                    </svg>
                    <div class="progress-number" id="week-count">0</div>
                </div>
                <div class="progress-target">Meta: <span id="week-target">50</span></div>
            </div>

            <div class="stat-card">
                <div class="stat-title">Mês</div>
                <div class="circular-progress">
                    <svg class="progress-ring" width="120" height="120" viewBox="0 0 120 120">
                        <circle class="progress-ring-circle progress-ring-bg" cx="60" cy="60" r="52" stroke-width="8" />
                        <circle class="progress-ring-circle progress-ring-fill" id="month-progress" cx="60" cy="60"
                            r="52" stroke-width="8"
                            style="stroke-dasharray: 326.7256359611859, 326.7256359611859; stroke-dashoffset: 326.7256359611859" />
                    </svg>
                    <div class="progress-number" id="month-count">0</div>
                </div>
                <div class="progress-target">Meta: <span id="month-target">1200</span></div>
            </div>

            <div class="stat-card">
                <div class="stat-title">Ano</div>
                <div class="circular-progress">
                    <svg class="progress-ring" width="120" height="120" viewBox="0 0 120 120">
                        <circle class="progress-ring-circle progress-ring-bg" cx="60" cy="60" r="52" stroke-width="8" />
                        <circle class="progress-ring-circle progress-ring-fill" id="year-progress" cx="60" cy="60"
                            r="52" stroke-width="8"
                            style="stroke-dasharray: 326.7256359611859, 326.7256359611859; stroke-dashoffset: 326.7256359611859" />
                    </svg>
                    <div class="progress-number" id="year-count">0</div>
                </div>
                <div class="progress-target">Meta: <span id="year-target">20000</span></div>
            </div>
        </section>

        <section class="bottom-cards">
            <div class="info-card">
                <div class="card-title">
                    <span>Recorde Diário</span>
                    <i class="bi bi-trophy card-title-icon"></i>
                </div>
                <div class="card-value" id="daily-record-value">0 questões</div>
                <div class="card-subtitle" id="daily-record-date">-</div>
            </div>

            <div class="info-card">
                <div class="card-title">
                    <span>Streak Atual</span>
                    <i class="bi bi-fire card-title-icon"></i>
                </div>

                <div class="streak-value-meta-container">
                    <div class="card-value" id="current-streak-value">0 dias</div>
                    <div class="card-streak-target">Meta: <span id="streak-target-value">30</span></div>
                </div>

                <div class="progress-bar-horizontal">
                    <div class="progress-fill" id="streak-progress-fill" style="width: 0%;"></div>
                </div>
            </div>

            <div class="info-card">
                <div class="card-title">
                    <span>Pico de Atividade Semanal</span>
                    <i class="bi bi-graph-up-arrow card-title-icon"></i>
                </div>
                <div class="card-value" id="peak-activity-day">-</div>
                <div class="card-subtitle" id="peak-activity-questions">0 questões</div>
            </div>
        </section>

        <section class="activity-section">
            <div class="activity-header">
                <div class="activity-title">Atividade Semanal (Questões)</div>
                <div class="activity-controls">
                    <span style="font-size:0.9em; color: #888;" id="weekly-activity-period">Últimos 7 dias</span>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="weeklyActivityChart"></canvas>
            </div>
        </section>

        <div class="scroll-indicator" id="scroll-indicator">
            <i class="bi bi-chevron-down"></i>
        </div>

        <section class="productivity-focus-area">
            <div class="pomodoro-section-wrapper">
                <div class="pomodoro-section">
                    <div class="pomodoro-header">
                        <h3 class="pomodoro-title">Timer Pomodoro</h3>
                        <button class="pomodoro-settings-btn" id="btn-pomodoro-settings"
                            aria-label="Configurar Pomodoro" onclick="openPomodoroSettingsModal()">
                            <i class="bi bi-gear-fill"></i>
                        </button>
                    </div>
                    <div class="pomodoro-timer-display" id="pomodoro-timer-display">25:00</div>
                    <div class="pomodoro-status" id="pomodoro-status">Pronto para focar?</div>
                    <div class="pomodoro-controls">
                        <button class="btn-start" id="pomodoro-start-btn" onclick="startPomodoro()">Iniciar</button>
                        <button class="btn-pause" id="pomodoro-pause-btn" onclick="pausePomodoro()"
                            style="display: none;">Pausar</button>
                        <button class="btn-reset" id="pomodoro-reset-btn" onclick="resetPomodoro()">Resetar</button>
                    </div>
                    <div class="pomodoro-cycles" id="pomodoro-cycles-display-container">
                        <i class="bi bi-arrow-repeat"></i>
                        <span class="pomodoro-cycles-text-label">Ciclos: </span>
                        <span id="pomodoro-cycles-count-value">0</span>
                    </div>
                </div>
                <div class="chart-section pomodoro-chart-section">
                    <div class="chart-header">
                        <h4 class="chart-title">Tempo de Foco Semanal</h4>
                        <span class="chart-period-label" id="pomodoro-weekly-period">Últimos 7 dias</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="weeklyPomodoroFocusChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="tasks-section-wrapper">
                <div class="tasks-section">
                    <div class="tasks-header">
                        <h3 class="tasks-title">Tarefas</h3>
                        <div class="tasks-header-actions">
                            <span class="tasks-counter" id="tasks-counter">0/0</span>
                        </div>
                    </div>
                    <form id="task-form">
                        <input type="text" id="task-input" placeholder="Adicione nova tarefa...">
                        <input type="text" id="task-assigned-date" class="task-date-input" placeholder="DD/MM/AAAA">

                        <button type="submit" id="add-task-btn" class="btn-primary">Adicionar</button>
                        <button type="button" id="btn-open-recurring-task-modal" class="btn btn-secondary btn-recurring"
                            onclick="openRecurringTaskPatternModal_v2()" title="Configurar Rotina Semanal">
                            <i class="bi bi-calendar-plus"></i> Configurar Rotina
                        </button>

                    </form>
                    <ul id="task-list">
                        <!-- Tarefas serão adicionadas aqui pelo JS -->
                    </ul>
                </div>
                <div class="chart-section tasks-chart-section">
                    <div class="chart-header">
                        <h4 class="chart-title">Tarefas Concluídas</h4>
                        <span class="chart-period-label" id="tasks-weekly-period">Últimos 7 dias</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="weeklyTasksCompletedChart"></canvas>
                    </div>
                </div>
            </div>
        </section>


        <footer class="main-footer">
            Criado por <a href="https://x.com/fabinxz" target="_blank" class="footer-link">@fabinxz</a>
            <span class="footer-separator">•</span> © <span id="current-year">2025</span>
        </footer>
    </div> <!-- Fim .container -->

    <!-- Modal de Edição de Metas -->
    <div class="modal-overlay" id="goals-modal-overlay"></div>
    <div class="modal" id="goals-modal">
        <div class="modal-content">
            <button class="modal-close-btn" aria-label="Fechar" onclick="closeGoalsModal()">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">Editar Metas</h2>
            <form id="goals-form">
                <div class="form-group">
                    <label class="form-label" for="daily-goal-input">Meta Diária</label>
                    <input type="number" class="form-input" id="daily-goal-input" value="20" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="weekly-goal-input">Meta Semanal</label>
                    <input type="number" class="form-input" id="weekly-goal-input" value="50" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="monthly-goal-input">Meta Mensal</label>
                    <input type="number" class="form-input" id="monthly-goal-input" value="1200" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="yearly-goal-input">Meta Anual</label>
                    <input type="number" class="form-input" id="yearly-goal-input" value="20000" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="streak-goal-input">Meta de Streak (dias)</label>
                    <input type="number" class="form-input" id="streak-goal-input" value="30" min="1">
                </div>
                <div class="modal-buttons">
                    <button type="button" class="btn btn-reset-app" id="btn-reset-app-data">Resetar App</button>
                    <button type="button" class="btn btn-secondary" onclick="closeGoalsModal()">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal de Padrões de Tarefas Recorrentes (v2) -->
    <div class="modal-overlay" id="recurring-task-modal-overlay"></div>
    <div class="modal" id="recurring-task-modal" data-modal-type="recurring-task-definition-v2">
        <div class="modal-content recurring-pattern-definition-v2-content">
            <div class="recurring-modal-header">
                <div class="recurring-modal-title-group">
                    <h2 class="modal-title" id="recurring-task-def-v2-modal-title">
                        <i class="bi bi-calendar-check icon-title-recurring"></i> Configurar Rotina Semanal
                    </h2>
                    <p class="modal-subtitle-description" id="recurring-task-def-v2-modal-description">Defina as tarefas
                        para cada dia da sua semana e organize seus estudos de forma eficiente</p>
                </div>
                <button class="modal-close-btn" aria-label="Fechar" onclick="closeRecurringTaskPatternModal()">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="recurring-modal-controls-top">
                <div class="new-task-input-container-v2" id="new-task-input-container-v2">
                    <input type="text" class="form-input" id="new-task-text-input-v2"
                        placeholder="Digite o nome da tarefa...">
                    <button type="button" class="btn btn-primary btn-confirm-add-task-v2">
                        <i class="bi bi-plus-lg"></i> Adicionar
                    </button>
                </div>
                <div class="recurring-modal-sub-controls-line">
                    <span class="selected-days-count" id="recurring-v2-selected-days-count">Nenhum dia
                        selecionado</span>
                    <div class="day-selection-actions">
                        <button type="button" class="btn btn-secondary btn-select-all-days">Selecionar Todos</button>
                        <button type="button" class="btn btn-secondary btn-clear-day-selection">Limpar</button>
                    </div>
                </div>
            </div>

            <div class="recurring-pattern-v2-days-grid">
                <div class="day-card-v2" data-day-index="1">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Segunda</h3>
                        <span class="day-card-task-count-v2" id="task-count-monday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-monday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="2">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Terça</h3>
                        <span class="day-card-task-count-v2" id="task-count-tuesday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-tuesday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="3">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Quarta</h3>
                        <span class="day-card-task-count-v2" id="task-count-wednesday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-wednesday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="4">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Quinta</h3>
                        <span class="day-card-task-count-v2" id="task-count-thursday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-thursday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="5">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Sexta</h3>
                        <span class="day-card-task-count-v2" id="task-count-friday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-friday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="6">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Sábado</h3>
                        <span class="day-card-task-count-v2" id="task-count-saturday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-saturday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
                <div class="day-card-v2" data-day-index="0">
                    <div class="day-card-header-v2">
                        <h3 class="day-card-v2-short">Domingo</h3>
                        <span class="day-card-task-count-v2" id="task-count-sunday">0</span>
                    </div>
                    <div class="day-card-v2-tasks" id="pattern-v2-tasks-sunday">
                        <span class="no-tasks-msg">Nenhuma tarefa</span>
                    </div>
                    <div class="day-card-v2-selected-indicator"></div>
                </div>
            </div>

            <div class="recurring-modal-footer">
                <p class="footer-info-text" id="recurring-modal-footer-tip">Dica: Clique nos dias para selecioná-los e adicionar tarefas. Você também pode arrastar tarefas entre os dias para reorganizar!</p>
                <span class="footer-total-tasks-count" id="recurring-modal-total-tasks">Total de tarefas: 0</span>
            </div>
        </div>
    </div>


    <!-- Modal de Confirmação de Exclusão de Tarefa Recorrente -->
    <div class="modal-overlay" id="delete-recurring-task-modal-overlay"></div>
    <div class="modal" id="delete-recurring-task-modal" data-modal-type="delete-recurring-task">
        <div class="modal-content">
            <button class="modal-close-btn" aria-label="Fechar" onclick="closeDeleteRecurringTaskModal()">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">Excluir Tarefa Recorrente</h2>
            <p class="modal-body-text" id="delete-recurring-task-prompt">Escolha como deseja proceder com a exclusão
                desta tarefa recorrente:</p>

            <div class="delete-options-group">
                <label class="delete-option-card">
                    <input type="radio" name="delete-recurring-option" value="this" checked>
                    <span class="delete-option-card-content">
                        <span class="delete-option-icon"><i class="bi bi-calendar-x"></i></span>
                        <span class="delete-option-text">
                            <strong>Apenas esta ocorrência</strong>
                            <small>Remove somente esta instância da tarefa.</small>
                        </span>
                    </span>
                </label>
                <label class="delete-option-card">
                    <input type="radio" name="delete-recurring-option" value="future">
                    <span class="delete-option-card-content">
                        <span class="delete-option-icon"><i class="bi bi-calendar2-x"></i></span>
                        <span class="delete-option-text">
                            <strong>Esta e todas as futuras</strong>
                            <small>Remove esta ocorrência e todas as próximas.</small>
                        </span>
                    </span>
                </label>
                <label class="delete-option-card" id="delete-option-all-card">
                    <input type="radio" name="delete-recurring-option" value="all">
                    <span class="delete-option-card-content">
                        <span class="delete-option-icon"><i class="bi bi-trash3"></i></span>
                        <span class="delete-option-text">
                            <strong>Toda a série recorrente</strong>
                            <small>Remove permanentemente toda a tarefa recorrente.</small>
                        </span>
                    </span>
                </label>
            </div>

            <div class="delete-recurring-warning" id="delete-recurring-warning-message">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>Apenas esta ocorrência será removida. A tarefa recorrente continuará normalmente.</span>
            </div>

            <div class="modal-buttons">
                <button type="button" class="btn btn-secondary" id="btn-cancel-delete-recurring">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btn-confirm-delete-recurring-action">Excluir
                    Ocorrência</button>
            </div>
        </div>
    </div>



    <!-- Modal de Confirmação de Reset -->
    <div class="modal-overlay" id="confirm-reset-modal-overlay"></div>
    <div class="modal" id="confirm-reset-modal">
        <div class="modal-content">
            <button class="modal-close-btn" id="confirm-reset-modal-close-btn" aria-label="Fechar">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">Confirmar Reset de Dados</h2>
            <div class="modal-body-text">
                <p>Você tem certeza que deseja resetar todos os dados do Taskify?</p>
                <p><strong>Esta ação não pode ser desfeita e removerá:</strong></p>
                <ul>
                    <li>Todo o seu progresso (diário, semanal, mensal, anual)</li>
                    <li>Seu recorde diário</li>
                    <li>Seu streak atual e histórico de streak</li>
                    <li>Suas metas personalizadas (serão revertidas para o padrão)</li>
                    <li>Sua preferência de tema e cor primária (serão revertidas para o padrão)</li>
                    <li>Suas configurações, histórico do Pomodoro, lista de tarefas e padrões recorrentes</li>
                </ul>
                <p>A página será recarregada com as configurações de fábrica.</p>
            </div>
            <div class="modal-buttons">
                <button type="button" class="btn btn-secondary" id="btn-cancel-reset-confirmation">Cancelar</button>
                <button type="button" class="btn btn-reset-app" id="btn-confirm-reset-action">Confirmar Reset</button>
            </div>
        </div>
    </div>

    <!-- Modal de Guia de Boas-vindas -->
    <div class="modal-overlay" id="welcome-guide-modal-overlay"></div>
    <div class="modal" id="welcome-guide-modal">
        <div class="modal-content">
            <button class="modal-close-btn" id="welcome-guide-modal-close-btn" aria-label="Fechar">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">Bem-vindo ao Taskify!</h2>
            <div class="modal-body-text guide-text">
                <p>Este é um guia rápido para te ajudar a começar:</p>
                <ul>
                    <li><strong>Contador Principal (<span class="guide-highlight">no centro do
                                cabeçalho</span>):</strong> Use os botões <span
                            class="guide-highlight guide-btn-example">+</span> e <span
                            class="guide-highlight guide-btn-example">−</span> para adicionar ou remover questões
                        resolvidas hoje. O número entre eles define quantas questões são adicionadas/removidas por
                        clique.</li>
                    <li><strong>Configurar Rotina Semanal:</strong> No formulário de tarefas, clique no botão <span
                            class="guide-highlight guide-btn-example"><i class="bi bi-calendar-plus"></i> Configurar
                            Rotina</span> para definir suas tarefas para cada dia da semana.</li>
                    <li><strong>Editar Metas:</strong> Clique no ícone <i
                            class="bi bi-pencil-square guide-icon-example"></i> no cabeçalho para definir suas metas
                        diárias, semanais, mensais, anuais e de streak.</li>
                    <li><strong>Alternar Tema:</strong> Use o ícone <i class="bi bi-moon-fill guide-icon-example"></i> /
                        <i class="bi bi-sun-fill guide-icon-example"></i> no cabeçalho para trocar entre o tema escuro e
                        claro.</li>
                    <li><strong>Personalizar Aparência:</strong> Clique no ícone <i
                            class="bi bi-palette-fill guide-icon-example"></i> no cabeçalho para escolher paletas de
                        cores e modos visuais.</li>
                    <li><strong>Timer Pomodoro & Tarefas:</strong> Role a página para baixo para encontrar o Timer
                        Pomodoro, a Lista de Tarefas e seus respectivos gráficos de atividade semanal.</li>
                    <li><strong>Retrospectiva Mensal:</strong> Clique no ícone <i
                            class="bi bi-calendar-heart-fill guide-icon-example"></i> no canto inferior direito para ver
                        sua retrospectiva do mês.</li>
                    <li><strong>Resetar Dados:</strong> No modal de "Editar Metas" (<i
                            class="bi bi-pencil-square guide-icon-example"></i>), você encontrará um botão <span
                            class="guide-highlight guide-btn-example"
                            style="background-color: #dc3545; color: white; padding: 2px 4px;">Resetar App</span> para
                        limpar todos os seus dados e começar do zero. Use com cuidado!</li>
                </ul>
                <div class="form-group-checkbox">
                    <input type="checkbox" id="dont-show-guide-again-checkbox">
                    <label for="dont-show-guide-again-checkbox">Não mostrar esta mensagem novamente</label>
                </div>
            </div>
            <div class="modal-buttons" style="justify-content: flex-end;">
                <button type="button" class="btn btn-primary" id="btn-close-welcome-guide">Entendi!</button>
            </div>
        </div>
    </div>


    <!-- Modal de Configurações do Pomodoro -->
    <div class="modal-overlay" id="pomodoro-settings-modal-overlay"></div>
    <div class="modal" id="pomodoro-settings-modal">
        <div class="modal-content">
            <button class="modal-close-btn" id="pomodoro-settings-modal-close-btn" aria-label="Fechar"
                onclick="closePomodoroSettingsModal()">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">Configurações do Pomodoro</h2>
            <form id="pomodoro-settings-form">
                <div class="form-group">
                    <label class="form-label" for="pomodoro-focus-duration-input">Duração do Foco (minutos)</label>
                    <input type="number" class="form-input" id="pomodoro-focus-duration-input" value="25" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="pomodoro-short-break-duration-input">Duração da Pausa Curta
                        (minutos)</label>
                    <input type="number" class="form-input" id="pomodoro-short-break-duration-input" value="5" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="pomodoro-long-break-duration-input">Duração da Pausa Longa
                        (minutos)</label>
                    <input type="number" class="form-input" id="pomodoro-long-break-duration-input" value="15" min="1">
                </div>
                <div class="form-group">
                    <label class="form-label" for="pomodoro-cycles-before-long-break-input">Ciclos de Foco antes da
                        Pausa Longa</label>
                    <input type="number" class="form-input" id="pomodoro-cycles-before-long-break-input" value="4"
                        min="1">
                </div>
                <div class="form-group-checkbox">
                    <input type="checkbox" id="pomodoro-auto-start-breaks-checkbox">
                    <label for="pomodoro-auto-start-breaks-checkbox">Iniciar pausas automaticamente?</label>
                </div>
                <div class="form-group-checkbox">
                    <input type="checkbox" id="pomodoro-auto-start-focus-checkbox">
                    <label for="pomodoro-auto-start-focus-checkbox">Iniciar foco automaticamente após pausas?</label>
                </div>
                <div class="form-group-checkbox">
                    <input type="checkbox" id="pomodoro-enable-sound-checkbox">
                    <label for="pomodoro-enable-sound-checkbox">Ativar sons de notificação?</label>
                </div>
                <div class="modal-buttons">
                    <button type="button" class="btn btn-secondary"
                        onclick="closePomodoroSettingsModal()">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal de Temas e Aparência -->
    <div class="modal-overlay" id="themes-modal-overlay"></div>
    <div class="modal" id="themes-modal">
        <div class="themes-modal-content">
            <button class="modal-close-btn" id="themes-modal-close-btn" aria-label="Fechar"
                onclick="closeThemesModal()">
                <i class="bi bi-x-lg"></i>
            </button>
            <h2 class="modal-title">
                <i class="bi bi-palette-fill themes-modal-title-icon"></i>
                Personalizar Aparência
            </h2>

            <div class="themes-modal-section">
                <h3 class="themes-modal-section-title">
                    <i class="bi bi-paint-bucket"></i>
                    Paleta de Cores
                </h3>
                <p class="themes-modal-section-subtitle">Escolha sua vibe de cor perfeita.</p>
                <div class="palette-buttons" id="palette-buttons-container">
                    <!-- Botões de paleta serão gerados pelo JS -->
                </div>
            </div>

            <div class="themes-modal-section">
                <h3 class="themes-modal-section-title">
                    <i class="bi bi-eye-fill"></i>
                    Modo Visual
                </h3>
                <p class="themes-modal-section-subtitle">Selecione sua preferência de visualização.</p>
                <div class="mode-buttons" id="mode-buttons-container">
                    <!-- Botões de modo visual serão gerados pelo JS -->
                </div>
            </div>

            <div class="modal-buttons themes-modal-actions">
                <button type="button" class="btn btn-secondary themes-btn-cancel"
                    onclick="closeThemesModal()">Cancelar</button>
                <button type="button" class="btn btn-primary themes-btn-apply" onclick="closeThemesModal()">
                    Aplicar Mudanças
                </button>
            </div>
        </div>
    </div>

    <!-- Alerta Personalizado -->
    <div class="custom-alert-overlay" id="custom-alert-overlay"></div>
    <div class="custom-alert-modal" id="custom-alert-modal">
        <h3 class="custom-alert-title" id="custom-alert-title">Alerta</h3>
        <p class="custom-alert-message" id="custom-alert-message"></p>
        <button class="custom-alert-ok-btn" id="custom-alert-ok-btn">OK</button>
    </div>

    <!-- Botão Flutuante e Modal da Retrospectiva -->
    <button class="btn-icon-nav" id="btn-open-retrospective" aria-label="Abrir Retrospectiva" style="position: fixed; bottom: 20px; right: 20px; z-index: 1001;
               background-color: var(--primary-color-dark); color: white;
               width: 50px; height: 50px; border-radius: 50%;
               box-shadow: 0 4px 12px rgba(0,0,0,0.2); font-size: 1.5rem;
               display: flex; align-items: center; justify-content: center;">
        <i class="bi bi-calendar-heart-fill"></i>
    </button>

    <div class="retrospective-modal-overlay" id="retrospective-modal-overlay"></div>
    <div class="retrospective-modal" id="retrospective-modal">
        <!-- O conteúdo da retrospectiva será carregado aqui pelo JS (de retrospective.html) -->
    </div>

    <!-- Elementos de Áudio para Notificações do Pomodoro -->
    <audio id="focus-end-sound" src="sounds/focus_end.mp3" preload="auto"></audio>
    <audio id="break-end-sound" src="sounds/break_end.mp3" preload="auto"></audio>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/pt.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="js/script.js" defer></script>
    <script src="js/retrospective.js" defer></script>
</body>

</html>
</file>

<file path="js/retrospective.js">
// Elementos DOM Globais da Retrospectiva
let retrospectiveModal;
let retrospectiveOverlay;
let selectionScreen, introScreen, mainStatsScreen, productiveDayScreen,
    timePatternsScreen, comparisonScreen, finalScreenContainer, finalScreenImageableContent;
let allScreens = [];

// Botões e Elementos Internos da Retrospectiva
let metricButtons, startRetrospectiveButton, monthSelectionText,
    introNextButton, mainStatsNextButton, productiveDayNextButton,
    timePatternsNextButton, comparisonNextButton,
    shareButton, downloadButton, finalCloseXButton,
    musicToggleButton;

// Elemento de Áudio
let retrospectiveMusicAudio;

// Elementos de Dados nas Telas
let introUserNameEl, introMonth, questionsResolvedEl, tasksCompletedEl, focusTimeEl,
    phraseQuestionsEl, phraseTasksEl, phraseFocusEl,
    mostProductiveDateEl, mostProductiveValueEl,
    peakFocusHourEl, longestStreakEl, weekdayChartContainer,
    comparisonQuestionsResolvedEl, comparisonTasksCompletedEl, comparisonFocusTimeEl,
    questionsPercentageEl, tasksPercentageEl, focusPercentageEl,
    comparisonHighlightEl;

// Elementos da Tela Final
let finalMonthYearEl, finalMainTitleEl,
    finalQuestionsValueEl, finalTasksValueEl, finalFocusValueEl,
    finalPeakFocusHourEl, finalLongestStreakEl, finalMostProductiveDayShortEl,
    achievementsListEl, finalFooterEl,
    finalQuestionsHighlightItem, finalTasksHighlightItem, finalFocusHighlightItem,
    finalPeakFocusStatItem, finalLongestStreakStatItem, finalProductiveDayStatItem,
    finalAchievementsContainer;

// Estado da Retrospectiva
let currentScreenIndex = 0;
let selectedMetrics = [];
let retrospectiveDataStore = { currentMonth: {}, previousMonth: {} };
let retrospectiveDataProcessed = false;
let isMusicPlaying = false;
let userInteractedWithMusic = false;
let shouldResumeMusicOnFocus = false; // Nova variável de estado

// Constantes e Frases
const motivationalPhrases = {
    questions: [
        "Sua mente é uma máquina de problemas! 🧠",
        "Cada questão é um degrau para a maestria! ⚡",
        "Você transforma curiosidade em conhecimento! 🌟",
        "Desvendando mistérios, uma questão por vez! 💡",
        "O cérebro agradece por tantos desafios! 💪",
    ],
    tasks: [
        "Você é um(a) mestre(a) da organização! 🎯",
        "Cada tarefa concluída é uma vitória! 🏆",
        "Sua produtividade está nas alturas! ✨",
        "Checklist zerado, mente tranquila! ✅",
        "Imparável na execução de tarefas! 🚀",
    ],
    focus: [
        "Seu foco é sua superpotência! 🔥",
        "Minutos de foco, horas de progresso! ⏰",
        "Dominando a arte da concentração! 🧘",
        "No flow, o tempo voa e a mágica acontece! 🌌",
        "Focado(a) como um laser, produtivo(a) como nunca! 💥",
    ],
    generalPositive: [
        "Que mês incrível, continue assim! 🎉",
        "Seu progresso é inspirador! 🌠",
        "Você está no caminho certo para o sucesso! 🗺️",
        "Pequenos passos, grandes conquistas! 👣",
        "A dedicação está gerando resultados fantásticos! 🤩",
    ]
};

// --- Funções de Detecção de Mobile (simples) ---
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// FUNÇÕES UTILITÁRIAS E DE LÓGICA INTERNA DA RETROSPECTIVA
function getMonthYearString(date = new Date()) {
    if (!(date instanceof Date) || isNaN(date.valueOf())) {
        console.warn("TASKIFY_RETRO: Data inválida fornecida para getMonthYearString. Usando data atual.");
        date = new Date();
    }
    const month = date.toLocaleString('pt-BR', { month: 'long' });
    return `${month.charAt(0).toUpperCase() + month.slice(1)} ${date.getFullYear()}`;
}

function getRandomPhrase(type) {
    const phrases = motivationalPhrases[type] || motivationalPhrases.generalPositive;
    return phrases[Math.floor(Math.random() * phrases.length)];
}

function hexToRgbArray(hex) {
    if (!hex || typeof hex !== 'string') return null;
    let c = hex.startsWith('#') ? hex.substring(1) : hex;
    if (c.length === 3) c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];
    if (c.length !== 6) return null;
    try {
        const bigint = parseInt(c, 16);
        if (isNaN(bigint)) return null;
        return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
    } catch (e) { console.error("Erro ao converter hex para RGB:", hex, e); return null; }
}

function formatFocusMinutes(minutes) {
    const m = parseFloat(minutes) || 0;
    return Math.round(m);
}

function animateValue(element, start, end, duration, formatter = val => Math.round(val)) {
    if (!element) return;
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const currentValue = progress * (end - start) + start;
        element.textContent = formatter(currentValue);
        if (progress < 1) {
            window.requestAnimationFrame(step);
        }
    };
    window.requestAnimationFrame(step);
}

function toggleMetric(event) {
    const button = event.currentTarget;
    const metric = button.dataset.metric;

    if (selectedMetrics.includes(metric)) {
        selectedMetrics = selectedMetrics.filter(m => m !== metric);
    } else {
        selectedMetrics.push(metric);
    }
    updateMetricButtonsState();
    if (startRetrospectiveButton) startRetrospectiveButton.disabled = selectedMetrics.length === 0;
}

// --- Funções de Controle de Música ---
function playRetrospectiveMusic() {
    if (retrospectiveMusicAudio && retrospectiveMusicAudio.paused && userInteractedWithMusic && document.visibilityState === 'visible') {
        retrospectiveMusicAudio.play().then(() => {
            isMusicPlaying = true;
            updateMusicButtonIcon();
        }).catch(error => {
            console.warn("TASKIFY_RETRO_MUSIC: Erro ao tentar tocar a música:", error);
            isMusicPlaying = false; // Garante que o estado reflita a falha
            updateMusicButtonIcon();
        });
    }
}

function pauseRetrospectiveMusic(dueToVisibilityChange = false) {
    if (retrospectiveMusicAudio && !retrospectiveMusicAudio.paused) {
        retrospectiveMusicAudio.pause();
        if (!dueToVisibilityChange) {
            userInteractedWithMusic = true; // Só marca interação manual se não for por mudança de visibilidade
        }
        isMusicPlaying = false;
        updateMusicButtonIcon();
    }
}

function toggleRetrospectiveMusic() {
    userInteractedWithMusic = true; // Qualquer clique no botão é uma interação
    if (isMusicPlaying) {
        pauseRetrospectiveMusic();
    } else {
        playRetrospectiveMusic();
    }
}

function updateMusicButtonIcon() {
    if (!musicToggleButton) return;
    const icon = musicToggleButton.querySelector('i');
    if (icon) {
        icon.className = isMusicPlaying ? 'bi bi-volume-up-fill' : 'bi bi-volume-mute-fill';
        musicToggleButton.setAttribute('aria-label', isMusicPlaying ? 'Música tocando (clique para pausar)' : 'Música pausada (clique para tocar)');
    }
}


function initializeRetrospectiveInternals() {
    retrospectiveModal = document.getElementById('retrospective-modal');
    retrospectiveOverlay = document.getElementById('retrospective-modal-overlay');
    retrospectiveMusicAudio = document.getElementById('retrospective-background-music');
    musicToggleButton = document.getElementById('retrospective-music-toggle');

    if (!retrospectiveModal) return;
    if (musicToggleButton) musicToggleButton.addEventListener('click', toggleRetrospectiveMusic);

    selectionScreen = document.getElementById('retrospective-selection-screen');
    introScreen = document.getElementById('retrospective-intro-screen');
    mainStatsScreen = document.getElementById('retrospective-main-stats-screen');
    productiveDayScreen = document.getElementById('retrospective-productive-day-screen');
    timePatternsScreen = document.getElementById('retrospective-time-patterns-screen');
    comparisonScreen = document.getElementById('retrospective-comparison-screen');
    finalScreenContainer = document.getElementById('retrospective-final-screen');
    finalScreenImageableContent = finalScreenContainer ? finalScreenContainer.querySelector('.retrospective-final-content-wrapper') : null;

    allScreens = [selectionScreen, introScreen, mainStatsScreen, productiveDayScreen, timePatternsScreen, comparisonScreen, finalScreenContainer].filter(Boolean);

    metricButtons = document.querySelectorAll('.retrospective-metric-button');
    startRetrospectiveButton = document.getElementById('retrospective-start-button');
    monthSelectionText = document.getElementById('retrospective-month-selection');
    introNextButton = document.getElementById('retrospective-intro-next-button');
    mainStatsNextButton = document.getElementById('retrospective-main-stats-next-button');
    productiveDayNextButton = document.getElementById('retrospective-productive-day-next-button');
    timePatternsNextButton = document.getElementById('retrospective-time-patterns-next-button');
    comparisonNextButton = document.getElementById('retrospective-comparison-next-button');
    shareButton = document.getElementById('retrospective-share-button');
    downloadButton = document.getElementById('retrospective-download-button');
    finalCloseXButton = finalScreenContainer ? finalScreenContainer.querySelector('.retrospective-final-close-x-btn') : null;

    introUserNameEl = document.getElementById('retrospective-intro-user-name');
    introMonth = document.getElementById('retrospective-intro-month');
    questionsResolvedEl = document.getElementById('retrospective-questions-resolved');
    tasksCompletedEl = document.getElementById('retrospective-tasks-completed');
    focusTimeEl = document.getElementById('retrospective-focus-time');
    phraseQuestionsEl = document.getElementById('retrospective-phrase-questions');
    phraseTasksEl = document.getElementById('retrospective-phrase-tasks');
    phraseFocusEl = document.getElementById('retrospective-phrase-focus');
    mostProductiveDateEl = document.getElementById('retrospective-most-productive-date');
    mostProductiveValueEl = document.getElementById('retrospective-most-productive-value');
    peakFocusHourEl = document.getElementById('retrospective-peak-focus-hour');
    longestStreakEl = document.getElementById('retrospective-longest-streak');
    weekdayChartContainer = document.getElementById('retrospective-weekday-distribution-chart');
    comparisonQuestionsResolvedEl = document.getElementById('retrospective-comparison-questions-resolved');
    comparisonTasksCompletedEl = document.getElementById('retrospective-comparison-tasks-completed');
    comparisonFocusTimeEl = document.getElementById('retrospective-comparison-focus-time');
    questionsPercentageEl = document.getElementById('retrospective-questions-percentage');
    tasksPercentageEl = document.getElementById('retrospective-tasks-percentage');
    focusPercentageEl = document.getElementById('retrospective-focus-percentage');
    comparisonHighlightEl = document.getElementById('retrospective-comparison-highlight');

    finalMonthYearEl = document.getElementById('retrospective-final-month-year');
    finalMainTitleEl = finalScreenContainer ? finalScreenContainer.querySelector('.retrospective-final-main-title') : null;
    finalFooterEl = finalScreenContainer ? finalScreenContainer.querySelector('.retrospective-final-footer') : null;
    finalQuestionsValueEl = document.getElementById('final-questions-value');
    finalTasksValueEl = document.getElementById('final-tasks-value');
    finalFocusValueEl = document.getElementById('final-focus-value');
    finalPeakFocusHourEl = document.getElementById('final-peak-focus-hour');
    finalLongestStreakEl = document.getElementById('final-longest-streak');
    finalMostProductiveDayShortEl = document.getElementById('final-most-productive-day-short');
    achievementsListEl = document.getElementById('retrospective-achievements-list');
    finalQuestionsHighlightItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="questions"]') : null;
    finalTasksHighlightItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="tasks"]') : null;
    finalFocusHighlightItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="focus"]') : null;
    finalPeakFocusStatItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="peakFocus"]') : null;
    finalLongestStreakStatItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="longestStreak"]') : null;
    finalProductiveDayStatItem = finalScreenContainer ? finalScreenContainer.querySelector('[data-final-metric="productiveDay"]') : null;
    finalAchievementsContainer = finalScreenContainer ? finalScreenContainer.querySelector('.retrospective-final-achievements-container') : null;

    metricButtons.forEach(button => button.addEventListener('click', toggleMetric));
    if (startRetrospectiveButton) startRetrospectiveButton.addEventListener('click', startRetrospectiveFlow);
    if (introNextButton) introNextButton.addEventListener('click', () => { populateMainStatsScreen(); showScreen(getScreenIndexById('retrospective-main-stats-screen')); });
    if (mainStatsNextButton) mainStatsNextButton.addEventListener('click', () => { populateProductiveDayScreen(); showScreen(getScreenIndexById('retrospective-productive-day-screen')); });
    if (productiveDayNextButton) productiveDayNextButton.addEventListener('click', () => { populateTimePatternsScreen(); showScreen(getScreenIndexById('retrospective-time-patterns-screen')); });
    if (timePatternsNextButton) timePatternsNextButton.addEventListener('click', () => {
        if (shouldShowComparisonScreen()) {
            populateComparisonScreen(); showScreen(getScreenIndexById('retrospective-comparison-screen'));
        } else {
            populateFinalScreen(); showScreen(getScreenIndexById('retrospective-final-screen'));
        }
    });
    if (comparisonNextButton) comparisonNextButton.addEventListener('click', () => { populateFinalScreen(); showScreen(getScreenIndexById('retrospective-final-screen')); });
    if (finalCloseXButton) finalCloseXButton.addEventListener('click', closeRetrospectiveView);
    if (shareButton) shareButton.addEventListener('click', shareRetrospectiveOnTwitterWithImage);
    if (downloadButton) downloadButton.addEventListener('click', downloadRetrospectiveImageAction);

    if (monthSelectionText && retrospectiveDataStore.currentMonth && Object.keys(retrospectiveDataStore.currentMonth).length > 0) {
        monthSelectionText.textContent = getMonthYearString(new Date(retrospectiveDataStore.currentMonth.year, retrospectiveDataStore.currentMonth.monthIndex));
    } else if (monthSelectionText) {
        monthSelectionText.textContent = getMonthYearString(new Date());
    }
}

function getScreenIndexById(screenId) {
    if (!screenId || allScreens.length === 0) return -1;
    return allScreens.findIndex(screen => screen && screen.id === screenId);
}

function applyDynamicScreenBackground(screenElement, screenIndex) {
    if (!screenElement) return;

    if (screenElement.id === 'retrospective-time-patterns-screen') {
        return;
    }

    const primaryRgb = hexToRgbArray(getComputedStyle(document.documentElement).getPropertyValue('--primary-color-dark').trim());
    if (!primaryRgb) {
        console.warn("TASKIFY_RETRO: Cor primária RGB não encontrada para background dinâmico.");
        return;
    }
    const [r, g, b] = primaryRgb;
    let gradientStyle;

    const alpha1 = 0.3 - (screenIndex * 0.03);
    const alpha2 = 0.1 - (screenIndex * 0.02);
    const angle = 140 + (screenIndex * 15);

    const color1 = `rgba(${r},${g},${b}, ${Math.max(0.05, alpha1)})`;
    const color2 = `rgba(${r},${g},${b}, ${Math.max(0.02, alpha2)})`;

    const baseBgColor = document.body.classList.contains('light') ? '#FFFFFF' : '#000000';

    gradientStyle = `linear-gradient(${angle}deg, ${color1} 0%, ${baseBgColor} 60%, ${color2} 100%)`;

    screenElement.style.background = gradientStyle;
}

function openRetrospectiveView() {
    if (!retrospectiveModal || !retrospectiveOverlay) return;
    if (!window.taskifyStateReady || !window.state) {
        const msg = "Os dados do aplicativo principal ainda não estão prontos. Tente novamente em alguns instantes.";
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert(msg, "Dados Indisponíveis"); else alert(msg);
        return;
    }

    retrospectiveDataStore = processDataForRetrospectiveDirectly(window.state);
    retrospectiveDataProcessed = true;

    currentScreenIndex = 0;
    selectedMetrics = [];
    if (metricButtons && metricButtons.length > 0) updateMetricButtonsState();
    if (startRetrospectiveButton) startRetrospectiveButton.disabled = true;

    if (monthSelectionText && retrospectiveDataStore.currentMonth && Object.keys(retrospectiveDataStore.currentMonth).length > 0) {
        monthSelectionText.textContent = getMonthYearString(new Date(retrospectiveDataStore.currentMonth.year, retrospectiveDataStore.currentMonth.monthIndex));
    } else if (monthSelectionText) {
        monthSelectionText.textContent = getMonthYearString(new Date());
    }

    shouldResumeMusicOnFocus = false; // Resetar ao abrir o modal

    retrospectiveOverlay.classList.add('show');
    retrospectiveModal.classList.add('show');
    document.body.classList.add('modal-open', 'retrospective-open');

    isMusicPlaying = false;
    userInteractedWithMusic = false;
    if (musicToggleButton) musicToggleButton.style.display = 'none';

    showScreen(0);
    updateMusicButtonIcon(); // Garante que o ícone esteja correto mesmo se a música não tocar
}

function closeRetrospectiveView() {
    if (!retrospectiveModal || !retrospectiveOverlay) return;
    retrospectiveModal.classList.remove('show');
    retrospectiveOverlay.classList.remove('show');
    document.body.classList.remove('modal-open', 'retrospective-open');

    if (retrospectiveMusicAudio) {
        pauseRetrospectiveMusic(); // Usa a função para garantir que isMusicPlaying seja atualizado
        retrospectiveMusicAudio.currentTime = 0; // Continua resetando o tempo
        if (musicToggleButton) musicToggleButton.style.display = 'none';
        updateMusicButtonIcon();
    }
    shouldResumeMusicOnFocus = false; // Resetar ao fechar o modal

    setTimeout(() => {
        currentScreenIndex = 0;
        if (allScreens.length > 0 && allScreens[0]) {
            allScreens.forEach((screen, index) => {
                if (screen) {
                    screen.classList.remove('active', 'previous', 'next-out', 'previous-in');
                    screen.style.animation = '';
                    if (index === 0) {
                        screen.style.display = 'flex';
                        screen.classList.add('active');
                        screen.style.opacity = '1';
                        screen.style.visibility = 'visible';
                        screen.style.transform = 'translateX(0px) scale(1)';
                    } else {
                        screen.style.display = 'none';
                    }
                }
            });
        }
    }, 700);
}


function showScreen(screenIndex) {
    if (screenIndex < 0 || screenIndex >= allScreens.length || !allScreens[screenIndex]) {
        screenIndex = 0;
        if (!allScreens[screenIndex]) {
            closeRetrospectiveView(); return;
        }
    }

    const previousActiveScreen = allScreens[currentScreenIndex];

    allScreens.forEach((screen, index) => {
        if (screen) {
            screen.classList.remove('active', 'previous', 'next-out', 'previous-in');
            screen.style.animation = '';
            if (index !== screenIndex && !screen.classList.contains('active')) {
                setTimeout(() => {
                    if (screen && !screen.classList.contains('active')) {
                        screen.style.display = 'none';
                    }
                }, 700);
            }
        }
    });

    const targetScreen = allScreens[screenIndex];
    if (targetScreen) {
        applyDynamicScreenBackground(targetScreen, screenIndex);
        targetScreen.style.display = 'flex';
        void targetScreen.offsetWidth;

        if (screenIndex > currentScreenIndex) {
            if (previousActiveScreen) previousActiveScreen.classList.add('previous');
            targetScreen.classList.add('active');
        } else if (screenIndex < currentScreenIndex) {
            if (previousActiveScreen) previousActiveScreen.classList.add('next-out');
            targetScreen.classList.add('previous-in', 'active');
        } else {
            targetScreen.classList.add('active');
        }

        if (musicToggleButton) {
            musicToggleButton.style.display = (targetScreen.id === 'retrospective-selection-screen') ? 'none' : 'flex';
            if (targetScreen.id !== 'retrospective-selection-screen') updateMusicButtonIcon();
        }
    }
    currentScreenIndex = screenIndex;
}

function updateMetricButtonsState() {
    metricButtons.forEach(button => {
        const metric = button.dataset.metric;
        button.classList.toggle('selected', selectedMetrics.includes(metric));
    });
}

function startRetrospectiveFlow() {
    if (!retrospectiveDataProcessed || !retrospectiveDataStore.currentMonth || Object.keys(retrospectiveDataStore.currentMonth).length === 0) {
        const msg = "Os dados da retrospectiva ainda não foram carregados ou estão vazios. Tente reabrir a retrospectiva.";
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert(msg, "Dados Indisponíveis"); else alert(msg);
        return;
    }
    if (selectedMetrics.length === 0) {
        const msg = "Por favor, selecione pelo menos uma métrica para continuar.";
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert(msg, "Seleção Necessária"); else alert(msg);
        return;
    }

    userInteractedWithMusic = true; // Considera a interação aqui para poder tocar
    if (retrospectiveMusicAudio && !isMusicPlaying) playRetrospectiveMusic();
    if (musicToggleButton) musicToggleButton.style.display = 'flex';
    updateMusicButtonIcon();

    populateIntroScreen();
    const introScreenIndex = getScreenIndexById('retrospective-intro-screen');
    if (introScreenIndex !== -1) showScreen(introScreenIndex);
}

function shouldShowComparisonScreen() {
    if (!retrospectiveDataStore.previousMonth || Object.keys(retrospectiveDataStore.previousMonth).length === 0) return false;
    const { previousMonth } = retrospectiveDataStore;
    return selectedMetrics.some(metric => {
        if (metric === "questions") return (previousMonth.questionsResolved || 0) > 0;
        if (metric === "tasks") return (previousMonth.tasksCompleted || 0) > 0;
        if (metric === "focus") return (previousMonth.focusTimeMinutes || 0) > 0;
        return false;
    });
}

document.addEventListener('taskifyStateReady', (event) => {
    // Lógica para lidar com o estado pronto...
});


function processDataForRetrospectiveDirectly(appStateProvided) {
    if (!appStateProvided || typeof appStateProvided !== 'object' || Object.keys(appStateProvided).length === 0) {
        const today = new Date();
        const defaultMonthData = { year: today.getFullYear(), monthIndex: today.getMonth(), questionsResolved: 0, tasksCompleted: 0, focusTimeMinutes: 0, mostProductiveDayOverall: { date: null, totalScore: 0, questions: 0, tasks: 0, focusMinutes: 0 }, peakFocusHour: null, longestStreakInMonth: 0, weeklyDistribution: Array(7).fill(0) };
        return { currentMonth: defaultMonthData, previousMonth: { ...defaultMonthData } };
    }

    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonthIndex = today.getMonth();
    const prevMonthDate = new Date(today);
    prevMonthDate.setDate(1);
    prevMonthDate.setMonth(currentMonthIndex - 1);
    const prevYear = prevMonthDate.getFullYear();
    const prevMonthIndex = prevMonthDate.getMonth();

    return {
        currentMonth: getMonthlyAggregatedData(currentYear, currentMonthIndex, appStateProvided),
        previousMonth: getMonthlyAggregatedData(prevYear, prevMonthIndex, appStateProvided)
    };
}

function getMonthlyAggregatedData(year, monthIndex, appState) {
    if (!appState || typeof appState !== 'object') {
        return { year, monthIndex, questionsResolved: 0, tasksCompleted: 0, focusTimeMinutes: 0, mostProductiveDayOverall: { date: null, totalScore: 0, questions: 0, tasks: 0, focusMinutes: 0 }, peakFocusHour: null, longestStreakInMonth: 0, weeklyDistribution: Array(7).fill(0) };
    }

    const startDate = new Date(year, monthIndex, 1);
    const endDate = new Date(year, monthIndex + 1, 0, 23, 59, 59, 999);
    const daysInMonth = endDate.getDate();

    let questionsResolvedThisMonth = 0;
    const streakDataString = localStorage.getItem('taskify-streak');
    let streakHistory = {};
    if (streakDataString) {
        try {
            const parsedStreak = JSON.parse(streakDataString);
            if (parsedStreak && typeof parsedStreak.history === 'object') streakHistory = parsedStreak.history;
        } catch (e) { console.error("TASKIFY_RETRO: Erro ao parsear streakData:", e); }
    }
    for (const dateISO in streakHistory) {
        const entryDate = new Date(dateISO + "T00:00:00");
        if (entryDate.getFullYear() === year && entryDate.getMonth() === monthIndex) {
            questionsResolvedThisMonth += (Number(streakHistory[dateISO]) || 0);
        }
    }

    let tasksCompleted = 0;
    if (appState.tasks && Array.isArray(appState.tasks)) {
        tasksCompleted = appState.tasks.filter(task => {
            if (!task || !task.completed || !task.completionDate) return false;
            try {
                const completionDate = new Date(task.completionDate);
                return completionDate >= startDate && completionDate <= endDate;
            } catch (e) { return false; }
        }).length;
    }

    let focusTimeSeconds = 0;
    if (appState.pomodoro && appState.pomodoro.sessions && Array.isArray(appState.pomodoro.sessions)) {
        appState.pomodoro.sessions.forEach(session => {
            if (!session || session.type !== 'focus' || !session.startTime || !session.duration) return;
            try {
                const sessionStartDate = new Date(session.startTime);
                if (sessionStartDate >= startDate && sessionStartDate <= endDate) {
                    focusTimeSeconds += (session.duration || 0);
                }
            } catch (e) { /* Ignora */ }
        });
    }
    const focusTimeMinutes = Math.round(focusTimeSeconds / 60);

    const dailyData = Array(daysInMonth).fill(null).map((_, i) => ({
        dateObj: new Date(year, monthIndex, i + 1),
        questions: 0, tasks: 0, focusMinutes: 0, totalScore: 0
    }));
    const hourlyFocusCounts = Array(24).fill(0);

    for (let d = 0; d < daysInMonth; d++) {
        const dateISO = dailyData[d].dateObj.toISOString().split('T')[0];
        if (streakHistory[dateISO] !== undefined) {
            const dailyQuestions = Number(streakHistory[dateISO]) || 0;
            dailyData[d].questions += dailyQuestions;
            dailyData[d].totalScore += dailyQuestions * 0.5; // Peso para questões
        }
    }
    if (appState.tasks && Array.isArray(appState.tasks)) {
        appState.tasks.forEach(task => {
            if (!task || !task.completed || !task.completionDate) return;
            try {
                const completionDate = new Date(task.completionDate);
                if (completionDate.getFullYear() === year && completionDate.getMonth() === monthIndex) {
                    const dayOfMonthIndex = completionDate.getDate() - 1;
                    if (dailyData[dayOfMonthIndex]) {
                        dailyData[dayOfMonthIndex].tasks++;
                        dailyData[dayOfMonthIndex].totalScore += 1; // Peso para tarefas
                    }
                }
            } catch (e) { /* Ignora */ }
        });
    }
    if (appState.pomodoro && appState.pomodoro.sessions && Array.isArray(appState.pomodoro.sessions)) {
        appState.pomodoro.sessions.forEach(session => {
            if (!session || session.type !== 'focus' || !session.startTime || !session.duration) return;
            try {
                const sessionStartDate = new Date(session.startTime);
                if (sessionStartDate.getFullYear() === year && sessionStartDate.getMonth() === monthIndex) {
                    const dayOfMonthIndex = sessionStartDate.getDate() - 1;
                    const sessionMinutes = Math.round((session.duration || 0) / 60);
                    if (dailyData[dayOfMonthIndex]) {
                        dailyData[dayOfMonthIndex].focusMinutes += sessionMinutes;
                        dailyData[dayOfMonthIndex].totalScore += sessionMinutes * 0.05; // Peso para foco
                    }
                    const hour = sessionStartDate.getHours();
                    hourlyFocusCounts[hour] += sessionMinutes;
                }
            } catch (e) { /* Ignora */ }
        });
    }

    let mostProductiveDayOverall = { date: null, totalScore: 0, questions: 0, tasks: 0, focusMinutes: 0 };
    dailyData.forEach((dayItem) => {
        if (dayItem.totalScore > mostProductiveDayOverall.totalScore) {
            mostProductiveDayOverall = {
                date: dayItem.dateObj.toISOString(),
                totalScore: dayItem.totalScore,
                questions: dayItem.questions,
                tasks: dayItem.tasks,
                focusMinutes: dayItem.focusMinutes
            };
        }
    });

    const maxFocusForHour = Math.max(...hourlyFocusCounts);
    const peakFocusHour = maxFocusForHour > 0 ? hourlyFocusCounts.indexOf(maxFocusForHour) : null;

    let longestStreakInMonth = 0;
    if (streakHistory && typeof streakHistory === 'object' && appState.goals && typeof appState.goals.daily === 'number') {
        let currentMonthlyStreak = 0;
        let maxMonthlyStreak = 0;
        const dailyGoal = (appState.goals.daily > 0) ? appState.goals.daily : 1;

        for (let d = 1; d <= daysInMonth; d++) {
            const dateToCheck = new Date(year, monthIndex, d);
            const dateISO = dateToCheck.toISOString().split('T')[0];
            if (streakHistory[dateISO] !== undefined && (Number(streakHistory[dateISO]) || 0) >= dailyGoal) {
                currentMonthlyStreak++;
            } else {
                if (currentMonthlyStreak > maxMonthlyStreak) maxMonthlyStreak = currentMonthlyStreak;
                currentMonthlyStreak = 0;
            }
        }
        if (currentMonthlyStreak > maxMonthlyStreak) maxMonthlyStreak = currentMonthlyStreak;
        longestStreakInMonth = maxMonthlyStreak;
    }

    const weeklyDistribution = Array(7).fill(0); // Domingo a Sábado
    dailyData.forEach(dayItem => {
        if (dayItem.dateObj) {
            const dayOfWeek = dayItem.dateObj.getDay(); // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado
            weeklyDistribution[dayOfWeek] += dayItem.totalScore; // Soma o 'totalScore' para o dia da semana
        }
    });

    return {
        year, monthIndex,
        questionsResolved: questionsResolvedThisMonth,
        tasksCompleted,
        focusTimeMinutes,
        mostProductiveDayOverall: mostProductiveDayOverall.date ? mostProductiveDayOverall : { date: null, totalScore: 0, questions: 0, tasks: 0, focusMinutes: 0 },
        peakFocusHour,
        longestStreakInMonth,
        weeklyDistribution
    };
}


function populateIntroScreen() {
    if (!retrospectiveDataStore.currentMonth || !introMonth) {
        if (introMonth) introMonth.textContent = "Sua Retrospectiva";
        return;
    }
    const { currentMonth } = retrospectiveDataStore;
    if (introMonth) introMonth.textContent = `Sua Retrospectiva de ${getMonthYearString(new Date(currentMonth.year, currentMonth.monthIndex))}`;
}

function populateMainStatsScreen() {
    if (!retrospectiveDataStore.currentMonth) {
        ['questions', 'tasks', 'focus'].forEach(metric => {
            const card = mainStatsScreen ? mainStatsScreen.querySelector(`[data-metric-card="${metric}"]`) : null;
            if (card) card.style.display = 'none';
        });
        return;
    }
    const { currentMonth } = retrospectiveDataStore;
    const cardsData = [
        { metric: "questions", el: questionsResolvedEl, value: currentMonth.questionsResolved || 0, phraseEl: phraseQuestionsEl, cardSel: '[data-metric-card="questions"]', formatter: val => Math.round(val) },
        { metric: "tasks", el: tasksCompletedEl, value: currentMonth.tasksCompleted || 0, phraseEl: phraseTasksEl, cardSel: '[data-metric-card="tasks"]', formatter: val => Math.round(val) },
        { metric: "focus", el: focusTimeEl, value: currentMonth.focusTimeMinutes || 0, phraseEl: phraseFocusEl, cardSel: '[data-metric-card="focus"]', formatter: val => `${Math.round(val)} min` }
    ];
    let visibleCards = 0;
    const animationDuration = 1000;
    cardsData.forEach(item => {
        const card = mainStatsScreen ? mainStatsScreen.querySelector(item.cardSel) : null;
        if (card) {
            if (selectedMetrics.includes(item.metric)) {
                card.style.display = ''; card.classList.add('animated-metric-card');
                if (item.el) animateValue(item.el, 0, item.value, animationDuration, item.formatter); else if (item.el) item.el.textContent = item.formatter(item.value);
                if (item.phraseEl) item.phraseEl.textContent = getRandomPhrase(item.metric);
                visibleCards++;
            } else {
                card.style.display = 'none'; card.classList.remove('animated-metric-card');
            }
        }
    });
    const gridEl = mainStatsScreen ? mainStatsScreen.querySelector('.retrospective-stats-grid') : null;
    if (gridEl) {
        if (visibleCards === 1) gridEl.style.gridTemplateColumns = 'minmax(180px, 280px)';
        else if (visibleCards === 2) gridEl.style.gridTemplateColumns = 'repeat(2, minmax(150px, 1fr))';
        else gridEl.style.gridTemplateColumns = 'repeat(auto-fit, minmax(150px, 1fr))';
    }
}

function populateProductiveDayScreen() {
    if (!retrospectiveDataStore.currentMonth || !mostProductiveDateEl || !mostProductiveValueEl) {
        if (mostProductiveDateEl) mostProductiveDateEl.textContent = "-";
        if (mostProductiveValueEl) mostProductiveValueEl.textContent = "Dados indisponíveis.";
        return;
    }
    const { mostProductiveDayOverall } = retrospectiveDataStore.currentMonth;
    const motivationalTextEl = productiveDayScreen ? productiveDayScreen.querySelector('.retrospective-motivational-text') : null;
    if (mostProductiveDayOverall && mostProductiveDayOverall.date && mostProductiveDayOverall.totalScore > 0) {
        const dateObj = new Date(mostProductiveDayOverall.date);
        mostProductiveDateEl.textContent = dateObj.toLocaleDateString('pt-BR', { day: 'numeric', month: 'long' });
        let achievementsText = [];
        if (mostProductiveDayOverall.questions > 0) achievementsText.push(`${mostProductiveDayOverall.questions} questões`);
        if (mostProductiveDayOverall.tasks > 0) achievementsText.push(`${mostProductiveDayOverall.tasks} tarefas`);
        if (mostProductiveDayOverall.focusMinutes > 0) achievementsText.push(`${formatFocusMinutes(mostProductiveDayOverall.focusMinutes)} min de foco`);
        mostProductiveValueEl.textContent = achievementsText.length > 0 ? achievementsText.join(' + ') + "!" : "Um dia de grande esforço!";
        if (motivationalTextEl) motivationalTextEl.innerHTML = `Você estava em <span class="retrospective-highlight-primary">modo máquina</span> neste dia! 🔥`;
    } else {
        mostProductiveDateEl.textContent = "Ops!";
        mostProductiveValueEl.textContent = "Parece que não tivemos um dia épico este mês.";
        if (motivationalTextEl) motivationalTextEl.innerHTML = `Continue firme, o próximo mês pode ser <span class="retrospective-highlight-primary">o seu momento</span>! 💪`;
    }
}

function populateTimePatternsScreen() {
    if (!retrospectiveDataStore.currentMonth) {
        if (peakFocusHourEl) peakFocusHourEl.textContent = "-";
        if (longestStreakEl) longestStreakEl.textContent = "0";
        if (weekdayChartContainer) weekdayChartContainer.innerHTML = '<p style="text-align:center; padding:20px 0; color: var(--text-muted-dark, #BCA8DD);">Dados de distribuição semanal indisponíveis.</p>';
        return;
    }
    const { peakFocusHour, longestStreakInMonth, weeklyDistribution } = retrospectiveDataStore.currentMonth;
    const animationDuration = 800;

    if (peakFocusHourEl) {
        peakFocusHourEl.textContent = peakFocusHour !== null ? `${String(peakFocusHour).padStart(2, '0')}:00` : "-";
    }
    if (longestStreakEl) {
        animateValue(longestStreakEl, 0, longestStreakInMonth || 0, animationDuration);
    }

    if (weekdayChartContainer && weeklyDistribution && Array.isArray(weeklyDistribution) && weeklyDistribution.length === 7) {
        weekdayChartContainer.innerHTML = '';
        const dayLabels = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"];
        const maxValue = Math.max(...weeklyDistribution, 1);

        weeklyDistribution.forEach((value, index) => {
            const barContainer = document.createElement('div');
            barContainer.className = 'retrospective-weekday-bar-container';

            const bar = document.createElement('div');
            bar.className = 'retrospective-weekday-bar';

            const finalHeight = maxValue > 0 ? (value / maxValue) * 100 : 0;
            bar.style.height = `0%`;

            void bar.offsetWidth;

            setTimeout(() => {
                bar.style.height = `${finalHeight}%`;
            }, 100 + index * 50);

            const label = document.createElement('span');
            label.className = 'retrospective-weekday-label';
            label.textContent = dayLabels[index];

            barContainer.appendChild(bar);
            barContainer.appendChild(label);
            weekdayChartContainer.appendChild(barContainer);
        });
    } else if (weekdayChartContainer) {
        weekdayChartContainer.innerHTML = '<p style="text-align:center; padding:20px 0; color: var(--text-muted-dark, #BCA8DD);">Dados de distribuição semanal indisponíveis.</p>';
    }
}

function populateComparisonScreen() {
    if (!retrospectiveDataStore.currentMonth || !retrospectiveDataStore.previousMonth || Object.keys(retrospectiveDataStore.previousMonth).length === 0) {
        ['questions', 'tasks', 'focus'].forEach(metric => {
            const card = comparisonScreen ? comparisonScreen.querySelector(`[data-metric-comparison-card="${metric}"]`) : null;
            if (card) card.style.display = 'none';
        });
        if (comparisonHighlightEl) comparisonHighlightEl.textContent = "dados de comparação indisponíveis";
        return;
    }
    const { currentMonth, previousMonth } = retrospectiveDataStore;
    let comparisonMetricsShown = 0;
    const animationDuration = 1000;

    const setTextAndPercentage = (valueEl, percentageEl, iconContainer, currentValue, previousValue, formatterFunc = (val) => `${Math.round(val)}`) => {
        let metricDisplayed = false;
        if (valueEl) animateValue(valueEl, 0, parseFloat(currentValue) || 0, animationDuration, formatterFunc);
        if (percentageEl && iconContainer) {
            const icon = iconContainer.querySelector('.retrospective-icon-small');
            if (!icon) { percentageEl.textContent = "-"; return metricDisplayed; }
            const currentNum = parseFloat(currentValue) || 0;
            const prevNum = parseFloat(previousValue) || 0;
            if (previousValue !== null && previousValue !== undefined) {
                if (prevNum > 0) {
                    const percentageChange = ((currentNum - prevNum) / prevNum) * 100;
                    percentageEl.textContent = `${percentageChange >= 0 ? '+' : ''}${percentageChange.toFixed(0)}%`;
                    icon.className = `bi ${percentageChange >= 0 ? 'bi-arrow-up-right' : 'bi-arrow-down-right'} retrospective-icon-small ${percentageChange >= 0 ? 'retrospective-icon-green' : 'retrospective-icon-red'}`;
                    metricDisplayed = true;
                } else if (currentNum > 0) {
                    percentageEl.textContent = "NOVO!"; icon.className = 'bi bi-stars retrospective-icon-small retrospective-icon-green'; metricDisplayed = true;
                } else { percentageEl.textContent = "0%"; icon.className = 'bi bi-dash retrospective-icon-small'; }
            } else { percentageEl.textContent = "-"; icon.className = 'bi bi-dash retrospective-icon-small'; }
        } else if (percentageEl) { percentageEl.textContent = "-"; }
        return metricDisplayed;
    };
    const comparisonCardsData = [
        { metric: "questions", valueElId: "retrospective-comparison-questions-resolved", percentageElId: "retrospective-questions-percentage", current: currentMonth.questionsResolved || 0, prev: previousMonth.questionsResolved, cardSel: '[data-metric-comparison-card="questions"]', formatter: (val) => `${Math.round(val)}` },
        { metric: "tasks", valueElId: "retrospective-comparison-tasks-completed", percentageElId: "retrospective-tasks-percentage", current: currentMonth.tasksCompleted || 0, prev: previousMonth.tasksCompleted, cardSel: '[data-metric-comparison-card="tasks"]', formatter: (val) => `${Math.round(val)}` },
        { metric: "focus", valueElId: "retrospective-comparison-focus-time", percentageElId: "retrospective-focus-percentage", current: currentMonth.focusTimeMinutes || 0, prev: previousMonth.focusTimeMinutes, cardSel: '[data-metric-comparison-card="focus"]', formatter: val => `${Math.round(val)} min` }
    ];
    comparisonCardsData.forEach(item => {
        const card = comparisonScreen ? comparisonScreen.querySelector(item.cardSel) : null;
        if (card) {
            if (selectedMetrics.includes(item.metric)) {
                card.style.display = '';
                if (setTextAndPercentage(document.getElementById(item.valueElId), document.getElementById(item.percentageElId), document.getElementById(item.percentageElId)?.parentElement, item.current, item.prev, item.formatter)) {
                    comparisonMetricsShown++;
                }
            } else { card.style.display = 'none'; }
        }
    });
    if (comparisonHighlightEl) {
        if (comparisonMetricsShown > 0) {
            const messages = ["sua evolução está demais", "você está voando alto", "o progresso não para", "que salto de performance"];
            comparisonHighlightEl.textContent = messages[Math.floor(Math.random() * messages.length)];
        } else { comparisonHighlightEl.textContent = "seu desempenho este mês"; }
    }
}

function populateFinalScreen() {
    if (!retrospectiveDataStore.currentMonth || !finalMonthYearEl || !achievementsListEl || !finalScreenImageableContent || !finalFooterEl) {
        if (finalMonthYearEl) finalMonthYearEl.textContent = getMonthYearString(new Date());
        if (achievementsListEl) achievementsListEl.innerHTML = '<li>Nenhuma conquista para exibir.</li>';
        if (finalFooterEl) finalFooterEl.textContent = "#TaskifyWrapped";
        [finalQuestionsHighlightItem, finalTasksHighlightItem, finalFocusHighlightItem, finalPeakFocusStatItem, finalLongestStreakStatItem, finalProductiveDayStatItem, finalAchievementsContainer].forEach(el => { if (el) el.style.display = 'none'; });
        return;
    }
    const { currentMonth } = retrospectiveDataStore;
    finalMonthYearEl.textContent = getMonthYearString(new Date(currentMonth.year, currentMonth.monthIndex));
    finalFooterEl.textContent = "#TaskifyWrapped";
    const highlightsGrid = finalScreenImageableContent.querySelector('.retrospective-final-highlights');
    let visibleHighlightCount = 0;
    [finalQuestionsHighlightItem, finalTasksHighlightItem, finalFocusHighlightItem].forEach(item => { if (item) item.style.display = 'none'; });
    [finalPeakFocusStatItem, finalLongestStreakStatItem, finalProductiveDayStatItem, finalAchievementsContainer].forEach(el => { if (el) el.style.display = 'none'; });
    if (finalQuestionsHighlightItem && selectedMetrics.includes("questions")) { finalQuestionsHighlightItem.style.display = 'flex'; if (finalQuestionsValueEl) finalQuestionsValueEl.textContent = currentMonth.questionsResolved || 0; visibleHighlightCount++; }
    if (finalTasksHighlightItem && selectedMetrics.includes("tasks")) { finalTasksHighlightItem.style.display = 'flex'; if (finalTasksValueEl) finalTasksValueEl.textContent = currentMonth.tasksCompleted || 0; visibleHighlightCount++; }
    if (finalFocusHighlightItem && selectedMetrics.includes("focus")) { finalFocusHighlightItem.style.display = 'flex'; if (finalFocusValueEl) finalFocusValueEl.textContent = `${formatFocusMinutes(currentMonth.focusTimeMinutes)} min`; visibleHighlightCount++; }
    if (highlightsGrid) highlightsGrid.dataset.itemCount = visibleHighlightCount;
    if (finalPeakFocusStatItem && currentMonth.peakFocusHour !== null) { finalPeakFocusStatItem.style.display = 'flex'; if (finalPeakFocusHourEl) finalPeakFocusHourEl.textContent = `${String(currentMonth.peakFocusHour).padStart(2, '0')}:00`; } else if (finalPeakFocusStatItem && currentMonth.peakFocusHour === null) { finalPeakFocusStatItem.style.display = 'flex'; if (finalPeakFocusHourEl) finalPeakFocusHourEl.textContent = "-"; }
    if (finalLongestStreakStatItem && (currentMonth.longestStreakInMonth || 0) >= 0) { finalLongestStreakStatItem.style.display = 'flex'; if (finalLongestStreakEl) finalLongestStreakEl.textContent = currentMonth.longestStreakInMonth || 0; }
    if (finalProductiveDayStatItem && currentMonth.mostProductiveDayOverall && currentMonth.mostProductiveDayOverall.date) { finalProductiveDayStatItem.style.display = 'flex'; const prodDate = new Date(currentMonth.mostProductiveDayOverall.date); if (finalMostProductiveDayShortEl) finalMostProductiveDayShortEl.textContent = prodDate.toLocaleDateString('pt-BR', { day: '2-digit', month: 'long' }).replace('.', ''); } else if (finalProductiveDayStatItem) { finalProductiveDayStatItem.style.display = 'flex'; if (finalMostProductiveDayShortEl) finalMostProductiveDayShortEl.textContent = "-"; }
    achievementsListEl.innerHTML = '';
    const achievements = determineAchievements(currentMonth, selectedMetrics);
    if (achievements.length > 0) { if (finalAchievementsContainer) finalAchievementsContainer.style.display = ''; const badge = document.createElement('span'); badge.className = 'retrospective-badge-achievement'; badge.innerHTML = achievements[0]; achievementsListEl.appendChild(badge); }
}

function determineAchievements(monthData, metrics) {
    const achievements = [];
    const appGoals = (window.state && window.state.goals) ? window.state.goals : { monthly: 300, daily: 10, weekly: 50 };
    if (!monthData) return ["<i class='bi bi-emoji-smile-fill'></i> Mês concluído!"];
    const monthlyQuestionsGoal = appGoals.monthly || 300;
    const monthlyTasksGoal = Math.max(15, Math.round((appGoals.weekly || 50) * 0.75 * 4));
    const monthlyFocusGoalMinutes = Math.max(600, Math.round((appGoals.monthly || 300) * 1.5));
    let bestAchievement = { score: -1, text: "" };
    const updateBest = (score, text) => { if (score > bestAchievement.score) bestAchievement = { score, text }; };
    if (metrics.includes("questions") && (monthData.questionsResolved || 0) >= monthlyQuestionsGoal && monthlyQuestionsGoal > 0) updateBest(5, "<i class='bi bi-award-fill'></i> Meta de Questões Batida!");
    else if (metrics.includes("questions") && (monthData.questionsResolved || 0) > (monthlyQuestionsGoal * 0.75) && monthlyQuestionsGoal > 0) updateBest(3, "<i class='bi bi-trophy-fill'></i> Mestre das Questões");
    if (metrics.includes("tasks") && (monthData.tasksCompleted || 0) >= monthlyTasksGoal && monthlyTasksGoal > 0) updateBest(5, "<i class='bi bi-check-all'></i> Produtividade em Alta!");
    else if (metrics.includes("tasks") && (monthData.tasksCompleted || 0) > (monthlyTasksGoal * 0.75) && monthlyTasksGoal > 0) updateBest(3, "<i class='bi bi-check-circle-fill'></i> Executor(a) Nato(a)");
    if (metrics.includes("focus") && (monthData.focusTimeMinutes || 0) >= monthlyFocusGoalMinutes && monthlyFocusGoalMinutes > 0) updateBest(5, "<i class='bi bi-stopwatch-fill'></i> Lorde do Tempo");
    else if (metrics.includes("focus") && (monthData.focusTimeMinutes || 0) > (monthlyFocusGoalMinutes * 0.75) && monthlyFocusGoalMinutes > 0) updateBest(3, "<i class='bi bi-hourglass-split'></i> Foco Inabalável");
    if ((monthData.longestStreakInMonth || 0) >= 20) updateBest(6, `<i class='bi bi-gem'></i> Streak de ${monthData.longestStreakInMonth} Dias!`);
    else if ((monthData.longestStreakInMonth || 0) >= 7) updateBest(4, `<i class='bi bi-fire'></i> Streak de ${monthData.longestStreakInMonth} Dias`);
    if (monthData.mostProductiveDayOverall && (monthData.mostProductiveDayOverall.totalScore || 0) > 15) updateBest(4.5, "<i class='bi bi-stars'></i> Dia Lendário!");
    if (bestAchievement.score > -1) achievements.push(bestAchievement.text);
    else achievements.push("<i class='bi bi-emoji-sunglasses-fill'></i> Mês de Esforço!");
    return achievements.slice(0, 1);
}

function generateRetrospectiveShareText() {
    if (!retrospectiveDataStore.currentMonth || Object.keys(retrospectiveDataStore.currentMonth).length === 0) {
        return "Confira meu progresso no Taskify! #TaskifyApp https://taskify-fabinxz.vercel.app #TaskifyWrapped";
    }
    const { questionsResolved, tasksCompleted, focusTimeMinutes, mostProductiveDayOverall, longestStreakInMonth } = retrospectiveDataStore.currentMonth;
    const monthName = getMonthYearString(new Date(retrospectiveDataStore.currentMonth.year, retrospectiveDataStore.currentMonth.monthIndex));
    let text = `Minha retrospectiva de ${monthName} no Taskify! 🚀\n\n`;
    let detailsAdded = 0;
    if (selectedMetrics.includes("questions") && (questionsResolved || 0) > 0) { text += `✅ ${questionsResolved} questões\n`; detailsAdded++; }
    if (selectedMetrics.includes("tasks") && (tasksCompleted || 0) > 0) { text += `🎯 ${tasksCompleted} tarefas\n`; detailsAdded++; }
    if (selectedMetrics.includes("focus") && (focusTimeMinutes || 0) > 0) { text += `⏰ ${formatFocusMinutes(focusTimeMinutes)} min de foco\n`; detailsAdded++; }
    if (detailsAdded > 0 && ((mostProductiveDayOverall && mostProductiveDayOverall.date) || (longestStreakInMonth || 0) >= 3)) text += "\n";
    if (mostProductiveDayOverall && mostProductiveDayOverall.date && (mostProductiveDayOverall.totalScore || 0) > 0) { const prodDate = new Date(mostProductiveDayOverall.date); text += `🌟 Dia Mais Produtivo: ${prodDate.toLocaleDateString('pt-BR', { day: '2-digit', month: 'long' }).replace('.', '')}\n`; }
    if ((longestStreakInMonth || 0) >= 3) { text += `🔥 Maior Streak: ${longestStreakInMonth} dias\n`; }
    text += "Confira o Taskify e organize seu sucesso! 👉 taskify-fabinxz.vercel.app\n#TaskifyWrapped";
    return text;
}

async function generateRetrospectiveImageInternal(forSharingNotification = false, tryClipboard = true) {
    if (!finalScreenImageableContent) {
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert("Erro: A área da retrospectiva não pôde ser encontrada para gerar a imagem.", "Falha ao Gerar Imagem");
        return { success: false, canvas: null, error: "Conteúdo da tela final não encontrado." };
    }
    if (typeof html2canvas !== 'function') {
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert("Erro: A funcionalidade de imagem (html2canvas) não está disponível.", "Funcionalidade Indisponível");
        return { success: false, canvas: null, error: "html2canvas não disponível." };
    }

    const isLightTheme = document.body.classList.contains('light');
    const currentPrimaryColorHex = getComputedStyle(document.documentElement).getPropertyValue(isLightTheme ? '--primary-color-light' : '--primary-color-dark').trim();
    const currentFontFamily = getComputedStyle(document.body).fontFamily;
    const primaryRgbArray = hexToRgbArray(currentPrimaryColorHex);
    let primaryRgbStringForCssVar = primaryRgbArray ? primaryRgbArray.join(', ') : "10, 124, 255";
    let solidFallbackBackgroundColor = isLightTheme ? '#FFFFFF' : '#000000';
    let cardBackgroundColorForClone = isLightTheme ? `linear-gradient(160deg, rgba(${primaryRgbStringForCssVar}, 0.2) 0%, rgba(${primaryRgbStringForCssVar}, 0.08) 40%, #f8f8f8 100%)` : `linear-gradient(160deg, rgba(${primaryRgbStringForCssVar}, 0.2) 0%, rgba(${primaryRgbStringForCssVar}, 0.08) 40%, #050505 100%)`;

    const options = {
        backgroundColor: solidFallbackBackgroundColor, scale: 2, useCORS: true, logging: false,
        onclone: (documentCloned) => {
            const clonedBody = documentCloned.body; const clonedHtml = documentCloned.documentElement;
            clonedHtml.style.setProperty('--primary-color-dark', currentPrimaryColorHex); clonedHtml.style.setProperty('--primary-color-light', currentPrimaryColorHex);
            clonedHtml.style.setProperty('--primary-color-dark-rgb', primaryRgbStringForCssVar); clonedHtml.style.setProperty('--primary-color-light-rgb', primaryRgbStringForCssVar);
            clonedBody.style.fontFamily = currentFontFamily;
            if (isLightTheme) { clonedBody.classList.add('light'); clonedHtml.classList.add('light-theme-active'); clonedBody.style.color = getComputedStyle(document.documentElement).getPropertyValue('--text-color-light').trim() || '#222222'; }
            else { clonedBody.classList.remove('light'); clonedHtml.classList.remove('light-theme-active'); clonedBody.style.color = getComputedStyle(document.documentElement).getPropertyValue('--text-color-dark').trim() || '#FFFFFF'; }
            const clonedContentWrapper = documentCloned.querySelector('.retrospective-final-content-wrapper');
            if (clonedContentWrapper) {
                clonedContentWrapper.style.background = cardBackgroundColorForClone;
                clonedContentWrapper.style.color = isLightTheme ? (getComputedStyle(document.documentElement).getPropertyValue('--text-color-light').trim() || '#222222') : '#FFFFFF';
                const textColorForClone = isLightTheme ? (getComputedStyle(document.documentElement).getPropertyValue('--text-color-light').trim() || '#222222') : '#FFFFFF';
                const mutedTextColorForClone = isLightTheme ? 'rgba(0,0,0,0.6)' : 'rgba(255,255,255,0.7)';
                const iconMutedColorForClone = isLightTheme ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.5)';
                clonedContentWrapper.querySelector('.retrospective-final-logo .logo-text').style.color = textColorForClone;
                clonedContentWrapper.querySelector('.retrospective-final-date').style.color = mutedTextColorForClone;
                clonedContentWrapper.querySelector('.retrospective-final-main-title').style.color = textColorForClone;
                clonedContentWrapper.querySelectorAll('.retrospective-final-highlight-value').forEach(el => el.style.color = currentPrimaryColorHex);
                clonedContentWrapper.querySelectorAll('.retrospective-final-highlight-label').forEach(el => el.style.color = mutedTextColorForClone);
                clonedContentWrapper.querySelectorAll('.final-highlight-icon').forEach(el => el.style.color = iconMutedColorForClone);
                clonedContentWrapper.querySelectorAll('.retrospective-final-other-stat-item i').forEach(el => el.style.color = currentPrimaryColorHex);
                clonedContentWrapper.querySelectorAll('.retrospective-final-other-stat-item span, .retrospective-final-other-stat-item strong').forEach(el => el.style.color = textColorForClone);
                clonedContentWrapper.querySelector('.retrospective-final-achievements-title').style.color = isLightTheme ? 'rgba(0,0,0,0.7)' : 'rgba(255,255,255,0.8)';
                const clonedFooter = clonedContentWrapper.querySelector('.retrospective-final-footer'); if (clonedFooter) { clonedFooter.textContent = "#TaskifyWrapped"; clonedFooter.style.color = isLightTheme ? 'rgba(0,0,0,0.5)' : 'rgba(255,255,255,0.6)';}
                const clonedBadges = documentCloned.querySelectorAll('.retrospective-badge-achievement');
                clonedBadges.forEach(badge => { let badgeSolidBgColor = isLightTheme ? `rgba(${primaryRgbArray[0]}, ${primaryRgbArray[1]}, ${primaryRgbArray[2]}, 0.8)` : `rgba(${primaryRgbArray[0]}, ${primaryRgbArray[1]}, ${primaryRgbArray[2]}, 0.9)`; let badgeTextColor = isLightTheme ? (getComputedStyle(document.documentElement).getPropertyValue('--card-bg-light').trim() || '#FFFFFF') : '#FFFFFF'; badge.style.background = badgeSolidBgColor; badge.style.color = badgeTextColor; badge.style.textShadow = 'none'; badge.style.boxShadow = 'none'; badge.style.animation = 'none'; });
            }
            Array.from(document.styleSheets).forEach(styleSheet => { try { if (styleSheet.href && (styleSheet.href.includes('bootstrap-icons') || styleSheet.href.includes('retrospective.css') || styleSheet.href.includes('style.css'))) { const link = documentCloned.createElement('link'); link.rel = 'stylesheet'; link.href = styleSheet.href; documentCloned.head.appendChild(link); } else if (styleSheet.cssRules) { const style = documentCloned.createElement('style'); Array.from(styleSheet.cssRules).forEach(rule => style.appendChild(documentCloned.createTextNode(rule.cssText))); documentCloned.head.appendChild(style); } } catch (e) { if (!(e instanceof DOMException && e.name === 'SecurityError')) { console.warn("TASKIFY_RETRO: html2canvas onclone - Não foi possível clonar stylesheet:", styleSheet.href || "inline", e); } } });
            return new Promise(resolve => setTimeout(resolve, 600));
        }
    };

    try {
        const canvas = await html2canvas(finalScreenImageableContent, options);

        if (tryClipboard) {
            if (navigator.clipboard && navigator.clipboard.write && typeof ClipboardItem !== 'undefined') {
                await new Promise((resolvePromise, rejectPromise) => {
                    canvas.toBlob(async function (blob) {
                        if (blob) {
                            try {
                                await navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]);
                                const alertTitle = forSharingNotification ? 'Compartilhar' : 'Copiado!';
                                const alertMsg = forSharingNotification ? 'Imagem copiada! Cole no seu tweet.' : 'Imagem da retrospectiva copiada para a área de transferência!';
                                if (typeof window.showCustomAlert === 'function') window.showCustomAlert(alertMsg, alertTitle);
                                resolvePromise();
                            } catch (clipboardError) {
                                console.error("TASKIFY_RETRO: Falha ao escrever no clipboard:", clipboardError);
                                const errorMsg = `Não foi possível copiar a imagem automaticamente (${clipboardError.name || 'Erro Desconhecido'}). ${isMobileDevice() ? 'Você pode baixar a imagem usando o outro botão e anexá-la manualmente.' : 'Tente um print screen.'}`;
                                if (typeof window.showCustomAlert === 'function') window.showCustomAlert(errorMsg, "Cópia Falhou");
                                rejectPromise(clipboardError);
                            }
                        } else {
                            const errorMsg = "Erro ao processar a imagem (blob nulo).";
                            if (typeof window.showCustomAlert === 'function') window.showCustomAlert(errorMsg, "Falha na Imagem");
                            rejectPromise(new Error("Falha ao criar blob"));
                        }
                    }, 'image/png');
                });
                return { success: true, canvas: canvas, error: null }; // Cópia bem-sucedida
            } else {
                console.warn("TASKIFY_RETRO: API de Clipboard não disponível para cópia.");
                 if (forSharingNotification && isMobileDevice()) {
                    // Se for para compartilhar e é mobile, não mostre erro aqui, o fluxo de fallback (download) será ativado
                } else if (forSharingNotification) { // Desktop e API não disponível
                    if (typeof window.showCustomAlert === 'function') window.showCustomAlert("Seu navegador não suporta copiar imagens para a área de transferência. Tente baixar a imagem.", "Aviso");
                }
                return { success: false, canvas: canvas, error: "API de Clipboard indisponível." }; // Retorna o canvas para fallback
            }
        } else { // Se tryClipboard é false, apenas retorna o canvas (para download)
            return { success: true, canvas: canvas, error: null };
        }
    } catch (err) {
        const userMessage = `Erro ao gerar imagem da retrospectiva. Detalhes: ${err.message}.`;
        if (typeof window.showCustomAlert === 'function') window.showCustomAlert(userMessage, "Falha na Imagem");
        return { success: false, canvas: null, error: err.message };
    }
}


function downloadCanvasAsImageFile(canvas, filename = 'retrospectiva_taskify.png') {
    if (!canvas) {
        console.error("TASKIFY_RETRO: Tentativa de download com canvas nulo.");
        return;
    }
    try {
        const dataURL = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = dataURL;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        if (typeof window.showCustomAlert === 'function') {
            window.showCustomAlert("Download da imagem iniciado!", "Download Concluído");
        } else {
            alert("Download da imagem iniciado!");
        }
    } catch (e) {
        console.error("TASKIFY_RETRO: Erro ao tentar baixar a imagem:", e);
        if (typeof window.showCustomAlert === 'function') {
            window.showCustomAlert("Ocorreu um erro ao tentar baixar a imagem.", "Falha no Download");
        } else {
            alert("Ocorreu um erro ao tentar baixar a imagem.");
        }
    }
}

async function shareRetrospectiveOnTwitterWithImage() {
    const textToShare = generateRetrospectiveShareText();
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(textToShare)}`;
    let imageGeneratedAndHandled = false;

    if (isMobileDevice()) {
        console.log("TASKIFY_RETRO: Modo mobile para compartilhar. Tentando download da imagem.");
        const result = await generateRetrospectiveImageInternal(true, false);
        if (result.success && result.canvas) {
            downloadCanvasAsImageFile(result.canvas, 'retrospectiva_taskify_twitter.png');
            if (typeof window.showCustomAlert === 'function') {
                window.showCustomAlert("Imagem baixada! Agora, anexe-a ao seu tweet.", "Compartilhar no Twitter");
            }
            imageGeneratedAndHandled = true;
        } else {
            if (typeof window.showCustomAlert === 'function') {
                 window.showCustomAlert("Não foi possível preparar a imagem para o Twitter. Você pode tentar baixá-la com o outro botão ou compartilhar apenas o texto.", "Falha na Imagem");
            }
        }
    } else {
        console.log("TASKIFY_RETRO: Modo desktop para compartilhar. Tentando copiar imagem para o clipboard.");
        const result = await generateRetrospectiveImageInternal(true, true);
        if (result.success && result.canvas) {
            imageGeneratedAndHandled = true;
        } else if (!result.success && result.canvas) {
            if (typeof window.showCustomAlert === 'function') {
                 window.showCustomAlert("Não foi possível copiar a imagem. Tente baixá-la com o outro botão e anexar ao tweet, ou compartilhe apenas o texto.", "Falha na Cópia");
            }
        } else {
             if (typeof window.showCustomAlert === 'function') {
                window.showCustomAlert("Não foi possível gerar a imagem para o Twitter. Compartilhando apenas o texto.", "Falha na Imagem");
            }
        }
    }

    setTimeout(() => {
        window.open(twitterUrl, '_blank');
    }, imageGeneratedAndHandled ? 1500 : 500);
}

async function downloadRetrospectiveImageAction() {
    console.log("TASKIFY_RETRO: Gerando imagem para download direto.");
    const result = await generateRetrospectiveImageInternal(false, false);
    if (result.success && result.canvas) {
        downloadCanvasAsImageFile(result.canvas, 'retrospectiva_taskify.png');
    } else {
        console.error("TASKIFY_RETRO: Canvas não foi gerado para download ou houve erro.");
        if (typeof window.showCustomAlert === 'function' && !result.canvas) {
             window.showCustomAlert("Não foi possível gerar a imagem para download. Tente um print screen.", "Falha no Download");
        } else if (typeof window.showCustomAlert === 'function' && result.canvas && !result.success) {
            window.showCustomAlert("Houve um problema ao preparar a imagem para download (Canvas gerado, mas erro na operação).", "Falha");
        }
    }
}

// --- Event Listener para Visibilidade da Página ---
function handleVisibilityChange() {
    // Verifica se o modal da retrospectiva está aberto
    if (!retrospectiveModal || !retrospectiveModal.classList.contains('show')) {
        return; // Se não estiver aberto, não faz nada
    }

    if (document.hidden) {
        // A página ficou oculta
        if (isMusicPlaying) {
            shouldResumeMusicOnFocus = true; // Marcar para retomar
            pauseRetrospectiveMusic(true); // Pausa a música, indicando que é por mudança de visibilidade
            console.log("TASKIFY_RETRO_MUSIC: Música pausada devido à aba ficar inativa.");
        }
    } else {
        // A página ficou visível novamente
        if (shouldResumeMusicOnFocus && userInteractedWithMusic) { // Só retoma se o usuário já interagiu
            playRetrospectiveMusic();
            console.log("TASKIFY_RETRO_MUSIC: Música retomada ao focar na aba.");
        }
        shouldResumeMusicOnFocus = false; // Reseta a flag
    }
}

// Adicionar o listener de visibilidade globalmente, mas com cuidado
if (typeof document !== 'undefined') {
    // Remove listener antigo para evitar duplicatas se o script for re-executado (raro, mas seguro)
    document.removeEventListener('visibilitychange', handleVisibilityChange);
    document.addEventListener('visibilitychange', handleVisibilityChange);
}


window.initializeRetrospectiveInternals = initializeRetrospectiveInternals;
window.openRetrospectiveView = openRetrospectiveView;
window.closeRetrospectiveView = closeRetrospectiveView;
</file>

<file path="js/script.js">
let weeklyChartInstance = null;
let pomodoroChartInstance = null;
let tasksChartInstance = null;
let pomodoroInterval = null;
let retrospectiveModalEl;
let retrospectiveModalOverlayEl;

// Elementos de áudio
let focusEndSound = null;
let breakEndSound = null;

// Variáveis para Drag and Drop de tarefas na lista principal
let draggedItem = null;

// Variáveis para Drag and Drop de tarefas no modal de padrão recorrente v2
let draggedPatternTaskItem_v2 = null;
let sourcePatternTaskList_v2 = null;
let currentEditingPatternTaskId_v2 = null;


// Flatpickr instances
let taskDatePicker = null;


window.showCustomAlert = showCustomAlert;
window.taskifyStateReady = false;

const PREDEFINED_PALETTES = {
    electricBlue: { name: 'Azul Elétrico', primary: '#0A7CFF' },
    emeraldGreen: { name: 'Verde Esmeralda', primary: '#00DB4D' },
    fieryRed: { name: 'Vermelho Ígneo', primary: '#D51818' },
    royalPurple: { name: 'Roxo Real', primary: '#852DD8' },
    sunnyOrange: { name: 'Laranja Solar', primary: '#FF8C00' }
};

const VISUAL_MODES = {
    default: { name: 'Padrão', icon: 'bi-display', subtitle: 'Experiência padrão Taskify' },
    focus: { name: 'Foco Total', icon: 'bi-bullseye', subtitle: 'Interface minimalista, menos distrações' },
    night: { name: 'Profundo da Noite', icon: 'bi-moon-stars', subtitle: 'Cores escuras e suaves para seus olhos' },
    motivational: { name: 'Energia Vibrante', icon: 'bi-lightning-charge', subtitle: 'Cores dinâmicas para te inspirar' }
};

const SINGLE_ROUTINE_ID = "minhaUnicaRotinaSemanal";

const initialDefaultState = {
    todayCount: 0,
    lastAccessDate: new Date().toDateString(),
    goals: {
        daily: 20,
        weekly: 50,
        monthly: 1200,
        yearly: 20000,
        streak: 30
    },
    weeklyProgress: 0,
    monthlyProgress: 0,
    yearlyProgress: 0,
    weeklyActivityData: [0, 0, 0, 0, 0, 0, 0],
    dailyRecord: {
        value: 0,
        date: "-"
    },
    currentStreak: {
        days: 0,
        lastCompletionDate: null,
        history: {}
    },
    peakActivity: {
        dayName: "-",
        questions: 0
    },
    isDarkMode: true,
    lastWeekStartDate: getStartOfWeek(new Date()).toDateString(),
    lastMonthStartDate: getStartOfMonth(new Date()).toDateString(),
    lastYearStartDate: getStartOfYear(new Date()).toDateString(),
    pomodoro: {
        timerRunning: false,
        currentTime: 25 * 60,
        mode: 'focus',
        focusDuration: 25 * 60,
        shortBreakDuration: 5 * 60,
        longBreakDuration: 15 * 60,
        cyclesBeforeLongBreak: 4,
        currentCycleInSet: 0,
        totalPomodorosToday: 0,
        sessions: [],
        autoStartBreaks: false,
        autoStartFocus: false,
        enableSound: true,
        lastModeEnded: null,
        dailyFocusData: [0, 0, 0, 0, 0, 0, 0]
    },
    tasks: [],
    dailyTaskCompletionData: [0, 0, 0, 0, 0, 0, 0],
    recurringTaskPatterns: [],
    visuals: {
        currentPalette: 'electricBlue',
        currentVisualMode: 'default'
    }
};

let state = JSON.parse(JSON.stringify(initialDefaultState));
window.state = state;

function getStartOfWeek(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1);
    return new Date(d.setDate(diff));
}

function getStartOfMonth(date) {
    return new Date(date.getFullYear(), date.getMonth(), 1);
}

function getStartOfYear(date) {
    return new Date(date.getFullYear(), 0, 1);
}

function getLast7DayLabels() {
    const dayNames = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"];
    const labels = [];
    const today = new Date();
    for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        labels.push(dayNames[date.getDay()]);
    }
    return labels;
}

function hexToRgba(hex, alpha = 1) {
    if (!hex || typeof hex !== 'string') return `rgba(0,0,0,${alpha})`;
    const hexVal = hex.startsWith('#') ? hex.slice(1) : hex;
    if (hexVal.length !== 3 && hexVal.length !== 6) return `rgba(0,0,0,${alpha})`;

    let r, g, b;
    if (hexVal.length === 3) {
        r = parseInt(hexVal[0] + hexVal[0], 16);
        g = parseInt(hexVal[1] + hexVal[1], 16);
        b = parseInt(hexVal[2] + hexVal[2], 16);
    } else {
        r = parseInt(hexVal.substring(0, 2), 16);
        g = parseInt(hexVal.substring(2, 4), 16);
        b = parseInt(hexVal.substring(4, 6), 16);
    }
    return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

function hexToRgbArray(hex) {
    if (!hex || typeof hex !== 'string') return null;
    let c = hex.substring(1);
    if (c.length === 3) {
        c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];
    }
    if (c.length !== 6) {
        return null;
    }
    try {
        const bigint = parseInt(c, 16);
        if (isNaN(bigint)) return null;
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return [r, g, b];
    } catch (e) {
        console.error("Erro ao converter hex para RGB:", hex, e);
        return null;
    }
}


function formatUnit(value, singularUnit, pluralUnit) {
    const val = parseInt(value, 10);
    if (isNaN(val)) return `0 ${pluralUnit}`;
    return `${val} ${val === 1 ? singularUnit : pluralUnit}`;
}

function getTodayISO() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

function formatDateToDDMMYYYY(isoDateString) {
    if (!isoDateString) return '';
    const dateParts = isoDateString.split('-');
    if (dateParts.length === 3) {
        return `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;
    }
    return isoDateString;
}

function formatDateToISO(ddmmyyyyString) {
    if (!ddmmyyyyString) return null;
    const parts = ddmmyyyyString.split('/');
    if (parts.length === 3) {
        return `${parts[2]}-${parts[1]}-${parts[0]}`;
    }
    return null;
}


function loadState() {
    let themeToApply = initialDefaultState.isDarkMode;
    let primaryColorToApply = PREDEFINED_PALETTES[initialDefaultState.visuals.currentPalette].primary;
    let currentPaletteName = initialDefaultState.visuals.currentPalette;
    let currentVisualModeName = initialDefaultState.visuals.currentVisualMode;

    const savedThemeSetting = localStorage.getItem('taskify-theme');
    if (savedThemeSetting !== null) {
        themeToApply = savedThemeSetting === 'dark';
    }

    const savedPrimaryColor = localStorage.getItem('taskify-primary-color');
    if (savedPrimaryColor) {
        primaryColorToApply = savedPrimaryColor;
    }

    const savedPaletteName = localStorage.getItem('taskify-palette');
    if (savedPaletteName && PREDEFINED_PALETTES[savedPaletteName]) {
        currentPaletteName = savedPaletteName;
        primaryColorToApply = PREDEFINED_PALETTES[currentPaletteName].primary;
    } else if (savedPaletteName === 'custom' && savedPrimaryColor) {
        currentPaletteName = 'custom';
        primaryColorToApply = savedPrimaryColor;
    } else {
        currentPaletteName = initialDefaultState.visuals.currentPalette;
        primaryColorToApply = PREDEFINED_PALETTES[currentPaletteName].primary;
    }

    const savedVisualMode = localStorage.getItem('taskify-visual-mode');
    if (savedVisualMode && VISUAL_MODES[savedVisualMode]) {
        currentVisualModeName = savedVisualMode;
    }

    document.documentElement.style.setProperty('--primary-color-light', primaryColorToApply);
    document.documentElement.style.setProperty('--primary-color-dark', primaryColorToApply);
    const rgbArray = hexToRgbArray(primaryColorToApply);
    if (rgbArray) {
        document.documentElement.style.setProperty('--primary-color-light-rgb', rgbArray.join(', '));
        document.documentElement.style.setProperty('--primary-color-dark-rgb', rgbArray.join(', '));
    }


    let loadedState = null;
    try {
        const savedStateString = localStorage.getItem('taskify-state');
        if (savedStateString) {
            loadedState = JSON.parse(savedStateString);
        }
    } catch (e) {
        console.error("Error parsing 'taskify-state' from localStorage:", e);
        localStorage.removeItem('taskify-state');
    }

    if (loadedState) {
        state = {
            ...JSON.parse(JSON.stringify(initialDefaultState)),
            ...loadedState,
            goals: { ...initialDefaultState.goals, ...(loadedState.goals || {}) },
            dailyRecord: { ...initialDefaultState.dailyRecord, ...(loadedState.dailyRecord || {}) },
            peakActivity: { ...initialDefaultState.peakActivity, ...(loadedState.peakActivity || {}) },
            weeklyActivityData: (loadedState.weeklyActivityData && Array.isArray(loadedState.weeklyActivityData) && loadedState.weeklyActivityData.length === 7)
                ? loadedState.weeklyActivityData.map(v => (typeof v === 'number' && !isNaN(v) ? v : 0))
                : [...initialDefaultState.weeklyActivityData],
            tasks: (loadedState.tasks && Array.isArray(loadedState.tasks))
                ? loadedState.tasks.map(task => ({
                    ...task,
                    assignedDate: task.assignedDate || null,
                    sourcePatternId: task.sourcePatternId || null,
                    isRecurringInstance: task.isRecurringInstance || false
                }))
                : [...initialDefaultState.tasks],
            recurringTaskPatterns: (loadedState.recurringTaskPatterns && Array.isArray(loadedState.recurringTaskPatterns))
                ? loadedState.recurringTaskPatterns.map(p => ({
                    ...p,
                    id: SINGLE_ROUTINE_ID,
                    tasksByDay: p.tasksByDay && typeof p.tasksByDay === 'object'
                        ? {
                            0: Array.isArray(p.tasksByDay[0]) ? p.tasksByDay[0].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            1: Array.isArray(p.tasksByDay[1]) ? p.tasksByDay[1].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            2: Array.isArray(p.tasksByDay[2]) ? p.tasksByDay[2].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            3: Array.isArray(p.tasksByDay[3]) ? p.tasksByDay[3].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            4: Array.isArray(p.tasksByDay[4]) ? p.tasksByDay[4].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            5: Array.isArray(p.tasksByDay[5]) ? p.tasksByDay[5].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                            6: Array.isArray(p.tasksByDay[6]) ? p.tasksByDay[6].map(taskDef => ({ ...taskDef, completed: taskDef.completed || false })) : [],
                        }
                        : { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] }
                })).slice(0, 1)
                : [...initialDefaultState.recurringTaskPatterns],
            dailyTaskCompletionData: (loadedState.dailyTaskCompletionData && Array.isArray(loadedState.dailyTaskCompletionData) && loadedState.dailyTaskCompletionData.length === 7)
                ? loadedState.dailyTaskCompletionData.map(v => (typeof v === 'number' && !isNaN(v) ? v : 0))
                : [...initialDefaultState.dailyTaskCompletionData],
            visuals: { ...initialDefaultState.visuals, ...(loadedState.visuals || {}) },
        };

        if (state.recurringTaskPatterns.length > 0 && state.recurringTaskPatterns[0].id !== SINGLE_ROUTINE_ID) {
            state.recurringTaskPatterns[0].id = SINGLE_ROUTINE_ID;
        }


        const numericKeys = ['todayCount', 'weeklyProgress', 'monthlyProgress', 'yearlyProgress'];
        numericKeys.forEach(key => {
            if (typeof state[key] !== 'number' || isNaN(state[key])) {
                console.warn(`Sanitizing state.${key}: was ${state[key]}, setting to ${initialDefaultState[key]}`);
                state[key] = initialDefaultState[key];
            }
        });

        state.lastAccessDate = loadedState.lastAccessDate || initialDefaultState.lastAccessDate;
        state.lastWeekStartDate = loadedState.lastWeekStartDate || initialDefaultState.lastWeekStartDate;
        state.lastMonthStartDate = loadedState.lastMonthStartDate || initialDefaultState.lastMonthStartDate;
        state.lastYearStartDate = loadedState.lastYearStartDate || initialDefaultState.lastYearStartDate;

        const pomodoroLoadedState = loadedState.pomodoro || {};
        state.pomodoro = {
            ...initialDefaultState.pomodoro,
            ...pomodoroLoadedState,
            timerRunning: false,
            enableSound: typeof pomodoroLoadedState.enableSound === 'boolean' ? pomodoroLoadedState.enableSound : initialDefaultState.pomodoro.enableSound,
            dailyFocusData: (pomodoroLoadedState.dailyFocusData && Array.isArray(pomodoroLoadedState.dailyFocusData) && pomodoroLoadedState.dailyFocusData.length === 7)
                ? pomodoroLoadedState.dailyFocusData.map(v => (typeof v === 'number' && !isNaN(v) ? v : 0))
                : [...initialDefaultState.pomodoro.dailyFocusData]
        };
        if (!(pomodoroLoadedState.timerRunning && pomodoroLoadedState.currentTime > 0)) {
            if (state.pomodoro.mode === 'focus') state.pomodoro.currentTime = state.pomodoro.focusDuration;
            else if (state.pomodoro.mode === 'shortBreak') state.pomodoro.currentTime = state.pomodoro.shortBreakDuration;
            else if (state.pomodoro.mode === 'longBreak') state.pomodoro.currentTime = state.pomodoro.longBreakDuration;
            state.pomodoro.lastModeEnded = pomodoroLoadedState.lastModeEnded || null;
        }

    } else {
        state = JSON.parse(JSON.stringify(initialDefaultState));
    }
    state.isDarkMode = themeToApply;
    state.visuals.currentPalette = currentPaletteName;
    state.visuals.currentVisualMode = currentVisualModeName;

    window.state = state;
}

function saveState() {
    try {
        const stateToSave = { ...state };
        if (stateToSave.recurringTaskPatterns && stateToSave.recurringTaskPatterns.length > 0) {
            stateToSave.recurringTaskPatterns[0].id = SINGLE_ROUTINE_ID;
        }
        localStorage.setItem('taskify-state', JSON.stringify(stateToSave));
        localStorage.setItem('taskify-theme', state.isDarkMode ? 'dark' : 'light');

        if (state.visuals.currentPalette === 'custom') {
            localStorage.setItem('taskify-primary-color', getComputedStyle(document.documentElement).getPropertyValue('--primary-color-dark').trim());
        } else if (PREDEFINED_PALETTES[state.visuals.currentPalette]) {
            localStorage.setItem('taskify-primary-color', PREDEFINED_PALETTES[state.visuals.currentPalette].primary);
        } else {
            localStorage.setItem('taskify-primary-color', PREDEFINED_PALETTES.electricBlue.primary);
        }
        localStorage.setItem('taskify-palette', state.visuals.currentPalette);
        localStorage.setItem('taskify-visual-mode', state.visuals.currentVisualMode);

    } catch (e) {
        console.error("Error saving state to localStorage:", e);
    }
}

function checkAllResets() {
    const prevLastAccessDate = state.lastAccessDate;
    const todayStr = new Date().toDateString();

    checkAndResetDailyCounters(todayStr);
    checkAndResetWeeklyCounters();
    checkAndResetMonthlyCounters();
    checkAndResetYearlyCounters();

    if (state.pomodoro && state.lastAccessDate !== todayStr) {
        if (state.pomodoro.totalPomodorosToday > 0) {
            state.pomodoro.totalPomodorosToday = 0;
        }
        state.pomodoro.sessions = state.pomodoro.sessions.filter(session => {
            try {
                const sessionDate = new Date(session.startTime);
                return sessionDate.toDateString() === todayStr;
            } catch (e) { return false; }
        });
    }

    if (state.lastAccessDate !== prevLastAccessDate) {
        updateUI();
        updatePomodoroChartDataOnly();
        updateTasksChartDataOnly();
        updateWeeklyChartDataOnly();
    }

    if (state.lastAccessDate !== todayStr) {
        state.lastAccessDate = todayStr;
    }
    saveState();
}

function checkAndResetDailyCounters(todayStr) {
    if (state.lastAccessDate !== todayStr) {
        state.todayCount = 0;
        state.tasks.forEach(task => {
            if (task.deletedThisInstanceOfDay) {
                delete task.deletedThisInstanceOfDay;
            }
        });

        const shiftArray = (arr) => {
            if (arr && Array.isArray(arr) && arr.length === 7) {
                arr.shift();
                arr.push(0);
            } else {
                return [0, 0, 0, 0, 0, 0, 0];
            }
            return arr;
        };

        state.weeklyActivityData = shiftArray(state.weeklyActivityData);
        updatePeakActivity();

        const newDailyFocusData = Array(7).fill(0);
        const todayDate = new Date();
        for (let d = 0; d < 7; d++) {
            const dateToCheck = new Date(todayDate);
            dateToCheck.setDate(todayDate.getDate() - (6 - d));
            const dateToCheckISO = dateToCheck.toISOString().split('T')[0];

            let focusForThisDay = 0;
            if (state.pomodoro && state.pomodoro.sessions && Array.isArray(state.pomodoro.sessions)) {
                state.pomodoro.sessions.forEach(session => {
                    if (session.type === 'focus' && new Date(session.startTime).toISOString().split('T')[0] === dateToCheckISO) {
                        focusForThisDay += Math.round((session.duration || 0) / 60);
                    }
                });
            }
            newDailyFocusData[d] = focusForThisDay;
        }
        state.pomodoro.dailyFocusData = newDailyFocusData;
        state.dailyTaskCompletionData = shiftArray(state.dailyTaskCompletionData);

        if (state.recurringTaskPatterns.length > 0) {
            const routine = state.recurringTaskPatterns[0];
            for (const dayKey in routine.tasksByDay) {
                routine.tasksByDay[dayKey].forEach(taskDef => taskDef.completed = false);
            }
        }
    }
}


function checkAndResetWeeklyCounters() {
    const currentWeekStartStr = getStartOfWeek(new Date()).toDateString();
    if (state.lastWeekStartDate !== currentWeekStartStr) {
        state.weeklyProgress = 0;
        state.lastWeekStartDate = currentWeekStartStr;
    }
}

function checkAndResetMonthlyCounters() {
    const currentMonthStartStr = getStartOfMonth(new Date()).toDateString();
    if (state.lastMonthStartDate !== currentMonthStartStr) {
        state.monthlyProgress = 0;
        state.lastMonthStartDate = currentMonthStartStr;
    }
}

function checkAndResetYearlyCounters() {
    const currentYearStartStr = getStartOfYear(new Date()).toDateString();
    if (state.lastYearStartDate !== currentYearStartStr) {
        state.yearlyProgress = 0;
        state.lastYearStartDate = currentYearStartStr;
    }
}

function updateCircularProgress(elementId, current, target) {
    const circle = document.getElementById(elementId);
    if (!circle) return;
    const radius = 52;
    const circumference = 2 * Math.PI * radius;
    if (circle.style.strokeDasharray !== `${circumference} ${circumference}`) {
        circle.style.strokeDasharray = `${circumference} ${circumference}`;
    }
    const progress = target > 0 ? Math.min(current / target, 1) : 0;
    const dashoffsetValue = circumference * (1 - progress);
    circle.style.strokeDashoffset = dashoffsetValue;
}

function updateUI() {
    const setText = (id, value) => {
        const el = document.getElementById(id);
        if (el) {
            el.textContent = (typeof value === 'number' && isNaN(value)) ? '0' : value;
        }
    };

    setText('today-count', state.todayCount);
    setText('today-target', state.goals.daily);
    updateCircularProgress('today-progress', state.todayCount, state.goals.daily);

    setText('week-count', state.weeklyProgress);
    setText('week-target', state.goals.weekly);
    updateCircularProgress('week-progress', state.weeklyProgress, state.goals.weekly);

    setText('month-count', state.monthlyProgress);
    setText('month-target', state.goals.monthly);
    updateCircularProgress('month-progress', state.monthlyProgress, state.goals.monthly);

    setText('year-count', state.yearlyProgress);
    setText('year-target', state.goals.yearly);
    updateCircularProgress('year-progress', state.yearlyProgress, state.goals.yearly);

    setText('daily-record-value', formatUnit(state.dailyRecord.value, "questão", "questões"));
    setText('daily-record-date', state.dailyRecord.date || "-");
    updateStreakUI();
    setText('peak-activity-day', state.peakActivity.dayName || "-");
    setText('peak-activity-questions', formatUnit(state.peakActivity.questions, "questão", "questões"));

    const streakTargetValueEl = document.getElementById('streak-target-value');
    if (streakTargetValueEl) {
        streakTargetValueEl.textContent = state.goals.streak;
    }

    const dailyGoalInput = document.getElementById('daily-goal-input');
    if (dailyGoalInput) dailyGoalInput.value = state.goals.daily;
    const weeklyGoalInput = document.getElementById('weekly-goal-input');
    if (weeklyGoalInput) weeklyGoalInput.value = state.goals.weekly;
    const monthlyGoalInput = document.getElementById('monthly-goal-input');
    if (monthlyGoalInput) monthlyGoalInput.value = state.goals.monthly;
    const yearlyGoalInput = document.getElementById('yearly-goal-input');
    if (yearlyGoalInput) yearlyGoalInput.value = state.goals.yearly;
    const streakGoalInput = document.getElementById('streak-goal-input');
    if (streakGoalInput) streakGoalInput.value = state.goals.streak;


    updateWeeklyChartDataOnly();
    updatePomodoroChartDataOnly();
    updateTasksChartDataOnly();

    updatePomodoroUI();
    renderTasks();
    updateScrollIndicator();
    updateCounterTooltips(); // Adicionado para atualizar os tooltips do contador
}

function updateDailyRecord() {
    const todayLocaleDate = new Date().toLocaleDateString('pt-BR', { day: 'numeric', month: 'long' });
    if (state.todayCount > state.dailyRecord.value) {
        state.dailyRecord.value = state.todayCount;
        state.dailyRecord.date = todayLocaleDate;
    } else if (state.dailyRecord.date === todayLocaleDate && state.todayCount < state.dailyRecord.value) {
        state.dailyRecord.value = state.todayCount;
    }
}

function getStepValue() {
    const stepInput = document.getElementById('questions-step-input');
    let step = parseInt(stepInput.value, 10);
    if (isNaN(step) || step < 1) {
        step = 1;
        stepInput.value = "1";
    }
    return step;
}

// Função para atualizar os tooltips do contador de questões
function updateCounterTooltips() {
    const step = getStepValue();
    const decrementBtn = document.getElementById('decrement-btn');
    const incrementBtn = document.getElementById('increment-btn');
    const stepInput = document.getElementById('questions-step-input');

    if (decrementBtn) {
        decrementBtn.title = `Diminuir ${step} ${step === 1 ? 'questão' : 'questões'}`;
    }
    if (incrementBtn) {
        incrementBtn.title = `Aumentar ${step} ${step === 1 ? 'questão' : 'questões'}`;
    }
    if (stepInput) {
        stepInput.title = "Define a quantidade de questões por clique";
    }
}


function incrementToday() {
    checkAllResets();
    const step = getStepValue();
    state.todayCount += step;
    state.weeklyProgress += step;
    state.monthlyProgress += step;
    state.yearlyProgress += step;

    if (state.weeklyActivityData && state.weeklyActivityData.length === 7) {
        state.weeklyActivityData[6] += step;
    }

    updateDailyRecord();
    updatePeakActivity();
    updateStreak();
    saveState();
    updateUI();
}

function decrementToday() {
    checkAllResets();
    const step = getStepValue();
    const newTodayCount = Math.max(0, state.todayCount - step);
    const actualDecrementAmount = state.todayCount - newTodayCount;

    state.todayCount = newTodayCount;

    if (actualDecrementAmount > 0) {
        state.weeklyProgress = Math.max(0, state.weeklyProgress - actualDecrementAmount);
        state.monthlyProgress = Math.max(0, state.monthlyProgress - actualDecrementAmount);
        state.yearlyProgress = Math.max(0, state.yearlyProgress - actualDecrementAmount);

        if (state.weeklyActivityData && state.weeklyActivityData.length === 7) {
            state.weeklyActivityData[6] = Math.max(0, state.weeklyActivityData[6] - actualDecrementAmount);
        }
    }
    updateDailyRecord();
    updatePeakActivity();
    updateStreak();
    saveState();
    updateUI();
}

function updatePeakActivity() {
    let maxQuestions = 0;
    let peakDayOriginalIndex = -1;

    if (!Array.isArray(state.weeklyActivityData) || state.weeklyActivityData.length !== 7) {
        state.peakActivity = { dayName: "-", questions: 0 };
        return;
    }

    state.weeklyActivityData.forEach((count, index) => {
        const numCount = Number(count);
        if (!isNaN(numCount) && numCount >= maxQuestions) {
            maxQuestions = numCount;
            peakDayOriginalIndex = index;
        }
    });

    if (peakDayOriginalIndex !== -1 && maxQuestions > 0) {
        const today = new Date();
        const daysAgo = 6 - peakDayOriginalIndex;
        const peakDate = new Date(today);
        peakDate.setDate(today.getDate() - daysAgo);

        const dayNames = ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"];
        state.peakActivity.dayName = dayNames[peakDate.getDay()];
        state.peakActivity.questions = maxQuestions;
    } else {
        state.peakActivity.dayName = "-";
        state.peakActivity.questions = 0;
    }
}

function updateStreak() {
    const todayISO = new Date().toISOString().split('T')[0];
    const dailyGoal = state.goals.daily;
    const todayQuestions = state.todayCount;

    const streakDataString = localStorage.getItem('taskify-streak');
    let streakData;
    try {
        streakData = streakDataString ? JSON.parse(streakDataString) : { current: 0, lastValidDate: null, history: {} };
        if (typeof streakData.current !== 'number' || isNaN(streakData.current) || streakData.current < 0) streakData.current = 0;
        if (typeof streakData.history !== 'object' || streakData.history === null) streakData.history = {};
    } catch (e) {
        console.error("Error parsing streak data from localStorage:", e);
        streakData = { current: 0, lastValidDate: null, history: {} };
    }

    const goalMetToday = todayQuestions >= dailyGoal && dailyGoal > 0;
    const wasGoalMetForTodayInHistory = streakData.history[todayISO] !== undefined && Number(streakData.history[todayISO]) >= dailyGoal;

    if (goalMetToday) {
        if (!wasGoalMetForTodayInHistory) {
            addDayToStreak(streakData, todayISO, todayQuestions);
        }
        streakData.history[todayISO] = todayQuestions;
    } else {
        if (wasGoalMetForTodayInHistory) {
            removeDayFromStreak(streakData, todayISO);
        }
        delete streakData.history[todayISO];
    }

    if (streakData.lastValidDate && streakData.lastValidDate !== todayISO) {
        const lastValid = new Date(streakData.lastValidDate);
        const todayDateObj = new Date(todayISO);
        lastValid.setHours(0, 0, 0, 0);
        todayDateObj.setHours(0, 0, 0, 0);

        const diffTime = todayDateObj - lastValid;
        const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays > 1) {
            streakData.current = goalMetToday ? 1 : 0;
            streakData.lastValidDate = goalMetToday ? todayISO : null;
        }
    } else if (!streakData.lastValidDate && goalMetToday) {
        streakData.current = 1;
        streakData.lastValidDate = todayISO;
    }


    state.currentStreak.days = streakData.current;
    state.currentStreak.lastCompletionDate = streakData.lastValidDate;
    state.currentStreak.history = streakData.history;

    saveStreakData(streakData);
}

function addDayToStreak(streakData, dateISO, questions) {
    const yesterday = new Date(dateISO);
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayISO = yesterday.toISOString().split('T')[0];

    if (streakData.lastValidDate === dateISO) {
        streakData.history[dateISO] = questions;
        return;
    }

    if (streakData.lastValidDate === yesterdayISO || streakData.current === 0 || streakData.lastValidDate === null) {
        streakData.current += 1;
    } else {
        streakData.current = 1;
    }
    streakData.lastValidDate = dateISO;
    streakData.history[dateISO] = questions;
}

function removeDayFromStreak(streakData, dateISO) {
    if (streakData.lastValidDate === dateISO) {
        streakData.current = Math.max(0, streakData.current - 1);
        if (streakData.current === 0) {
            streakData.lastValidDate = null;
        } else {
            const yesterday = new Date(dateISO);
            yesterday.setDate(yesterday.getDate() - 1);
            const yesterdayISO = yesterday.toISOString().split('T')[0];
            streakData.lastValidDate = yesterdayISO;
        }
    }
    delete streakData.history[dateISO];
}


function saveStreakData(data) {
    localStorage.setItem('taskify-streak', JSON.stringify(data));
}

function updateStreakUI() {
    const setText = (id, value) => {
        const el = document.getElementById(id);
        if (el) el.textContent = value;
    };
    setText('current-streak-value', formatUnit(state.currentStreak.days, "dia", "dias"));

    const streakFillEl = document.getElementById('streak-progress-fill');
    if (streakFillEl) {
        const streakProgressPercent = state.goals.streak > 0 ? Math.min((state.currentStreak.days / state.goals.streak) * 100, 100) : 0;
        streakFillEl.style.width = `${streakProgressPercent}%`;
    }
}

function openGoalsModal() {
    const modal = document.getElementById('goals-modal');
    const overlay = document.getElementById('goals-modal-overlay');
    if (modal && overlay) {
        const dailyGoalInput = document.getElementById('daily-goal-input');
        if (dailyGoalInput) dailyGoalInput.value = state.goals.daily;
        const weeklyGoalInput = document.getElementById('weekly-goal-input');
        if (weeklyGoalInput) weeklyGoalInput.value = state.goals.weekly;
        const monthlyGoalInput = document.getElementById('monthly-goal-input');
        if (monthlyGoalInput) monthlyGoalInput.value = state.goals.monthly;
        const yearlyGoalInput = document.getElementById('yearly-goal-input');
        if (yearlyGoalInput) yearlyGoalInput.value = state.goals.yearly;
        const streakGoalInput = document.getElementById('streak-goal-input');
        if (streakGoalInput) streakGoalInput.value = state.goals.streak;

        overlay.classList.add('show');
        modal.classList.add('show');
        document.body.classList.add('modal-open');
    }
}

function closeGoalsModal() {
    const modal = document.getElementById('goals-modal');
    const overlay = document.getElementById('goals-modal-overlay');
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
    }
}

function saveGoals() {
    const daily = parseInt(document.getElementById('daily-goal-input').value);
    const weekly = parseInt(document.getElementById('weekly-goal-input').value);
    const monthly = parseInt(document.getElementById('monthly-goal-input').value);
    const yearly = parseInt(document.getElementById('yearly-goal-input').value);
    const streakGoal = parseInt(document.getElementById('streak-goal-input').value);

    if (isNaN(daily) || daily < 1 || isNaN(weekly) || weekly < 1 || isNaN(monthly) || monthly < 1 || isNaN(yearly) || yearly < 1 || isNaN(streakGoal) || streakGoal < 1) {
        showCustomAlert("Todas as metas devem ser números positivos.", "Erro de Validação"); return;
    }
    state.goals = { daily, weekly, monthly, yearly, streak: streakGoal };
    saveState();
    updateUI();
    updateStreak();
    closeGoalsModal();
}

function toggleTheme() {
    state.isDarkMode = !state.isDarkMode;
    applyCurrentThemeAndMode();
    saveState();
}

function applyPrimaryColor(color) {
    document.documentElement.style.setProperty('--primary-color-light', color);
    document.documentElement.style.setProperty('--primary-color-dark', color);
    const rgbArray = hexToRgbArray(color);
    if (rgbArray) {
        document.documentElement.style.setProperty('--primary-color-light-rgb', rgbArray.join(', '));
        document.documentElement.style.setProperty('--primary-color-dark-rgb', rgbArray.join(', '));
    }
}

function applyCurrentThemeAndMode() {
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    const faviconEl = document.getElementById('favicon');
    const docElement = document.documentElement;

    Object.keys(VISUAL_MODES).forEach(modeKey => {
        body.classList.remove(`theme-mode-${modeKey}`);
    });

    if (state.visuals.currentVisualMode && state.visuals.currentVisualMode !== 'default') {
        body.classList.add(`theme-mode-${state.visuals.currentVisualMode}`);
    }

    docElement.classList.toggle('light-theme-active', !state.isDarkMode);
    body.classList.toggle('light', !state.isDarkMode);

    if (themeIcon) {
        themeIcon.className = state.isDarkMode ? 'bi bi-moon-fill' : 'bi bi-sun-fill';
    }

    let currentPrimaryColor = PREDEFINED_PALETTES.electricBlue.primary;
    if (state.visuals.currentPalette === 'custom') {
        currentPrimaryColor = getComputedStyle(document.documentElement).getPropertyValue('--primary-color-dark').trim() || PREDEFINED_PALETTES.electricBlue.primary;
    } else if (PREDEFINED_PALETTES[state.visuals.currentPalette]) {
        currentPrimaryColor = PREDEFINED_PALETTES[state.visuals.currentPalette].primary;
    }

    if (getComputedStyle(document.documentElement).getPropertyValue('--primary-color-dark').trim() !== currentPrimaryColor) {
        applyPrimaryColor(currentPrimaryColor);
    }


    if (faviconEl) {
        const faviconBaseColor = currentPrimaryColor;
        const faviconSvg = `<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 24 24'><rect width='24' height='24' rx='4' fill='${faviconBaseColor}'/><path fill='white' d='M13.083 3.031a.5.5 0 0 0-.944-.313L5.986 13.41a.5.5 0 0 0 .38.738H11V21a.5.5 0 0 0 .893.33L17.83 10.33a.5.5 0 0 0-.743-.66l-3.087 2.7V3.57a.5.5 0 0 0-.5-.5zM12 4.553v5.377l2.49-2.18L12 4.553zm-1 5.92L8.046 13H11v-2.527z'/></svg>`;
        faviconEl.href = `data:image/svg+xml,${encodeURIComponent(faviconSvg)}`;
    }

    if (weeklyChartInstance) weeklyChartInstance.destroy();
    setupChart(false);
    if (pomodoroChartInstance) pomodoroChartInstance.destroy();
    setupPomodoroChart(false);
    if (tasksChartInstance) tasksChartInstance.destroy();
    setupTasksChart(false);

    updatePomodoroUI();
    renderTasks();
    updateThemeModalButtons();
}

function createChartConfig(canvasId, chartData, label, yAxisLabel, tooltipLabelPrefix, dataFormatter = (val) => val) {
    const chartCanvas = document.getElementById(canvasId);
    if (!chartCanvas) return null;
    const ctx = chartCanvas.getContext('2d');

    const primaryColor = getComputedStyle(document.documentElement).getPropertyValue(state.isDarkMode ? '--primary-color-dark' : '--primary-color-light').trim();
    const gridColor = state.isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.08)';
    const textColor = state.isDarkMode ? '#AAA' : '#555';
    const tooltipBackgroundColor = state.isDarkMode ? 'rgba(30, 30, 30, 0.85)' : 'rgba(255, 255, 255, 0.95)';
    const tooltipTextColor = state.isDarkMode ? '#FFFFFF' : '#222';
    const bodyBgColor = getComputedStyle(document.body).backgroundColor;

    const gradient = ctx.createLinearGradient(0, 0, 0, chartCanvas.height * 0.8);
    try {
        gradient.addColorStop(0, hexToRgba(primaryColor, 0.3));
        gradient.addColorStop(1, hexToRgba(primaryColor, 0));
    } catch (e) {
        gradient.addColorStop(0, 'rgba(0,122,255,0.3)');
        gradient.addColorStop(1, 'rgba(0,122,255,0)');
        console.warn("Chart gradient color fallback used for:", canvasId, e);
    }

    const dayLabels = getLast7DayLabels();

    return new Chart(ctx, {
        type: 'line',
        data: {
            labels: dayLabels,
            datasets: [{
                label: label,
                data: [...chartData],
                borderColor: primaryColor,
                backgroundColor: gradient,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: primaryColor,
                pointBorderColor: bodyBgColor,
                pointBorderWidth: 1.5,
                pointHoverBackgroundColor: primaryColor,
                pointHoverBorderColor: bodyBgColor,
                pointHoverBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 7,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: { duration: 0 },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: { color: gridColor, drawBorder: false },
                    ticks: { color: textColor, precision: 0, callback: dataFormatter },
                    title: { display: true, text: yAxisLabel, color: textColor, font: { size: 10 } },
                    afterDataLimits: (axis) => {
                        if (axis.max === 0 && axis.min === 0) {
                            axis.max = (yAxisLabel.toLowerCase().includes("minutos")) ? 10 : 1;
                        }
                    }
                },
                x: {
                    grid: { display: false },
                    ticks: { color: textColor }
                }
            },
            plugins: {
                legend: { display: false },
                tooltip: {
                    enabled: true, backgroundColor: tooltipBackgroundColor, titleColor: tooltipTextColor,
                    bodyColor: tooltipTextColor, titleFont: { weight: 'bold', size: 13 },
                    bodyFont: { size: 12 }, padding: 10, cornerRadius: 6,
                    borderColor: primaryColor, borderWidth: 1, displayColors: false,
                    callbacks: {
                        title: (items) => items[0].label,
                        label: (item) => `${tooltipLabelPrefix}: ${dataFormatter(item.raw)}`
                    }
                }
            },
            interaction: { mode: 'index', intersect: false },
            hover: { mode: 'nearest', intersect: true }
        }
    });
}

function setupChart(animateInitialRender = true) {
    if (weeklyChartInstance) weeklyChartInstance.destroy();
    const data = (window.state && Array.isArray(window.state.weeklyActivityData) && window.state.weeklyActivityData.length === 7)
        ? window.state.weeklyActivityData
        : [0, 0, 0, 0, 0, 0, 0];

    weeklyChartInstance = createChartConfig('weeklyActivityChart', data, 'Questões', 'Nº de Questões', 'Questões');
    if (weeklyChartInstance) weeklyChartInstance.options.animation.duration = animateInitialRender ? 800 : 0;
}
function updateWeeklyChartDataOnly() {
    if (!window.state || !Array.isArray(window.state.weeklyActivityData) || window.state.weeklyActivityData.length !== 7) {
        console.warn("TASKIFY_CHART: weeklyActivityData inválido ou ausente. Recriando gráfico.");
        setupChart(false);
        return;
    }
    if (weeklyChartInstance) {
        weeklyChartInstance.data.datasets[0].data = [...window.state.weeklyActivityData];
        weeklyChartInstance.update('none');
    } else {
        setupChart(false);
    }
}

function setupPomodoroChart(animateInitialRender = true) {
    if (pomodoroChartInstance) pomodoroChartInstance.destroy();
    const data = (state.pomodoro && Array.isArray(state.pomodoro.dailyFocusData) && state.pomodoro.dailyFocusData.length === 7)
        ? state.pomodoro.dailyFocusData
        : [0, 0, 0, 0, 0, 0, 0];
    pomodoroChartInstance = createChartConfig(
        'weeklyPomodoroFocusChart', data, 'Tempo de Foco', 'Minutos de Foco', 'Foco',
        (value) => value.toFixed(0) + ' min'
    );
    if (pomodoroChartInstance) pomodoroChartInstance.options.animation.duration = animateInitialRender ? 800 : 0;
}
function updatePomodoroChartDataOnly() {
    if (!state.pomodoro || !Array.isArray(state.pomodoro.dailyFocusData) || state.pomodoro.dailyFocusData.length !== 7) {
        console.warn("TASKIFY_CHART: Pomodoro dailyFocusData inválido ou ausente. Recriando gráfico.");
        setupPomodoroChart(false);
        return;
    }
    if (pomodoroChartInstance) {
        pomodoroChartInstance.data.datasets[0].data = [...state.pomodoro.dailyFocusData];
        pomodoroChartInstance.update('none');
    } else {
        setupPomodoroChart(false);
    }
}

function setupTasksChart(animateInitialRender = true) {
    if (tasksChartInstance) tasksChartInstance.destroy();
    const data = (Array.isArray(state.dailyTaskCompletionData) && state.dailyTaskCompletionData.length === 7)
        ? state.dailyTaskCompletionData
        : [0, 0, 0, 0, 0, 0, 0];
    tasksChartInstance = createChartConfig('weeklyTasksCompletedChart', data, 'Tarefas Concluídas', 'Nº de Tarefas', 'Tarefas');
    if (tasksChartInstance) tasksChartInstance.options.animation.duration = animateInitialRender ? 800 : 0;
}
function updateTasksChartDataOnly() {
    if (!Array.isArray(state.dailyTaskCompletionData) || state.dailyTaskCompletionData.length !== 7) {
        console.warn("TASKIFY_CHART: dailyTaskCompletionData inválido ou ausente. Recriando gráfico.");
        setupTasksChart(false);
        return;
    }
    if (tasksChartInstance) {
        tasksChartInstance.data.datasets[0].data = [...state.dailyTaskCompletionData];
        tasksChartInstance.update('none');
    } else {
        setupTasksChart(false);
    }
}

function initStreak() {
    const savedData = localStorage.getItem('taskify-streak');
    let initialStreakDays = 0;
    let initialLastCompletionDate = null;
    let initialHistory = {};

    if (savedData) {
        try {
            const streakData = JSON.parse(savedData);
            if (streakData && typeof streakData.current === 'number' && streakData.current >= 0) {
                initialStreakDays = streakData.current;
                initialLastCompletionDate = streakData.lastValidDate || null;
                initialHistory = (typeof streakData.history === 'object' && streakData.history !== null) ? streakData.history : {};
            } else {
                localStorage.removeItem('taskify-streak');
            }
        } catch (e) {
            console.error("Error parsing streak data in initStreak:", e);
            localStorage.removeItem('taskify-streak');
        }
    }

    state.currentStreak.days = initialStreakDays;
    state.currentStreak.lastCompletionDate = initialLastCompletionDate;
    state.currentStreak.history = initialHistory;

    const currentStreakDataToStore = {
        current: state.currentStreak.days,
        lastValidDate: state.currentStreak.lastCompletionDate,
        history: state.currentStreak.history
    };
    localStorage.setItem('taskify-streak', JSON.stringify(currentStreakDataToStore));

    updateStreak();
    updateStreakUI();
}

function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;
}

function updatePomodoroUI() {
    const pomodoro = state.pomodoro;
    const timerDisplay = document.getElementById('pomodoro-timer-display');
    const statusDisplay = document.getElementById('pomodoro-status');
    const cyclesCountValueDisplay = document.getElementById('pomodoro-cycles-count-value');
    const startBtn = document.getElementById('pomodoro-start-btn');
    const pauseBtn = document.getElementById('pomodoro-pause-btn');

    if (timerDisplay) timerDisplay.textContent = formatTime(pomodoro.currentTime);

    if (statusDisplay) {
        if (pomodoro.timerRunning) {
            statusDisplay.textContent = pomodoro.mode === 'focus' ? 'Foco Ativo...' : (pomodoro.mode === 'shortBreak' ? 'Pausa Curta...' : 'Pausa Longa...');
        } else {
            if (pomodoro.lastModeEnded) {
                const nextModeText = pomodoro.mode === 'focus' ? 'Foco' : (pomodoro.mode === 'shortBreak' ? 'Pausa Curta' : 'Pausa Longa');
                statusDisplay.textContent = `Próximo: ${nextModeText}`;
            } else {
                statusDisplay.textContent = `Pronto para ${pomodoro.mode === 'focus' ? 'focar?' : (pomodoro.mode === 'shortBreak' ? 'uma pausa curta?' : 'uma pausa longa?')}`;
            }
        }
    }

    if (cyclesCountValueDisplay) cyclesCountValueDisplay.textContent = pomodoro.totalPomodorosToday;

    if (startBtn && pauseBtn) {
        startBtn.style.display = pomodoro.timerRunning ? 'none' : 'inline-block';
        pauseBtn.style.display = pomodoro.timerRunning ? 'inline-block' : 'none';

        if (pomodoro.mode === 'focus') {
            startBtn.classList.remove('break-mode');
            if (timerDisplay) timerDisplay.classList.remove('break-mode');
        } else {
            startBtn.classList.add('break-mode');
            if (timerDisplay) timerDisplay.classList.add('break-mode');
        }

        if (!pomodoro.timerRunning) {
            const isAtFullDurationForCurrentMode = pomodoro.currentTime ===
                (pomodoro.mode === 'focus' ? pomodoro.focusDuration :
                    (pomodoro.mode === 'shortBreak' ? pomodoro.shortBreakDuration :
                        pomodoro.longBreakDuration));
            startBtn.textContent = isAtFullDurationForCurrentMode ? 'Iniciar' : 'Continuar';
        }
    }

    if (pomodoro.timerRunning) {
        document.title = `${formatTime(pomodoro.currentTime)} - ${pomodoro.mode === 'focus' ? 'Foco' : 'Pausa'} | Taskify`;
    } else {
        const dailyGoalPercentage = state.goals.daily > 0 ? Math.round((state.todayCount / state.goals.daily) * 100) : 0;
        document.title = `(${dailyGoalPercentage}%) Taskify`;
    }
}

function playSound(soundElement) {
    if (!soundElement) {
        console.warn("playSound: soundElement é nulo ou indefinido.");
        return;
    }
    if (typeof soundElement.play === 'function') {
        soundElement.currentTime = 0;
        soundElement.play()
            .catch(error => {
                console.warn(`TASKIFY_SOUND: Erro ao tocar som ${soundElement.id}:`, error);
            });
    } else {
        console.warn(`playSound: ${soundElement.id} não tem uma função play.`);
    }
}

function handlePomodoroTick() {
    if (!state.pomodoro.timerRunning) return;
    state.pomodoro.currentTime--;
    if (state.pomodoro.currentTime < 0) handlePomodoroCycleEnd();
    else updatePomodoroUI();
}

function handlePomodoroCycleEnd() {
    const endedMode = state.pomodoro.mode;
    let actualDurationSeconds = 0;

    if (endedMode === 'focus') actualDurationSeconds = state.pomodoro.focusDuration - Math.max(0, state.pomodoro.currentTime);
    else if (endedMode === 'shortBreak') actualDurationSeconds = state.pomodoro.shortBreakDuration - Math.max(0, state.pomodoro.currentTime);
    else actualDurationSeconds = state.pomodoro.longBreakDuration - Math.max(0, state.pomodoro.currentTime);

    if (endedMode === 'focus' && actualDurationSeconds > 0) {
        if (state.pomodoro.dailyFocusData && state.pomodoro.dailyFocusData.length === 7) {
            state.pomodoro.dailyFocusData[6] += Math.round(actualDurationSeconds / 60);
        }
        logPomodoroSession(endedMode, actualDurationSeconds);
        updatePomodoroChartDataOnly();
    }

    state.pomodoro.timerRunning = false;
    if (pomodoroInterval) {
        clearInterval(pomodoroInterval);
        pomodoroInterval = null;
    }

    let nextModeMessage = "";
    if (endedMode === 'focus') {
        state.pomodoro.totalPomodorosToday++;
        state.pomodoro.currentCycleInSet++;
        if (state.pomodoro.enableSound && focusEndSound) playSound(focusEndSound);
        if (state.pomodoro.currentCycleInSet >= state.pomodoro.cyclesBeforeLongBreak) {
            state.pomodoro.mode = 'longBreak';
            state.pomodoro.currentTime = state.pomodoro.longBreakDuration;
            state.pomodoro.currentCycleInSet = 0;
            nextModeMessage = "Hora da pausa longa!";
        } else {
            state.pomodoro.mode = 'shortBreak';
            state.pomodoro.currentTime = state.pomodoro.shortBreakDuration;
            nextModeMessage = "Hora da pausa curta!";
        }
    } else {
        if (state.pomodoro.enableSound && breakEndSound) playSound(breakEndSound);
        state.pomodoro.mode = 'focus';
        state.pomodoro.currentTime = state.pomodoro.focusDuration;
        nextModeMessage = "Hora de focar!";
    }
    state.pomodoro.lastModeEnded = endedMode;
    updatePomodoroUI();
    saveState();

    showCustomAlert(
        `Ciclo de ${endedMode === 'focus' ? 'Foco' : (endedMode === 'shortBreak' ? 'Pausa Curta' : 'Pausa Longa')} terminado! ${nextModeMessage}`,
        "Pomodoro",
        () => {
            const pomodoroSectionEl = document.querySelector('.pomodoro-section');
            if (pomodoroSectionEl) setTimeout(() => pomodoroSectionEl.scrollIntoView({ behavior: 'smooth', block: 'center' }), 100);
            const currentEndedMode = state.pomodoro.lastModeEnded;
            if ((currentEndedMode === 'focus' && state.pomodoro.autoStartBreaks) ||
                ((currentEndedMode === 'shortBreak' || currentEndedMode === 'longBreak') && state.pomodoro.autoStartFocus)) {
                startPomodoro();
            }
        }
    );
}


function startPomodoro() {
    if (state.pomodoro.timerRunning) return;
    checkAllResets();
    state.pomodoro.timerRunning = true;
    state.pomodoro.lastModeEnded = null;
    if (pomodoroInterval) clearInterval(pomodoroInterval);
    pomodoroInterval = setInterval(handlePomodoroTick, 1000);
    updatePomodoroUI();
    saveState();
}

function pausePomodoro() {
    if (!state.pomodoro.timerRunning) return;
    state.pomodoro.timerRunning = false;
    clearInterval(pomodoroInterval);
    pomodoroInterval = null;
    updatePomodoroUI();
    saveState();
}

function resetPomodoro() {
    const wasRunning = state.pomodoro.timerRunning;
    const endedMode = state.pomodoro.mode;
    const timeRemaining = state.pomodoro.currentTime;

    if (wasRunning && endedMode === 'focus') {
        let timeSpentSeconds = state.pomodoro.focusDuration - timeRemaining;
        if (timeSpentSeconds > 0) {
            if (state.pomodoro.dailyFocusData && state.pomodoro.dailyFocusData.length === 7) {
                state.pomodoro.dailyFocusData[6] += Math.round(timeSpentSeconds / 60);
            }
            logPomodoroSession(endedMode, timeSpentSeconds);
        }
    }

    state.pomodoro.timerRunning = false;
    clearInterval(pomodoroInterval);
    pomodoroInterval = null;
    state.pomodoro.lastModeEnded = null;
    if (state.pomodoro.mode === 'focus') state.pomodoro.currentTime = state.pomodoro.focusDuration;
    else if (state.pomodoro.mode === 'shortBreak') state.pomodoro.currentTime = state.pomodoro.shortBreakDuration;
    else if (state.pomodoro.mode === 'longBreak') state.pomodoro.currentTime = state.pomodoro.longBreakDuration;
    updatePomodoroUI();
    updatePomodoroChartDataOnly();
    saveState();
}

function openPomodoroSettingsModal() {
    const modal = document.getElementById('pomodoro-settings-modal');
    const overlay = document.getElementById('pomodoro-settings-modal-overlay');
    if (modal && overlay) {
        document.getElementById('pomodoro-focus-duration-input').value = state.pomodoro.focusDuration / 60;
        document.getElementById('pomodoro-short-break-duration-input').value = state.pomodoro.shortBreakDuration / 60;
        document.getElementById('pomodoro-long-break-duration-input').value = state.pomodoro.longBreakDuration / 60;
        document.getElementById('pomodoro-cycles-before-long-break-input').value = state.pomodoro.cyclesBeforeLongBreak;
        document.getElementById('pomodoro-auto-start-breaks-checkbox').checked = state.pomodoro.autoStartBreaks;
        document.getElementById('pomodoro-auto-start-focus-checkbox').checked = state.pomodoro.autoStartFocus;
        document.getElementById('pomodoro-enable-sound-checkbox').checked = state.pomodoro.enableSound;
        overlay.classList.add('show');
        modal.classList.add('show');
        document.body.classList.add('modal-open');
    }
}

function closePomodoroSettingsModal() {
    const modal = document.getElementById('pomodoro-settings-modal');
    const overlay = document.getElementById('pomodoro-settings-modal-overlay');
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
    }
}

function savePomodoroSettings() {
    const focusDuration = parseInt(document.getElementById('pomodoro-focus-duration-input').value) * 60;
    const shortBreakDuration = parseInt(document.getElementById('pomodoro-short-break-duration-input').value) * 60;
    const longBreakDuration = parseInt(document.getElementById('pomodoro-long-break-duration-input').value) * 60;
    const cyclesBeforeLongBreak = parseInt(document.getElementById('pomodoro-cycles-before-long-break-input').value);
    const autoStartBreaks = document.getElementById('pomodoro-auto-start-breaks-checkbox').checked;
    const autoStartFocus = document.getElementById('pomodoro-auto-start-focus-checkbox').checked;
    const enableSound = document.getElementById('pomodoro-enable-sound-checkbox').checked;

    if (isNaN(focusDuration) || focusDuration < 60 ||
        isNaN(shortBreakDuration) || shortBreakDuration < 60 ||
        isNaN(longBreakDuration) || longBreakDuration < 60 ||
        isNaN(cyclesBeforeLongBreak) || cyclesBeforeLongBreak < 1) {
        showCustomAlert("Configurações do Pomodoro inválidas. Verifique os valores (duração mínima de 1 minuto).", "Erro de Validação");
        return;
    }

    state.pomodoro.focusDuration = focusDuration;
    state.pomodoro.shortBreakDuration = shortBreakDuration;
    state.pomodoro.longBreakDuration = longBreakDuration;
    state.pomodoro.cyclesBeforeLongBreak = cyclesBeforeLongBreak;
    state.pomodoro.autoStartBreaks = autoStartBreaks;
    state.pomodoro.autoStartFocus = autoStartFocus;
    state.pomodoro.enableSound = enableSound;

    if (!state.pomodoro.timerRunning) {
        if (state.pomodoro.mode === 'focus') state.pomodoro.currentTime = state.pomodoro.focusDuration;
        else if (state.pomodoro.mode === 'shortBreak') state.pomodoro.currentTime = state.pomodoro.shortBreakDuration;
        else if (state.pomodoro.mode === 'longBreak') state.pomodoro.currentTime = state.pomodoro.longBreakDuration;
        state.pomodoro.lastModeEnded = null;
    }

    saveState();
    updatePomodoroUI();
    closePomodoroSettingsModal();
}

function logPomodoroSession(type, durationInSeconds) {
    if (durationInSeconds <= 0) return;
    const session = {
        startTime: new Date(Date.now() - durationInSeconds * 1000).toISOString(),
        endTime: new Date().toISOString(),
        duration: durationInSeconds,
        type: type
    };
    state.pomodoro.sessions.push(session);
}

function initPomodoro() {
    focusEndSound = document.getElementById('focus-end-sound');
    breakEndSound = document.getElementById('break-end-sound');
    const pomodoroSettingsForm = document.getElementById('pomodoro-settings-form');
    if (pomodoroSettingsForm) {
        pomodoroSettingsForm.addEventListener('submit', (e) => {
            e.preventDefault();
            savePomodoroSettings();
        });
    }
    const pomodoroSettingsModalOverlay = document.getElementById('pomodoro-settings-modal-overlay');
    if (pomodoroSettingsModalOverlay) {
        pomodoroSettingsModalOverlay.addEventListener('click', closePomodoroSettingsModal);
    }
    updatePomodoroUI();
}

function renderTasks() {
    const taskList = document.getElementById('task-list');
    if (!taskList) return;

    taskList.innerHTML = '';
    const todayISO = getTodayISO();

    generateRecurringTaskInstances();

    const tasksToDisplay = state.tasks.filter(task => {
        if (task.deletedThisInstanceOfDay && task.assignedDate === todayISO) {
            return false;
        }
        if (task.isRecurringInstance) {
            return task.assignedDate === todayISO;
        }
        return true;
    });


    const sortedTasks = [...tasksToDisplay].sort((a, b) => {
        if (a.completed !== b.completed) return a.completed ? 1 : -1;
        const aDateStr = a.assignedDate || "0000-00-00";
        const bDateStr = b.assignedDate || "0000-00-00";
        const aIsTodayOrNull = a.assignedDate === todayISO || a.assignedDate === null;
        const bIsTodayOrNull = b.assignedDate === todayISO || b.assignedDate === null;
        if (aIsTodayOrNull && !bIsTodayOrNull) return -1;
        if (!aIsTodayOrNull && bIsTodayOrNull) return 1;
        if (aDateStr < bDateStr) return -1;
        if (aDateStr > bDateStr) return 1;
        return new Date(a.createdAt) - new Date(b.createdAt);
    });


    if (sortedTasks.length === 0) {
        const emptyTaskMessage = document.createElement('li');
        emptyTaskMessage.className = 'task-list-empty-message';
        emptyTaskMessage.textContent = 'Nenhuma tarefa para hoje. Adicione algumas!';
        taskList.appendChild(emptyTaskMessage);
    } else {
        sortedTasks.forEach(task => {
            const li = document.createElement('li');
            li.className = 'task-item';
            if (task.completed) li.classList.add('completed');
            li.dataset.taskId = task.id;
            li.setAttribute('draggable', 'true');
            li.addEventListener('dragstart', handleDragStart);
            li.addEventListener('dragend', handleDragEnd);

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'task-item-checkbox';
            checkbox.checked = task.completed;
            checkbox.addEventListener('change', () => toggleTaskComplete(task.id, task.isRecurringInstance, task.sourcePatternId, task.originalPatternTaskId));

            const textSpan = document.createElement('span');
            textSpan.className = 'task-item-text';
            textSpan.textContent = task.text;

            if (task.isRecurringInstance || task.sourcePatternId) {
                const recurringIcon = document.createElement('i');
                recurringIcon.className = 'bi bi-arrow-repeat task-recurring-icon';
                recurringIcon.title = 'Tarefa Recorrente';
                textSpan.prepend(recurringIcon);
            }


            if (task.assignedDate && task.assignedDate !== todayISO) {
                const dateIndicator = document.createElement('span');
                dateIndicator.className = 'task-assigned-date-indicator';
                const assignedDateParts = task.assignedDate.split('-');
                const assignedDateObj = new Date(parseInt(assignedDateParts[0]), parseInt(assignedDateParts[1]) - 1, parseInt(assignedDateParts[2]));
                assignedDateObj.setHours(0, 0, 0, 0);
                const todayDateObj = new Date(); todayDateObj.setHours(0, 0, 0, 0);
                const tomorrowDateObj = new Date(todayDateObj); tomorrowDateObj.setDate(todayDateObj.getDate() + 1);
                const yesterdayDateObj = new Date(todayDateObj); yesterdayDateObj.setDate(todayDateObj.getDate() - 1);

                if (assignedDateObj.getTime() === yesterdayDateObj.getTime()) dateIndicator.textContent = 'Ontem';
                else if (assignedDateObj.getTime() === tomorrowDateObj.getTime()) dateIndicator.textContent = 'Amanhã';
                else dateIndicator.textContent = formatDateToDDMMYYYY(task.assignedDate);
                textSpan.appendChild(dateIndicator);
            } else if (task.assignedDate === todayISO && !task.isRecurringInstance) {
                const dateIndicator = document.createElement('span');
                dateIndicator.className = 'task-assigned-date-indicator';
                dateIndicator.textContent = 'Hoje';
                textSpan.appendChild(dateIndicator);
            }


            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'task-item-delete-btn';
            deleteBtn.innerHTML = '<i class="bi bi-trash3-fill"></i>';
            deleteBtn.setAttribute('aria-label', 'Deletar tarefa');
            deleteBtn.addEventListener('click', () => deleteTask(task.id));

            li.appendChild(checkbox);
            li.appendChild(textSpan);
            li.appendChild(deleteBtn);
            taskList.appendChild(li);
        });
    }
    updateTasksCounter();
}

function updateTasksCounter() {
    const tasksCounter = document.getElementById('tasks-counter');
    if (!tasksCounter) return;
    const todayISO = getTodayISO();
    const displayedTasks = state.tasks.filter(task => {
        if (task.deletedThisInstanceOfDay && task.assignedDate === todayISO) return false;
        if (task.isRecurringInstance) return task.assignedDate === getTodayISO();
        return true;
    });
    const completedDisplayedTasks = displayedTasks.filter(task => task.completed).length;
    tasksCounter.textContent = `${completedDisplayedTasks}/${displayedTasks.length}`;
}


function addTask(event) {
    event.preventDefault();
    checkAllResets();
    const taskInput = document.getElementById('task-input');
    const taskText = taskInput.value.trim();
    const selectedDates = taskDatePicker.selectedDates;
    let assignedDateValue = null;
    if (selectedDates.length > 0) {
        const dateObj = selectedDates[0];
        const year = dateObj.getFullYear();
        const month = String(dateObj.getMonth() + 1).padStart(2, '0');
        const day = String(dateObj.getDate()).padStart(2, '0');
        assignedDateValue = `${year}-${month}-${day}`;
    }

    if (taskText === '') {
        showCustomAlert('Por favor, insira o texto da tarefa.', 'Tarefa Inválida');
        return;
    }

    const newTask = {
        id: Date.now().toString(),
        text: taskText,
        completed: false,
        createdAt: new Date().toISOString(),
        completionDate: null,
        assignedDate: assignedDateValue,
        isRecurringInstance: false,
        sourcePatternId: null
    };

    state.tasks.push(newTask);
    taskInput.value = '';
    taskDatePicker.setDate(new Date(), true);
    renderTasks();
    saveState();
}


function toggleTaskComplete(taskId, isRecurringInstance = false, sourcePatternId = null, originalPatternTaskId = null) {
    checkAllResets();
    const taskIndex = state.tasks.findIndex(t => t.id === taskId);
    if (taskIndex > -1) {
        const task = state.tasks[taskIndex];
        const wasCompleted = task.completed;
        task.completed = !task.completed;
        task.completionDate = task.completed ? new Date().toISOString() : null;

        const taskElement = document.querySelector(`.task-item[data-task-id="${taskId}"]`);
        if (taskElement) {
            taskElement.classList.toggle('completed', task.completed);
            const checkbox = taskElement.querySelector('.task-item-checkbox');
            if (checkbox) checkbox.checked = task.completed;
        }

        updateTasksCounter();

        const completionDateForChart = task.completed ? new Date(task.completionDate) : new Date();
        completionDateForChart.setHours(0, 0, 0, 0);
        const today = new Date(); today.setHours(0, 0, 0, 0);
        const oneDay = 24 * 60 * 60 * 1000;
        const diffDays = Math.round((today.getTime() - completionDateForChart.getTime()) / oneDay);

        if (diffDays >= 0 && diffDays < 7) {
            const dayIndexInChart = 6 - diffDays;
            if (state.dailyTaskCompletionData && state.dailyTaskCompletionData.length === 7 && dayIndexInChart >= 0 && dayIndexInChart < 7) {
                if (task.completed && !wasCompleted) state.dailyTaskCompletionData[dayIndexInChart]++;
                else if (!task.completed && wasCompleted) state.dailyTaskCompletionData[dayIndexInChart] = Math.max(0, state.dailyTaskCompletionData[dayIndexInChart] - 1);
            }
        }

        if (isRecurringInstance && sourcePatternId === SINGLE_ROUTINE_ID && task.assignedDate === getTodayISO()) {
            const routinePattern = state.recurringTaskPatterns.find(p => p.id === SINGLE_ROUTINE_ID);
            if (routinePattern) {
                const dayOfWeekToday = new Date().getDay();
                if (routinePattern.tasksByDay[dayOfWeekToday]) {
                    const routineTaskDef = routinePattern.tasksByDay[dayOfWeekToday].find(rt => rt.id === originalPatternTaskId);
                    if (routineTaskDef) {
                        routineTaskDef.completed = task.completed;
                        const modalRecurringTaskModal = document.getElementById('recurring-task-modal');
                        if (modalRecurringTaskModal && modalRecurringTaskModal.classList.contains('show')) {
                            const modalRoutineTaskCheckbox = modalRecurringTaskModal.querySelector(`.day-card-v2[data-day-index="${dayOfWeekToday}"] .task-item-recurrent-v2[data-task-id="${originalPatternTaskId}"] .task-routine-checkbox`);
                            if (modalRoutineTaskCheckbox) {
                                modalRoutineTaskCheckbox.checked = task.completed;
                            }
                        }
                    }
                }
            }
        }
        saveState();
        updateTasksChartDataOnly();
        if (task.completed || wasCompleted) renderTasks(); // Re-renderiza para atualizar a ordenação
    }
}


function deleteTask(taskId) {
    checkAllResets();
    const taskIndex = state.tasks.findIndex(t => t.id === taskId);
    if (taskIndex > -1) {
        const deletedTask = state.tasks[taskIndex];

        if (deletedTask.isRecurringInstance || deletedTask.sourcePatternId) {
            openDeleteRecurringTaskModal(deletedTask);
            return;
        }

        state.tasks.splice(taskIndex, 1);
        const taskElement = document.querySelector(`.task-item[data-task-id="${taskId}"]`);
        if (taskElement) taskElement.remove();
        updateTasksCounter();


        if (deletedTask.completed && deletedTask.completionDate) {
            const completionDateForChart = new Date(deletedTask.completionDate);
            completionDateForChart.setHours(0, 0, 0, 0);
            const today = new Date(); today.setHours(0, 0, 0, 0);
            const oneDay = 24 * 60 * 60 * 1000;
            const diffDays = Math.round((today.getTime() - completionDateForChart.getTime()) / oneDay);
            if (diffDays >= 0 && diffDays < 7) {
                const dayIndexInChart = 6 - diffDays;
                if (state.dailyTaskCompletionData && state.dailyTaskCompletionData.length === 7 && dayIndexInChart >= 0 && dayIndexInChart < 7) {
                    state.dailyTaskCompletionData[dayIndexInChart] = Math.max(0, state.dailyTaskCompletionData[dayIndexInChart] - 1);
                }
            }
        }
        if (state.tasks.filter(t => !(t.deletedThisInstanceOfDay && t.assignedDate === getTodayISO()) && (t.isRecurringInstance ? t.assignedDate === getTodayISO() : true)).length === 0) {
            renderTasks();
        }

        saveState();
        updateTasksChartDataOnly();
    }
}

function handleDragStart(e) {
    draggedItem = e.target;
    e.dataTransfer.effectAllowed = 'move';
    setTimeout(() => { if (draggedItem) draggedItem.classList.add('dragging'); }, 0);
}

function handleDragEnd(e) {
    if (draggedItem) draggedItem.classList.remove('dragging');
    draggedItem = null;
    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
}

function handleDragOver(e) {
    e.preventDefault();
    const taskList = document.getElementById('task-list');
    const afterElement = getDragAfterElement(taskList, e.clientY);
    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
    const placeholder = document.createElement('li');
    placeholder.classList.add('drag-over-placeholder');
    if (afterElement == null) taskList.appendChild(placeholder);
    else taskList.insertBefore(placeholder, afterElement);
}

function handleDrop(e) {
    e.preventDefault();
    if (!draggedItem) return;
    const taskList = document.getElementById('task-list');
    const draggedItemId = draggedItem.dataset.taskId;
    const originalIndex = state.tasks.findIndex(task => task.id === draggedItemId);
    if (originalIndex === -1) {
        console.error("Tarefa arrastada não encontrada no estado.");
        if (draggedItem) draggedItem.classList.remove('dragging');
        draggedItem = null;
        document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
        return;
    }
    const [movedTask] = state.tasks.splice(originalIndex, 1);
    const afterElement = getDragAfterElement(taskList, e.clientY);
    let newIndex;
    if (afterElement) {
        const afterElementId = afterElement.dataset.taskId;
        const targetIndexInState = state.tasks.findIndex(task => task.id === afterElementId);
        newIndex = targetIndexInState !== -1 ? targetIndexInState : state.tasks.length;
    } else {
        newIndex = state.tasks.length;
    }
    state.tasks.splice(newIndex, 0, movedTask);
    if (draggedItem) draggedItem.classList.remove('dragging');
    draggedItem = null;
    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
    renderTasks();
    saveState();
}


function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.task-item:not(.dragging)')];
    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) return { offset: offset, element: child };
        else return closest;
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}


function initTasks() {
    const taskForm = document.getElementById('task-form');
    if (taskForm) taskForm.addEventListener('submit', addTask);
    const taskList = document.getElementById('task-list');
    if (taskList) {
        taskList.addEventListener('dragover', handleDragOver);
        taskList.addEventListener('drop', handleDrop);
    }
    const taskDateInput = document.getElementById('task-assigned-date');
    if (taskDateInput && typeof flatpickr === 'function') {
        taskDatePicker = flatpickr(taskDateInput, {
            dateFormat: "d/m/Y", defaultDate: "today", locale: "pt", allowInput: true,
        });
    } else if (taskDateInput) {
        taskDateInput.value = getTodayISO(); taskDateInput.type = "date"; taskDateInput.placeholder = "";
    }
    renderTasks();
}

// --- Funções de Tarefas Recorrentes (NOVO MODAL - v2) ---

function openRecurringTaskPatternModal_v2() {
    const modal = document.getElementById('recurring-task-modal');
    const overlay = document.getElementById('recurring-task-modal-overlay');
    const newTaskTextInput = document.getElementById('new-task-text-input-v2');
    const modalSubtitle = document.getElementById('recurring-task-def-v2-modal-description');
    const footerTip = document.getElementById('recurring-modal-footer-tip');


    if (!modal || !overlay || !newTaskTextInput || !modalSubtitle || !footerTip) {
        console.error("Elementos do modal v2 não encontrados.");
        return;
    }

    modal.dataset.modalType = "recurring-task-definition-v2";
    currentEditingPatternTaskId_v2 = null;

    modalSubtitle.textContent = "Defina as tarefas para cada dia da sua semana e organize seus estudos de forma eficiente";
    newTaskTextInput.value = '';
    newTaskTextInput.placeholder = "Digite o nome da tarefa...";
    footerTip.textContent = "Dica: Clique nos dias para selecioná-los e adicionar tarefas. Você também pode arrastar tarefas entre os dias para reorganizar!";


    document.querySelectorAll('.day-card-v2').forEach(card => {
        card.classList.remove('selected');
        const taskList = card.querySelector('.day-card-v2-tasks');
        if (taskList) {
            taskList.innerHTML = '<span class="no-tasks-msg">Nenhuma tarefa</span>';
        }
    });
    updateSelectedDaysCount_v2();

    let patternToLoad = null;
    if (state.recurringTaskPatterns && state.recurringTaskPatterns.length > 0 && state.recurringTaskPatterns[0].id === SINGLE_ROUTINE_ID) {
        patternToLoad = state.recurringTaskPatterns[0];
    }

    if (patternToLoad && patternToLoad.tasksByDay) {
        renderTasksInDayCards_v2(patternToLoad.tasksByDay);
    } else {
        document.querySelectorAll('.day-card-v2-tasks').forEach(list => {
            if (list) list.innerHTML = '<span class="no-tasks-msg">Nenhuma tarefa</span>';
        });
    }
    updateDayTaskCounters_v2();
    updateTotalRoutineTasksCount_v2();


    const btnConfirmAdd = modal.querySelector('.btn-confirm-add-task-v2');
    if (btnConfirmAdd && btnConfirmAdd._taskifyListenerAttached !== true) {
        btnConfirmAdd.addEventListener('click', handleConfirmAddTask_v2);
        btnConfirmAdd._taskifyListenerAttached = true;
    }

    if (newTaskTextInput && newTaskTextInput._taskifyEnterListenerAttached !== true) {
        newTaskTextInput.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                handleConfirmAddTask_v2();
            }
        });
        newTaskTextInput._taskifyEnterListenerAttached = true;
    }

    modal.querySelectorAll('.day-card-v2').forEach(card => {
        if (card._taskifyCardListenerAttached !== true) {
            card.addEventListener('click', handleDayCardClick_v2);
            card._taskifyCardListenerAttached = true;
        }
        const taskListEl = card.querySelector('.day-card-v2-tasks');
        if (taskListEl && taskListEl._taskifyDragListenerAttached !== true) {
            taskListEl.addEventListener('dragover', handlePatternTaskDragOver_v2);
            taskListEl.addEventListener('drop', handlePatternTaskDrop_v2);
            taskListEl._taskifyDragListenerAttached = true;
        }
    });

    overlay.classList.add('show');
    modal.classList.add('show');
    document.body.classList.add('modal-open');
    newTaskTextInput.focus();
}


function closeRecurringTaskPatternModal() {
    const modal = document.getElementById('recurring-task-modal');
    const overlay = document.getElementById('recurring-task-modal-overlay');
    if (!modal || !overlay) return;

    modal.classList.remove('show');
    overlay.classList.remove('show');
    document.body.classList.remove('modal-open');
    currentEditingPatternTaskId_v2 = null;

    if (modal.dataset.modalType === "recurring-task-definition-v2") {
        const newTaskTextInput = document.getElementById('new-task-text-input-v2');
        if (newTaskTextInput) newTaskTextInput.value = '';

        document.querySelectorAll('.day-card-v2.selected').forEach(card => card.classList.remove('selected'));
        updateSelectedDaysCount_v2();
        document.querySelectorAll('.day-card-v2-tasks').forEach(list => {
            if (list) list.innerHTML = '<span class="no-tasks-msg">Nenhuma tarefa</span>';
        });
    }
}


function handleDayCardClick_v2(event) {
    if (event.target.closest('.btn-icon-recurrent-task-v2') || event.target.closest('.editing-task-input-v2') || event.target.closest('.task-routine-checkbox')) {
        return;
    }
    const card = event.currentTarget;
    card.classList.toggle('selected');
    updateSelectedDaysCount_v2();
}

function updateSelectedDaysCount_v2() {
    const countEl = document.getElementById('recurring-v2-selected-days-count');
    if (!countEl) return;
    const selectedCards = document.querySelectorAll('#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2.selected').length;
    if (selectedCards === 0) {
        countEl.textContent = "Nenhum dia selecionado";
    } else if (selectedCards === 1) {
        countEl.textContent = "1 dia selecionado";
    } else {
        countEl.textContent = `${selectedCards} dias selecionados`;
    }
}

function handleSelectAllDays_v2() {
    document.querySelectorAll('#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2').forEach(card => card.classList.add('selected'));
    updateSelectedDaysCount_v2();
}

function handleClearDaySelection_v2() {
    document.querySelectorAll('#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2.selected').forEach(card => card.classList.remove('selected'));
    updateSelectedDaysCount_v2();
}

function handleConfirmAddTask_v2() {
    const taskTextInput = document.getElementById('new-task-text-input-v2');
    const taskText = taskTextInput.value.trim();
    const selectedCards = document.querySelectorAll('#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2.selected');

    if (selectedCards.length === 0 && !currentEditingPatternTaskId_v2) {
        showCustomAlert("Selecione pelo menos um dia para adicionar a tarefa.", "Nenhum Dia Selecionado");
        return;
    }

    if (!taskText) {
        showCustomAlert("Por favor, digite o nome da tarefa.", "Tarefa Vazia");
        return;
    }

    if (currentEditingPatternTaskId_v2) {
        const routinePattern = state.recurringTaskPatterns.find(p => p.id === SINGLE_ROUTINE_ID);
        if (routinePattern && routinePattern.tasksByDay) {
            let taskUpdated = false;
            for (const dayIndex in routinePattern.tasksByDay) {
                const taskIndexToUpdate = routinePattern.tasksByDay[dayIndex].findIndex(t => t.id === currentEditingPatternTaskId_v2);
                if (taskIndexToUpdate > -1) {
                    routinePattern.tasksByDay[dayIndex][taskIndexToUpdate].text = taskText;
                    taskUpdated = true;
                }
            }
            if (taskUpdated) {
                renderTasksInDayCards_v2(routinePattern.tasksByDay);
                saveRecurringPatternDefinition_v2(false);
            }
        }
        currentEditingPatternTaskId_v2 = null;
    } else {
        selectedCards.forEach(card => {
            const taskList = card.querySelector('.day-card-v2-tasks');
            if (taskList) {
                const noTasksMsg = taskList.querySelector('.no-tasks-msg');
                if (noTasksMsg) noTasksMsg.remove();

                const newTaskData = {
                    id: `patternTask-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
                    text: taskText,
                    completed: false,
                    order: taskList.children.length
                };
                const taskItemEl = createPatternTaskItemElement_v2(newTaskData);
                taskList.appendChild(taskItemEl);
            }
        });
        saveRecurringPatternDefinition_v2(false);
    }
    taskTextInput.value = '';
    document.querySelectorAll('#recurring-task-modal .day-card-v2.selected').forEach(card => card.classList.remove('selected'));
    updateSelectedDaysCount_v2();
    updateDayTaskCounters_v2();
    updateTotalRoutineTasksCount_v2();
}

function createPatternTaskItemElement_v2(taskData) {
    const li = document.createElement('li');
    li.className = 'task-item-recurrent-v2 draggable';
    li.setAttribute('draggable', 'true');
    li.dataset.taskId = taskData.id || `tempId-${Date.now()}-${Math.random()}`;
    li.dataset.taskText = taskData.text;

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.className = 'task-routine-checkbox';
    checkbox.id = `chk-routine-${taskData.id}`;
    checkbox.checked = taskData.completed || false;
    checkbox.addEventListener('change', (e) => handleRoutineTaskCheckboxChange_v2(e, taskData.id));


    const textSpan = document.createElement('span');
    textSpan.className = 'task-text-recurrent-v2';
    textSpan.textContent = taskData.text;
    textSpan.addEventListener('click', () => {
        checkbox.checked = !checkbox.checked;
        const changeEvent = new Event('change', { bubbles: true });
        checkbox.dispatchEvent(changeEvent);
    });


    const actionsDiv = document.createElement('div');
    actionsDiv.className = 'task-actions-recurrent-v2';

    const editBtn = document.createElement('button');
    editBtn.type = 'button';
    editBtn.className = 'btn-icon-recurrent-task-v2 edit';
    editBtn.innerHTML = '<i class="bi bi-pencil"></i>';
    editBtn.title = "Editar Tarefa";
    editBtn.addEventListener('click', () => handleEditPatternTask_v2(taskData.id, taskData.text));

    const deleteBtn = document.createElement('button');
    deleteBtn.type = 'button';
    deleteBtn.className = 'btn-icon-recurrent-task-v2 delete';
    deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
    deleteBtn.title = "Excluir Tarefa da Rotina";
    deleteBtn.addEventListener('click', (e) => {
        handleDeletePatternTask_v2(e.currentTarget.closest('li'));
        saveRecurringPatternDefinition_v2(false);
        updateDayTaskCounters_v2();
        updateTotalRoutineTasksCount_v2();
    });

    actionsDiv.appendChild(editBtn);
    actionsDiv.appendChild(deleteBtn);

    li.appendChild(checkbox);
    li.appendChild(textSpan);
    li.appendChild(actionsDiv);

    li.addEventListener('dragstart', handlePatternTaskDragStart_v2);
    li.addEventListener('dragend', handlePatternTaskDragEnd_v2);

    return li;
}

function handleEditPatternTask_v2(taskId, currentText) {
    const taskTextInput = document.getElementById('new-task-text-input-v2');
    taskTextInput.value = currentText;
    taskTextInput.focus();
    taskTextInput.select();
    currentEditingPatternTaskId_v2 = taskId;

    document.querySelectorAll('#recurring-task-modal .day-card-v2.selected').forEach(card => card.classList.remove('selected'));
    updateSelectedDaysCount_v2();
}

function handleDeletePatternTask_v2(taskItemElement) {
    const taskIdToDelete = taskItemElement.dataset.taskId;

    const routinePattern = state.recurringTaskPatterns.find(p => p.id === SINGLE_ROUTINE_ID);
    if (routinePattern && routinePattern.tasksByDay) {
        for (const dayIndex in routinePattern.tasksByDay) {
            routinePattern.tasksByDay[dayIndex] = routinePattern.tasksByDay[dayIndex].filter(t => t.id !== taskIdToDelete);
        }
    }
    renderTasksInDayCards_v2(routinePattern ? routinePattern.tasksByDay : {});
}


function saveRecurringPatternDefinition_v2(closeModalAfterSave = true) {
    const dayCards = document.querySelectorAll('#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2');
    const tasksByDay = { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] }; // 0:Dom, 1:Seg, ..., 6:Sab

    dayCards.forEach(card => {
        const dayIndex = card.dataset.dayIndex; // Este é o dayIndex correto (0-6)
        const taskList = card.querySelector('.day-card-v2-tasks');
        if (taskList) {
            tasksByDay[dayIndex] = []; // Limpa para reconstruir com a ordem correta
            Array.from(taskList.children).forEach((taskItemEl, index) => {
                if (taskItemEl.classList.contains('task-item-recurrent-v2')) {
                    const taskTextEl = taskItemEl.querySelector('.task-text-recurrent-v2');
                    const checkboxEl = taskItemEl.querySelector('.task-routine-checkbox');
                    if (taskTextEl && checkboxEl) {
                        const text = taskTextEl.textContent;
                        tasksByDay[dayIndex].push({
                            id: taskItemEl.dataset.taskId,
                            text: text,
                            completed: checkboxEl.checked,
                            order: index
                        });
                    }
                }
            });
        }
    });


    const patternData = {
        id: SINGLE_ROUTINE_ID,
        name: "Minha Rotina Semanal",
        tasksByDay,
        updatedAt: new Date().toISOString()
    };

    const existingPatternIndex = state.recurringTaskPatterns.findIndex(p => p.id === SINGLE_ROUTINE_ID);

    if (existingPatternIndex > -1) {
        state.recurringTaskPatterns[existingPatternIndex] = {
            ...state.recurringTaskPatterns[existingPatternIndex],
            ...patternData
        };
    } else {
        patternData.startDate = getTodayISO();
        patternData.createdAt = new Date().toISOString();
        state.recurringTaskPatterns.push(patternData);
    }

    if (closeModalAfterSave) {
        closeRecurringTaskPatternModal();
    }
    generateRecurringTaskInstances();
    renderTasks();
    saveState();
    updateDayTaskCounters_v2();
    updateTotalRoutineTasksCount_v2();
}


function renderTasksInDayCards_v2(tasksByDay) {
    if (!tasksByDay || typeof tasksByDay !== 'object') {
        document.querySelectorAll('.day-card-v2-tasks').forEach(list => {
            if (list) list.innerHTML = '<span class="no-tasks-msg">Nenhuma tarefa</span>';
        });
        return;
    }

    const dayIndices = ["0", "1", "2", "3", "4", "5", "6"];

    dayIndices.forEach(dayIndex => {
        const dayCard = document.querySelector(`#recurring-task-modal[data-modal-type="recurring-task-definition-v2"] .day-card-v2[data-day-index="${dayIndex}"]`);
        if (dayCard) {
            const taskListEl = dayCard.querySelector('.day-card-v2-tasks');
            if (taskListEl) {
                taskListEl.innerHTML = '';
                const tasksForThisDay = tasksByDay[dayIndex];
                if (tasksForThisDay && Array.isArray(tasksForThisDay) && tasksForThisDay.length > 0) {
                    tasksForThisDay.sort((a, b) => (a.order || 0) - (b.order || 0)).forEach(taskDef => {
                        if (taskDef && typeof taskDef.text === 'string') {
                            if (parseInt(dayIndex) === new Date().getDay() && taskDef.id) {
                                const mainListTaskId = `${SINGLE_ROUTINE_ID}-${taskDef.id}-${getTodayISO()}`;
                                const mainListTask = state.tasks.find(t => t.id === mainListTaskId);
                                if (mainListTask) {
                                    taskDef.completed = mainListTask.completed;
                                }
                            }
                            const taskItemEl = createPatternTaskItemElement_v2(taskDef);
                            taskListEl.appendChild(taskItemEl);
                        }
                    });
                } else {
                    taskListEl.innerHTML = '<span class="no-tasks-msg">Nenhuma tarefa</span>';
                }
            }
        }
    });
    updateDayTaskCounters_v2();
    updateTotalRoutineTasksCount_v2();
}

function handleRoutineTaskCheckboxChange_v2(event, routineTaskId) {
    const checkbox = event.target;
    const isChecked = checkbox.checked;
    const dayCard = checkbox.closest('.day-card-v2');
    if (!dayCard) return;
    const dayIndex = dayCard.dataset.dayIndex;

    const routinePattern = state.recurringTaskPatterns.find(p => p.id === SINGLE_ROUTINE_ID);
    if (routinePattern && routinePattern.tasksByDay[dayIndex]) {
        const taskDef = routinePattern.tasksByDay[dayIndex].find(t => t.id === routineTaskId);
        if (taskDef) {
            taskDef.completed = isChecked;
        }
    }

    if (parseInt(dayIndex) === new Date().getDay()) {
        const mainListTaskId = `${SINGLE_ROUTINE_ID}-${routineTaskId}-${getTodayISO()}`;
        let mainListTask = state.tasks.find(t => t.id === mainListTaskId);

        if (mainListTask) {
            mainListTask.completed = isChecked;
            mainListTask.completionDate = isChecked ? new Date().toISOString() : null;
        } else {
            const taskDefForInstance = routinePattern?.tasksByDay[dayIndex]?.find(t => t.id === routineTaskId);
            if (taskDefForInstance) {
                const newTaskInstance = {
                    id: mainListTaskId,
                    text: taskDefForInstance.text,
                    completed: isChecked,
                    createdAt: new Date().toISOString(),
                    completionDate: isChecked ? new Date().toISOString() : null,
                    assignedDate: getTodayISO(),
                    sourcePatternId: SINGLE_ROUTINE_ID,
                    originalPatternTaskId: routineTaskId,
                    isRecurringInstance: true
                };
                state.tasks.push(newTaskInstance);
            }
        }
        renderTasks();
        updateTasksChartDataOnly();
    }
    saveRecurringPatternDefinition_v2(false);
}


function handlePatternTaskDragStart_v2(e) {
    draggedPatternTaskItem_v2 = e.target;
    sourcePatternTaskList_v2 = e.target.closest('.day-card-v2-tasks');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', e.target.dataset.taskId);
    setTimeout(() => { if (draggedPatternTaskItem_v2) draggedPatternTaskItem_v2.classList.add('dragging'); }, 0);
}

function handlePatternTaskDragEnd_v2(e) {
    if (draggedPatternTaskItem_v2) draggedPatternTaskItem_v2.classList.remove('dragging');
    draggedPatternTaskItem_v2 = null;
    sourcePatternTaskList_v2 = null;
    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
    saveRecurringPatternDefinition_v2(false);
    updateDayTaskCounters_v2();
    updateTotalRoutineTasksCount_v2();
}

function handlePatternTaskDragOver_v2(e) {
    e.preventDefault();
    const targetList = e.target.closest('.day-card-v2-tasks');
    if (!targetList) {
        e.dataTransfer.dropEffect = "none";
        return;
    }
    e.dataTransfer.dropEffect = "move";

    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());
    const placeholder = document.createElement('li');
    placeholder.classList.add('drag-over-placeholder');

    const afterElement = getPatternTaskDragAfterElement_v2(targetList, e.clientY);
    if (afterElement == null) {
        targetList.appendChild(placeholder);
    } else {
        targetList.insertBefore(placeholder, afterElement);
    }
}

function handlePatternTaskDrop_v2(e) {
    e.preventDefault();
    const targetList = e.target.closest('.day-card-v2-tasks');
    if (!targetList || !draggedPatternTaskItem_v2) {
        handlePatternTaskDragEnd_v2(); return;
    }

    document.querySelectorAll('.drag-over-placeholder').forEach(p => p.remove());

    const afterElement = getPatternTaskDragAfterElement_v2(targetList, e.clientY);
    if (afterElement) {
        targetList.insertBefore(draggedPatternTaskItem_v2, afterElement);
    } else {
        targetList.appendChild(draggedPatternTaskItem_v2);
    }

    if (sourcePatternTaskList_v2 && sourcePatternTaskList_v2 !== targetList && sourcePatternTaskList_v2.children.length === 0) {
        const noTasksMsg = document.createElement('span');
        noTasksMsg.className = 'no-tasks-msg';
        noTasksMsg.textContent = 'Nenhuma tarefa';
        sourcePatternTaskList_v2.appendChild(noTasksMsg);
    }
    const noTasksMsgInTarget = targetList.querySelector('.no-tasks-msg');
    if (noTasksMsgInTarget && Array.from(targetList.children).some(child => child.classList.contains('task-item-recurrent-v2'))) {
        noTasksMsgInTarget.remove();
    }
}

function getPatternTaskDragAfterElement_v2(container, y) {
    const draggableElements = [...container.querySelectorAll('.task-item-recurrent-v2:not(.dragging)')];
    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child };
        } else {
            return closest;
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}

function generateRecurringTaskInstances() {
    const today = new Date(); today.setHours(0, 0, 0, 0);
    const todayISO = today.toISOString().split('T')[0];
    let newTasksAddedOrRemoved = false;

    const activePatternIds = new Set(state.recurringTaskPatterns.map(p => p.id));
    state.tasks = state.tasks.filter(task => {
        if (task.isRecurringInstance && task.sourcePatternId) {
            if (!activePatternIds.has(task.sourcePatternId)) {
                if (task.assignedDate >= todayISO && !task.completed) {
                    newTasksAddedOrRemoved = true; return false;
                }
            }
            const pattern = state.recurringTaskPatterns.find(p => p.id === task.sourcePatternId);
            if (pattern && pattern.endDate && task.assignedDate > pattern.endDate) {
                if (!task.completed) {
                    newTasksAddedOrRemoved = true; return false;
                }
            }
        }
        return true;
    });


    state.recurringTaskPatterns.forEach(pattern => {
        if (pattern.id !== SINGLE_ROUTINE_ID) {
            pattern.id = SINGLE_ROUTINE_ID;
            newTasksAddedOrRemoved = true;
        }

        const patternStartDate = pattern.startDate ? new Date(pattern.startDate) : new Date(pattern.createdAt || getTodayISO());
        patternStartDate.setHours(0, 0, 0, 0);

        const patternEndDate = pattern.endDate ? new Date(pattern.endDate) : null;
        if (patternEndDate) patternEndDate.setHours(0, 0, 0, 0);

        if (patternStartDate > today) return;
        if (patternEndDate && patternEndDate < today) return;

        const dayOfWeekToday = today.getDay();

        if (pattern.tasksByDay && pattern.tasksByDay[dayOfWeekToday] && pattern.tasksByDay[dayOfWeekToday].length > 0) {
            pattern.tasksByDay[dayOfWeekToday].forEach(taskDef => {
                const taskIdForInstance = `${pattern.id}-${taskDef.id}-${todayISO}`;
                const existingTask = state.tasks.find(task => task.id === taskIdForInstance);

                if (!existingTask) {
                    state.tasks.push({
                        id: taskIdForInstance,
                        text: taskDef.text,
                        completed: taskDef.completed || false,
                        createdAt: new Date().toISOString(),
                        assignedDate: todayISO,
                        sourcePatternId: pattern.id,
                        originalPatternTaskId: taskDef.id,
                        isRecurringInstance: true
                    });
                    newTasksAddedOrRemoved = true;
                } else {
                    if (existingTask.completed !== (taskDef.completed || false)) {
                        existingTask.completed = taskDef.completed || false;
                        existingTask.completionDate = existingTask.completed ? new Date().toISOString() : null;
                        newTasksAddedOrRemoved = true;
                    }
                    if (existingTask.text !== taskDef.text) {
                        existingTask.text = taskDef.text;
                        newTasksAddedOrRemoved = true;
                    }
                }
            });
        }
    });
    if (newTasksAddedOrRemoved) renderTasks();
}

function updateDeleteRecurringTaskModalUI(selectedOptionValue) {
    const warningMessageContainer = document.getElementById('delete-recurring-warning-message');
    const warningMessageTextEl = warningMessageContainer.querySelector('span');
    const warningMessageIconEl = warningMessageContainer.querySelector('i');
    const confirmBtn = document.getElementById('btn-confirm-delete-recurring-action');

    confirmBtn.classList.remove('btn-danger-style');
    warningMessageContainer.classList.remove('danger');
    warningMessageIconEl.className = 'bi bi-exclamation-triangle-fill';

    const optionFutureEl = document.querySelector('.delete-option-card input[name="delete-recurring-option"][value="future"]');
    if (optionFutureEl && optionFutureEl.closest('.delete-option-card')) {
        optionFutureEl.closest('.delete-option-card').style.display = 'none';
    }


    switch (selectedOptionValue) {
        case 'this':
            warningMessageTextEl.textContent = 'Apenas esta ocorrência será removida. A tarefa recorrente continuará normalmente.';
            confirmBtn.textContent = 'Excluir Ocorrência';
            break;
        case 'all':
            warningMessageTextEl.innerHTML = 'Ação irreversível: Toda a sua rotina semanal será permanentemente excluída.';
            confirmBtn.textContent = 'Excluir Rotina Completa';
            confirmBtn.classList.add('btn-danger-style');
            warningMessageContainer.classList.add('danger');
            warningMessageIconEl.className = 'bi bi-trash3-fill';
            break;
    }
}


function openDeleteRecurringTaskModal(taskInstance) {
    const modal = document.getElementById('delete-recurring-task-modal');
    const overlay = document.getElementById('delete-recurring-task-modal-overlay');
    if (!modal || !overlay) return;
    modal.dataset.deletingTaskId = taskInstance.id;

    const optionFutureEl = modal.querySelector('.delete-option-card input[name="delete-recurring-option"][value="future"]');
    if (optionFutureEl && optionFutureEl.closest('.delete-option-card')) {
        optionFutureEl.closest('.delete-option-card').style.display = 'none';
    }


    const firstOptionRadio = modal.querySelector('input[name="delete-recurring-option"][value="this"]');
    if (firstOptionRadio) {
        firstOptionRadio.checked = true;
        updateDeleteRecurringTaskModalUI('this');
        document.querySelectorAll('.delete-option-card').forEach(card => card.classList.remove('selected'));
        firstOptionRadio.closest('.delete-option-card').classList.add('selected');

    }

    overlay.classList.add('show');
    modal.classList.add('show');
    document.body.classList.add('modal-open');
}

function closeDeleteRecurringTaskModal() {
    const modal = document.getElementById('delete-recurring-task-modal');
    const overlay = document.getElementById('delete-recurring-task-modal-overlay');
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
        delete modal.dataset.deletingTaskId;
    }
}

function confirmDeleteRecurringTask() {
    const modal = document.getElementById('delete-recurring-task-modal');
    const taskId = modal.dataset.deletingTaskId;
    if (!taskId) return;

    const selectedOptionRadio = modal.querySelector('input[name="delete-recurring-option"]:checked');
    if (!selectedOptionRadio) {
        showCustomAlert("Por favor, selecione uma opção de exclusão.", "Opção Necessária");
        return;
    }
    const optionValue = selectedOptionRadio.value;

    const taskIndex = state.tasks.findIndex(t => t.id === taskId);
    if (taskIndex === -1) {
        closeDeleteRecurringTaskModal();
        showCustomAlert("Tarefa não encontrada para exclusão.", "Erro");
        return;
    }

    const taskInstance = state.tasks[taskIndex];
    const patternId = taskInstance.sourcePatternId;
    let tasksModified = false;
    let patternsModified = false;

    if (optionValue === 'this') {
        if (taskInstance.isRecurringInstance && taskInstance.assignedDate === getTodayISO()) {
            taskInstance.deletedThisInstanceOfDay = true;
        } else {
            state.tasks.splice(taskIndex, 1);
        }
        tasksModified = true;
    }
    else if (optionValue === 'all' && patternId === SINGLE_ROUTINE_ID) {
        state.recurringTaskPatterns = [];
        patternsModified = true;

        state.tasks = state.tasks.filter(t => {
            if (t.sourcePatternId === SINGLE_ROUTINE_ID) {
                const taskDate = new Date(t.assignedDate + "T00:00:00");
                const today = new Date(); today.setHours(0, 0, 0, 0);
                if (taskDate >= today && !t.completed) {
                    tasksModified = true;
                    return false;
                } else if (taskDate < today) {
                    return true;
                } else if (taskDate >= today && t.completed) {
                    return true;
                }
            }
            return true;
        });
    }

    closeDeleteRecurringTaskModal();
    if (tasksModified || patternsModified) {
        renderTasks();
        saveState();
        updateTasksChartDataOnly();
    }
}

// Novas funções para atualizar contadores no modal de rotina
function updateDayTaskCounters_v2() {
    const dayIndices = { 0: "sunday", 1: "monday", 2: "tuesday", 3: "wednesday", 4: "thursday", 5: "friday", 6: "saturday" };
    for (const dayIndex in dayIndices) {
        const dayKey = dayIndices[dayIndex];
        const taskListEl = document.getElementById(`pattern-v2-tasks-${dayKey}`);
        const countEl = document.getElementById(`task-count-${dayKey}`);
        if (taskListEl && countEl) {
            const taskCount = taskListEl.querySelectorAll('.task-item-recurrent-v2').length;
            countEl.textContent = taskCount;
        }
    }
}

function updateTotalRoutineTasksCount_v2() {
    const totalCountEl = document.getElementById('recurring-modal-total-tasks');
    if (!totalCountEl) return;

    let totalTasks = 0;
    const routinePattern = state.recurringTaskPatterns.find(p => p.id === SINGLE_ROUTINE_ID);
    if (routinePattern && routinePattern.tasksByDay) {
        for (const dayKey in routinePattern.tasksByDay) {
            if (Array.isArray(routinePattern.tasksByDay[dayKey])) {
                totalTasks += routinePattern.tasksByDay[dayKey].length;
            }
        }
    }
    totalCountEl.textContent = `Total de tarefas: ${totalTasks}`;
}



function openThemesModal() {
    const modal = document.getElementById('themes-modal');
    const overlay = document.getElementById('themes-modal-overlay');
    if (modal && overlay) {
        populateThemesModal();
        overlay.classList.add('show');
        modal.classList.add('show');
        document.body.classList.add('modal-open');
    }
}

function closeThemesModal() {
    const modal = document.getElementById('themes-modal');
    const overlay = document.getElementById('themes-modal-overlay');
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
    }
}

function populateThemesModal() {
    const paletteContainer = document.getElementById('palette-buttons-container');
    const modeContainer = document.getElementById('mode-buttons-container');
    if (!paletteContainer || !modeContainer) return;

    paletteContainer.innerHTML = '';
    Object.keys(PREDEFINED_PALETTES).forEach(key => {
        const palette = PREDEFINED_PALETTES[key];
        const btn = document.createElement('button');
        btn.className = 'palette-btn';
        btn.style.backgroundColor = palette.primary;
        btn.dataset.paletteKey = key;
        btn.setAttribute('aria-label', palette.name);
        const checkIcon = document.createElement('i');
        checkIcon.className = 'bi bi-check-lg active-check';
        btn.appendChild(checkIcon);
        if (key === state.visuals.currentPalette) btn.classList.add('active');
        btn.addEventListener('click', () => applyPalette(key));
        paletteContainer.appendChild(btn);
    });

    modeContainer.innerHTML = '';
    Object.keys(VISUAL_MODES).forEach(key => {
        const mode = VISUAL_MODES[key];
        const btn = document.createElement('button');
        btn.className = 'mode-btn';
        btn.dataset.modeKey = key;
        const iconEl = document.createElement('i');
        iconEl.className = `bi ${mode.icon} mode-icon`;
        const titleEl = document.createElement('span');
        titleEl.className = 'mode-title';
        titleEl.textContent = mode.name;
        const subtitleEl = document.createElement('span');
        subtitleEl.className = 'mode-subtitle';
        subtitleEl.textContent = mode.subtitle;
        const activeDot = document.createElement('span');
        activeDot.className = 'active-dot';
        btn.appendChild(iconEl);
        btn.appendChild(titleEl);
        btn.appendChild(subtitleEl);
        btn.appendChild(activeDot);
        if (key === state.visuals.currentVisualMode) btn.classList.add('active');
        btn.addEventListener('click', () => applyVisualMode(key));
        modeContainer.appendChild(btn);
    });
    updateThemeModalButtons();
}

function updateThemeModalButtons() {
    const paletteBtns = document.querySelectorAll('.palette-btn');
    if (paletteBtns) {
        paletteBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.paletteKey === state.visuals.currentPalette);
        });
    }
    const modeBtns = document.querySelectorAll('.mode-btn');
    if (modeBtns) {
        modeBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.modeKey === state.visuals.currentVisualMode);
        });
    }
}

function applyPalette(paletteName) {
    if (PREDEFINED_PALETTES[paletteName]) {
        const newPrimaryColor = PREDEFINED_PALETTES[paletteName].primary;
        state.visuals.currentPalette = paletteName;
        applyPrimaryColor(newPrimaryColor);
        applyCurrentThemeAndMode();
        saveState();
        updateThemeModalButtons();
    }
}

function applyVisualMode(modeName) {
    if (VISUAL_MODES[modeName]) {
        state.visuals.currentVisualMode = modeName;
        applyCurrentThemeAndMode();
        saveState();
        updateThemeModalButtons();
    }
}

function initThemes() {
    const themesModalOverlay = document.getElementById('themes-modal-overlay');
    if (themesModalOverlay) themesModalOverlay.addEventListener('click', closeThemesModal);
    applyCurrentThemeAndMode();
}

function showCustomAlert(message, title = 'Alerta', onConfirmCallback = null) {
    const alertOverlay = document.getElementById('custom-alert-overlay');
    const alertModal = document.getElementById('custom-alert-modal');
    const alertTitleEl = document.getElementById('custom-alert-title');
    const alertMessageEl = document.getElementById('custom-alert-message');
    let alertOkBtn = document.getElementById('custom-alert-ok-btn');

    if (!alertOverlay || !alertModal || !alertTitleEl || !alertMessageEl || !alertOkBtn) {
        console.error("Elementos do modal de alerta personalizado não encontrados. Usando alert padrão.");
        alert(`${title}: ${message}`);
        if (onConfirmCallback && typeof onConfirmCallback === 'function') onConfirmCallback();
        return;
    }

    alertTitleEl.textContent = title;
    alertMessageEl.innerHTML = message.replace(/\n/g, '<br>');

    const newOkBtn = alertOkBtn.cloneNode(true);
    alertOkBtn.parentNode.replaceChild(newOkBtn, alertOkBtn);
    alertOkBtn = newOkBtn;

    const closeAlert = () => {
        alertModal.classList.remove('show');
        alertOverlay.classList.remove('show');
        alertOkBtn.removeEventListener('click', closeAlert);
        alertOverlay.removeEventListener('click', closeAlertOnOverlay);
        if (onConfirmCallback && typeof onConfirmCallback === 'function') {
            onConfirmCallback();
        }
    };

    const closeAlertOnOverlay = (event) => {
        if (event.target === alertOverlay) {
            closeAlert();
        }
    };

    alertOkBtn.addEventListener('click', closeAlert);
    alertOverlay.addEventListener('click', closeAlertOnOverlay);

    alertOverlay.classList.add('show');
    alertModal.classList.add('show');
    alertOkBtn.focus();
}
window.showCustomAlert = showCustomAlert;

function openWelcomeGuideModal() {
    const modal = document.getElementById('welcome-guide-modal');
    const overlay = document.getElementById('welcome-guide-modal-overlay');
    if (modal && overlay) {
        const checkbox = document.getElementById('dont-show-guide-again-checkbox');
        if (checkbox) checkbox.checked = false;
        overlay.classList.add('show');
        modal.classList.add('show');
        document.body.classList.add('modal-open');
    }
}

function closeWelcomeGuideModal() {
    const modal = document.getElementById('welcome-guide-modal');
    const overlay = document.getElementById('welcome-guide-modal-overlay');
    const checkbox = document.getElementById('dont-show-guide-again-checkbox');

    if (checkbox && checkbox.checked) {
        localStorage.setItem('taskify-welcomeGuideDismissed', 'true');
    }
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
    }
}

function openConfirmResetModal() {
    closeGoalsModal();
    const modal = document.getElementById('confirm-reset-modal');
    const overlay = document.getElementById('confirm-reset-modal-overlay');
    if (modal && overlay) {
        overlay.classList.add('show');
        modal.classList.add('show');
        document.body.classList.add('modal-open');
    }
}

function closeConfirmResetModal() {
    const modal = document.getElementById('confirm-reset-modal');
    const overlay = document.getElementById('confirm-reset-modal-overlay');
    if (modal && overlay) {
        modal.classList.remove('show');
        overlay.classList.remove('show');
        document.body.classList.remove('modal-open');
    }
}

function performFullReset() {
    localStorage.removeItem('taskify-state');
    localStorage.removeItem('taskify-theme');
    localStorage.removeItem('taskify-primary-color');
    localStorage.removeItem('taskify-streak');
    localStorage.removeItem('taskify-welcomeGuideDismissed');
    localStorage.removeItem('taskify-palette');
    localStorage.removeItem('taskify-visual-mode');
    location.reload();
}

function handleResetAppData() {
    openConfirmResetModal();
}

function updateFooterYear() {
    const yearSpan = document.getElementById('current-year');
    if (yearSpan) yearSpan.textContent = new Date().getFullYear();
}

function updateScrollIndicator() {
    const scrollIndicator = document.getElementById('scroll-indicator');
    const productivityArea = document.querySelector('.productivity-focus-area');
    if (!scrollIndicator || !productivityArea) return;

    if (window.innerWidth < 769) {
        scrollIndicator.classList.remove('visible');
        scrollIndicator.classList.add('collapsed');
        productivityArea.classList.add('visible');
        return;
    }

    const statsGrid = document.querySelector('.stats-grid');
    const bottomCards = document.querySelector('.bottom-cards');
    const activitySection = document.querySelector('.activity-section');
    let firstPageContentHeight = 0;
    if (statsGrid) firstPageContentHeight += statsGrid.offsetHeight + parseInt(getComputedStyle(statsGrid).marginBottom || '0');
    if (bottomCards) firstPageContentHeight += bottomCards.offsetHeight + parseInt(getComputedStyle(bottomCards).marginBottom || '0');
    if (activitySection) firstPageContentHeight += activitySection.offsetHeight + parseInt(getComputedStyle(activitySection).marginBottom || '0');

    const hasSecondPageContent = productivityArea.offsetHeight > 50;
    const contentEntryThreshold = firstPageContentHeight * 0.20;
    const indicatorHideThreshold = firstPageContentHeight * 0.60;

    if (hasSecondPageContent && document.documentElement.scrollHeight > (window.innerHeight + 50)) {
        if (window.scrollY < indicatorHideThreshold) {
            scrollIndicator.classList.add('visible');
            scrollIndicator.classList.remove('collapsed');
        } else {
            scrollIndicator.classList.remove('visible');
            scrollIndicator.classList.add('collapsed');
        }
        if (window.scrollY > contentEntryThreshold) {
            productivityArea.classList.add('visible');
        } else {
            productivityArea.classList.remove('visible');
        }

    } else {
        scrollIndicator.classList.remove('visible');
        scrollIndicator.classList.add('collapsed');
        productivityArea.classList.add('visible');
    }
}

window.addEventListener('scroll', updateScrollIndicator, { passive: true });
window.addEventListener('resize', updateScrollIndicator);


async function init() {
    const loaderElement = document.getElementById('loader');
    if (loaderElement) loaderElement.style.display = 'flex';

    loadState();

    initThemes();
    checkAllResets();
    initStreak();
    initPomodoro();
    initTasks();

    const btnOpenRecurringModalV2 = document.getElementById('btn-open-recurring-task-modal');
    if (btnOpenRecurringModalV2) {
        btnOpenRecurringModalV2.onclick = () => openRecurringTaskPatternModal_v2();
    }

    const recurringModalV2 = document.getElementById('recurring-task-modal');
    if (recurringModalV2) {
        const btnConfirmAddV2 = recurringModalV2.querySelector('.btn-confirm-add-task-v2');
        const btnSelectAllDaysV2 = recurringModalV2.querySelector('.btn-select-all-days');
        const btnClearDaySelectionV2 = recurringModalV2.querySelector('.btn-clear-day-selection');
        const newTaskTextInputV2 = document.getElementById('new-task-text-input-v2');

        if (btnConfirmAddV2 && btnConfirmAddV2._taskifyListenerAttached !== true) {
            btnConfirmAddV2.addEventListener('click', handleConfirmAddTask_v2);
            btnConfirmAddV2._taskifyListenerAttached = true;
        }
        if (newTaskTextInputV2 && newTaskTextInputV2._taskifyEnterListenerAttached !== true) {
            newTaskTextInputV2.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    handleConfirmAddTask_v2();
                }
            });
            newTaskTextInputV2._taskifyEnterListenerAttached = true;
        }
        if (btnSelectAllDaysV2 && btnSelectAllDaysV2._taskifyListenerAttached !== true) {
            btnSelectAllDaysV2.addEventListener('click', handleSelectAllDays_v2);
            btnSelectAllDaysV2._taskifyListenerAttached = true;
        }
        if (btnClearDaySelectionV2 && btnClearDaySelectionV2._taskifyListenerAttached !== true) {
            btnClearDaySelectionV2.addEventListener('click', handleClearDaySelection_v2);
            btnClearDaySelectionV2._taskifyListenerAttached = true;
        }

        recurringModalV2.querySelectorAll('.day-card-v2').forEach(card => {
            if (card._taskifyCardListenerAttached !== true) {
                card.addEventListener('click', handleDayCardClick_v2);
                card._taskifyCardListenerAttached = true;
            }
            const taskListEl = card.querySelector('.day-card-v2-tasks');
            if (taskListEl && taskListEl._taskifyDragListenerAttached !== true) {
                taskListEl.addEventListener('dragover', handlePatternTaskDragOver_v2);
                taskListEl.addEventListener('drop', handlePatternTaskDrop_v2);
                taskListEl._taskifyDragListenerAttached = true;
            }
        });
    }


    const recurringTaskModalOverlay = document.getElementById('recurring-task-modal-overlay');
    if (recurringTaskModalOverlay) {
        recurringTaskModalOverlay.addEventListener('click', (e) => {
            if (e.target === recurringTaskModalOverlay) closeRecurringTaskPatternModal();
        });
    }


    document.querySelectorAll('input[name="delete-recurring-option"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
            updateDeleteRecurringTaskModalUI(e.target.value);
            document.querySelectorAll('.delete-option-card').forEach(card => {
                card.classList.remove('selected');
            });
            if (e.target.checked) {
                e.target.closest('.delete-option-card').classList.add('selected');
            }
        });
    });
    const btnConfirmDeleteRecurringAction = document.getElementById('btn-confirm-delete-recurring-action');
    if (btnConfirmDeleteRecurringAction) btnConfirmDeleteRecurringAction.addEventListener('click', () => confirmDeleteRecurringTask());

    const btnCancelDeleteRecurring = document.getElementById('btn-cancel-delete-recurring');
    if (btnCancelDeleteRecurring) btnCancelDeleteRecurring.addEventListener('click', closeDeleteRecurringTaskModal);
    const deleteRecurringModalOverlay = document.getElementById('delete-recurring-task-modal-overlay');
    if (deleteRecurringModalOverlay) {
        deleteRecurringModalOverlay.addEventListener('click', (e) => {
            if (e.target === deleteRecurringModalOverlay) closeDeleteRecurringTaskModal();
        });
    }

    generateRecurringTaskInstances();

    await loadAndSetupRetrospective();

    updateFooterYear();

    if (weeklyChartInstance) weeklyChartInstance.destroy();
    setupChart(true);
    if (pomodoroChartInstance) pomodoroChartInstance.destroy();
    setupPomodoroChart(true);
    if (tasksChartInstance) tasksChartInstance.destroy();
    setupTasksChart(true);

    updateUI(); // Inclui a chamada para updateCounterTooltips

    const goalsForm = document.getElementById('goals-form');
    if (goalsForm) goalsForm.addEventListener('submit', (e) => { e.preventDefault(); saveGoals(); });
    const goalsOverlay = document.getElementById('goals-modal-overlay');
    if (goalsOverlay) goalsOverlay.addEventListener('click', closeGoalsModal);

    const btnResetAppData = document.getElementById('btn-reset-app-data');
    if (btnResetAppData) btnResetAppData.addEventListener('click', handleResetAppData);

    const confirmResetModalOverlay = document.getElementById('confirm-reset-modal-overlay');
    if (confirmResetModalOverlay) confirmResetModalOverlay.addEventListener('click', closeConfirmResetModal);
    const confirmResetModalCloseBtn = document.getElementById('confirm-reset-modal-close-btn');
    if (confirmResetModalCloseBtn) confirmResetModalCloseBtn.addEventListener('click', closeConfirmResetModal);
    const btnCancelResetConfirmation = document.getElementById('btn-cancel-reset-confirmation');
    if (btnCancelResetConfirmation) btnCancelResetConfirmation.addEventListener('click', closeConfirmResetModal);
    const btnConfirmResetAction = document.getElementById('btn-confirm-reset-action');
    if (btnConfirmResetAction) btnConfirmResetAction.addEventListener('click', performFullReset);

    const welcomeGuideModalOverlay = document.getElementById('welcome-guide-modal-overlay');
    if (welcomeGuideModalOverlay) welcomeGuideModalOverlay.addEventListener('click', closeWelcomeGuideModal);
    const welcomeGuideModalCloseBtn = document.getElementById('welcome-guide-modal-close-btn');
    if (welcomeGuideModalCloseBtn) welcomeGuideModalCloseBtn.addEventListener('click', closeWelcomeGuideModal);
    const btnCloseWelcomeGuide = document.getElementById('btn-close-welcome-guide');
    if (btnCloseWelcomeGuide) btnCloseWelcomeGuide.addEventListener('click', closeWelcomeGuideModal);

    if (localStorage.getItem('taskify-welcomeGuideDismissed') !== 'true') {
        openWelcomeGuideModal();
    }

    // Event listener para o input de step do contador de questões
    const questionsStepInput = document.getElementById('questions-step-input');
    if (questionsStepInput) {
        questionsStepInput.addEventListener('input', updateCounterTooltips);
        questionsStepInput.addEventListener('change', updateCounterTooltips); // Para caso de setas do navegador
    }


    setInterval(() => {
        checkAllResets();
        const prevTaskCount = state.tasks.filter(t => !(t.deletedThisInstanceOfDay && t.assignedDate === getTodayISO()) && (t.isRecurringInstance ? t.assignedDate === getTodayISO() : true)).length;
        generateRecurringTaskInstances();
        const currentTaskCount = state.tasks.filter(t => !(t.deletedThisInstanceOfDay && t.assignedDate === getTodayISO()) && (t.isRecurringInstance ? t.assignedDate === getTodayISO() : true)).length;

        if (state.lastAccessDate !== new Date().toDateString() || prevTaskCount !== currentTaskCount) {
            renderTasks();
            saveState();
        }
    }, 60 * 1000);


    window.taskifyStateReady = true;
    document.dispatchEvent(new CustomEvent('taskifyStateReady', {
        detail: { taskifyAppState: JSON.parse(JSON.stringify(window.state || {})) }
    }));

    setTimeout(() => {
        if (loaderElement) {
            loaderElement.style.opacity = '0';
            setTimeout(() => {
                loaderElement.style.display = 'none';
            }, 500);
        }
    }, 250);
}

document.addEventListener('DOMContentLoaded', async () => {
    await init();
});

const particleCanvas = document.getElementById('particle-canvas');
if (particleCanvas) {
    const ctx = particleCanvas.getContext('2d');
    let particlesArray = [];
    let lastParticleTime = 0;
    const particleCooldown = 30;
    let currentMouseX = -1000, currentMouseY = -1000;

    function resizeCanvas() {
        particleCanvas.width = window.innerWidth;
        particleCanvas.height = window.innerHeight;
    }

    function setupParticleListeners() {
        window.addEventListener('resize', resizeCanvas);
        document.addEventListener('mousemove', (e) => { currentMouseX = e.clientX; currentMouseY = e.clientY; });
        document.addEventListener('touchmove', (e) => {
            if (e.touches.length > 0) {
                currentMouseX = e.touches[0].clientX;
                currentMouseY = e.touches[0].clientY;
            }
        });
        document.addEventListener('mouseleave', () => { currentMouseX = -1000; currentMouseY = -1000; });
        document.addEventListener('touchend', () => { currentMouseX = -1000; currentMouseY = -1000; });
        resizeCanvas();
    }

    class Particle {
        constructor(x, y, color) {
            this.x = x; this.y = y; this.size = Math.random() * 4 + 1.5;
            this.baseSize = this.size; this.color = color;
            this.speedX = Math.random() * 2 - 1;
            this.speedY = Math.random() * 2 - 1;
            this.life = Math.random() * 60 + 30;
            this.initialLife = this.life;
        }
        update() {
            this.x += this.speedX; this.y += this.speedY; this.life--;
            if (this.life > 0) this.size = this.baseSize * (this.life / this.initialLife);
            if (this.size < 0.1) this.size = 0;
        }
        draw() {
            if (this.size > 0) {
                ctx.fillStyle = this.color;
                ctx.globalAlpha = Math.max(0, this.life / this.initialLife * 0.7);
                ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill();
                ctx.globalAlpha = 1;
            }
        }
    }

    function handleParticles(timestamp) {
        const isMouseInsideWindow = currentMouseX >= 0 && currentMouseX <= window.innerWidth &&
            currentMouseY >= 0 && currentMouseY <= window.innerHeight;

        let particleEnabled = true;
        if (typeof state !== 'undefined' && state.visuals && state.visuals.currentVisualMode === 'focus') {
            particleEnabled = false;
        }

        if (particleEnabled && isMouseInsideWindow && timestamp - lastParticleTime > particleCooldown) {
            let primaryColor = '#0A7CFF';
            try {
                if (typeof state !== 'undefined' && state.isDarkMode !== undefined) {
                    primaryColor = getComputedStyle(document.documentElement).getPropertyValue(state.isDarkMode ? '--primary-color-dark' : '--primary-color-light').trim();
                } else {
                    primaryColor = localStorage.getItem('taskify-primary-color') || '#0A7CFF';
                }
            } catch (e) { console.warn("Erro ao obter cor primária para partículas:", e); }

            for (let i = 0; i < 1; i++) {
                particlesArray.push(new Particle(currentMouseX + (Math.random() - 0.5) * 10, currentMouseY + (Math.random() - 0.5) * 10, primaryColor));
            }
            lastParticleTime = timestamp;
        }
        for (let i = 0; i < particlesArray.length; i++) {
            particlesArray[i].update();
            if (particlesArray[i].life <= 0 ||
                particlesArray[i].x < -20 || particlesArray[i].x > particleCanvas.width + 20 ||
                particlesArray[i].y < -20 || particlesArray[i].y > particleCanvas.height + 20) {
                particlesArray.splice(i, 1); i--;
            }
        }
    }

    function animateParticles(timestamp) {
        ctx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
        handleParticles(timestamp);
        for (let i = 0; i < particlesArray.length; i++) particlesArray[i].draw();
        requestAnimationFrame(animateParticles);
    }
    if (document.readyState === 'complete' || (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
        setupParticleListeners(); requestAnimationFrame(animateParticles);
    } else {
        document.addEventListener('DOMContentLoaded', () => {
            setupParticleListeners(); requestAnimationFrame(animateParticles);
        });
    }
} else {
    console.warn("Elemento #particle-canvas não encontrado. Animação de partículas desabilitada.");
}


async function loadAndSetupRetrospective() {
    retrospectiveModalEl = document.getElementById('retrospective-modal');
    retrospectiveModalOverlayEl = document.getElementById('retrospective-modal-overlay');
    const btnOpenRetrospectiveMain = document.getElementById('btn-open-retrospective');

    if (!retrospectiveModalEl || !retrospectiveModalOverlayEl || !btnOpenRetrospectiveMain) {
        console.error('TASKIFY_MAIN: Elementos base da retrospectiva não encontrados. A retrospectiva pode não funcionar.');
        if (btnOpenRetrospectiveMain) btnOpenRetrospectiveMain.style.display = 'none';
        return;
    }

    btnOpenRetrospectiveMain.addEventListener('click', () => {
        if (typeof window.openRetrospectiveView === 'function') {
            window.openRetrospectiveView();
        } else {
            console.error("TASKIFY_MAIN: Função window.openRetrospectiveView() não está definida.");
        }
    });

    retrospectiveModalOverlayEl.addEventListener('click', (event) => {
        if (event.target === retrospectiveModalOverlayEl) {
            if (typeof window.closeRetrospectiveView === 'function') {
                window.closeRetrospectiveView();
            }
        }
    });

    if (!retrospectiveModalEl.querySelector('.retrospective-screen')) {
        try {
            const response = await fetch('retrospective.html');
            if (!response.ok) {
                throw new Error(`Falha ao carregar retrospective.html: ${response.status} ${response.statusText}`);
            }
            const htmlContent = await response.text();
            retrospectiveModalEl.innerHTML = htmlContent;

            if (typeof window.initializeRetrospectiveInternals === 'function') {
                window.initializeRetrospectiveInternals();
            } else {
                console.error("TASKIFY_MAIN: Função window.initializeRetrospectiveInternals() não definida após carregar HTML.");
            }
        } catch (error) {
            console.error('TASKIFY_MAIN: Falha ao carregar e configurar retrospective.html:', error);
            const alertFn = typeof window.showCustomAlert === 'function' ? window.showCustomAlert : alert;
            alertFn('Erro crítico ao carregar a retrospectiva. Verifique o console.', 'Erro');
            btnOpenRetrospectiveMain.style.display = 'none';
        }
    } else {
        if (typeof window.initializeRetrospectiveInternals === 'function') {
            window.initializeRetrospectiveInternals();
        } else {
            console.error("TASKIFY_MAIN: Função window.initializeRetrospectiveInternals() não definida (HTML já presente).");
        }
    }
}
</file>

<file path="README.md">
<p align="center"> <h1 align="center">Taskify — Dashboard de Metas e Foco 🎯</h1> </p>

<p align="center">
  <img src="https://github.com/user-attachments/assets/99139d62-6870-49dc-8bdf-665ad5b60472" alt="Taskify Dashboard Demo - Visão Geral" width="700">
</p>
<p align="center">
  <img src="https://github.com/user-attachments/assets/ef6f015c-6e04-454d-8aba-ae82c08c044c" alt="Taskify Dashboard Demo - Pomodoro e Tarefas" width="700">
</p>
<p align="center">
  <img src="https://github.com/user-attachments/assets/148d6ffe-a2ed-4942-83da-e7f0d7b7f8b1" alt="Taskify Dashboard Demo - Retrospectiva" width="700">
</p>

Taskify é um dashboard responsivo e personalizável para acompanhamento de metas, gerenciamento de tarefas e sessões de foco com timer Pomodoro. Todos os dados são salvos localmente no seu navegador.

**👉** [Acesse a Demo](https://taskify-fabinxz.vercel.app/)

## 🚀 Funcionalidades Principais

*   **Contador de Progresso Dinâmico:** Adicione e remova unidades de progresso (ex: questões resolvidas) facilmente.
*   **Acompanhamento Detalhado de Metas:**
    *   Visualize seu progresso para metas diárias, semanais, mensais e anuais com anéis de progresso.
    *   Metas totalmente editáveis.
*   **Estatísticas de Performance:**
    *   Recorde Diário de progresso.
    *   Streak Atual (dias consecutivos de metas diárias batidas) com barra de progresso para a meta de streak.
    *   Pico de Atividade Semanal (dia da semana com maior progresso).
*   **Gerenciamento de Tarefas:**
    *   Adicione, complete e delete tarefas.
    *   Atribua datas às tarefas (com seletor de data no formato DD/MM/AAAA).
    *   Arraste e solte para reordenar tarefas.
*   **Timer Pomodoro Integrado:**
    *   Configure durações de foco, pausas curtas e longas.
    *   Contador de ciclos de Pomodoro.
    *   Opções de início automático de pausas/foco e notificações sonoras.
*   **Visualização de Dados:**
    *   Gráfico de Atividade Semanal (progresso dos últimos 7 dias).
    *   Gráfico Semanal de Tempo de Foco (Pomodoro).
    *   Gráfico Semanal de Tarefas Concluídas.
*   **Retrospectiva Mensal Interativa:**
    *   Visualize suas principais métricas do mês (questões, tarefas, foco).
    *   Descubra seu dia mais produtivo e padrões de produtividade.
    *   Compare seu desempenho com o mês anterior.
    *   Gere uma imagem da sua retrospectiva para compartilhar.
    *   Música ambiente opcional para a experiência.
*   **Ampla Personalização Visual:**
    *   **Temas:** Escuro (padrão) e Claro.
    *   **Paletas de Cores:** Diversas opções predefinidas para a cor primária do dashboard.
    *   **Modos Visuais:**
        *   Padrão: Experiência Taskify completa.
        *   Foco Total: Interface minimalista para menos distrações.
        *   Profundo da Noite: Cores escuras e suaves.
        *   Energia Vibrante: Cores dinâmicas e fundo com gradiente.
*   **Responsivo:** Ótima experiência em desktops, tablets e celulares.
*   **Persistência Local:** Seus dados e personalizações são salvos no navegador (`localStorage`).
*   **Favicon Dinâmico:** O ícone do site reflete a cor primária escolhida.
*   **Guia de Boas-Vindas:** Para novos usuários.

## 🛠️ Tecnologias

*   **HTML5**
*   **CSS3** (Flexbox, Grid, Variáveis CSS, Animações)
*   **JavaScript (ES6+)**
*   **Chart.js** (para gráficos)
*   **Flatpickr** (para seleção de data customizada)
*   **Bootstrap Icons** (para ícones)
*   **html2canvas** (para gerar imagem da retrospectiva)

## ⚡ Como Usar

1.  Clone o repositório:
    ```bash
    git clone https://github.com/Fabinxz/Taskify.git
    ```
2.  Navegue até o diretório do projeto:
    ```bash
    cd Taskify
    ```
3.  Abra o arquivo `index.html` no seu navegador de preferência.
    *(Não são necessárias etapas de build ou instalação de dependências complexas).*

## 🎨 Personalização Rápida

*   **Aparência (Temas, Cores, Modos Visuais):** Clique no ícone de paleta <i class="bi bi-palette-fill"></i> no header.
*   **Tema Claro/Escuro:** Use o ícone de lua/sol <i class="bi bi-moon-fill"></i> / <i class="bi bi-sun-fill"></i> no header.
*   **Metas e Reset:** Clique no ícone de lápis <i class="bi bi-pencil-square"></i> no header.
*   **Configurações do Pomodoro:** Clique no ícone de engrenagem <i class="bi bi-gear-fill"></i> na seção do Pomodoro.
*   **Retrospectiva Mensal:** Clique no ícone de calendário com coração <i class="bi bi-calendar-heart-fill"></i> no canto inferior direito.

## 📂 Estrutura do Projeto

Taskify/
├── css/
│ ├── style.css # Estilos principais da aplicação
│ └── retrospective.css # Estilos específicos da retrospectiva
├── js/
│ ├── script.js # Lógica principal da aplicação
│ └── retrospective.js # Lógica da funcionalidade de retrospectiva
├── sounds/
│ ├── focus_end.mp3 # Som para fim do ciclo de foco Pomodoro
│ ├── break_end.mp3 # Som para fim do ciclo de pausa Pomodoro
│ └── BalloonPlanet - Echoes of Freedom.mp3 # Música para retrospectiva
├── index.html # Página principal da aplicação
├── retrospective.html # Estrutura HTML da retrospectiva (carregada dinamicamente)
└── README.md # Este arquivo
## 💡 Melhorias Futuras (Ideias)

*   Sincronização de dados online (ex: Firebase, Supabase).
*   Notificações push para lembretes de metas ou fim de ciclos Pomodoro.
*   Opção de exportar/importar dados do usuário (JSON, CSV).
*   Mais opções de temas e customização de layout.
*   Gamificação mais elaborada com badges e níveis.
*   Integração com calendários externos.

---

Feito por [(Fabinxz)](https://www.instagram.com/fabiomachado7_/)

[![GitHub Profile](https://img.shields.io/badge/GitHub-Fabinxz-181717?style=for-the-badge&logo=github)](https://github.com/Fabinxz)
</file>

<file path="repomix-unpack.js">
const fs = require('fs');
const path = require('path');

const inputFile = 'repomix-output.xml'; // Altere se necessário
const content = fs.readFileSync(inputFile, 'utf-8');

// Regex que captura cada bloco <file path="...">...</file>
const fileRegex = /<file path="([^"]+)">\s*([\s\S]*?)<\/file>/g;

let match;
let count = 0;

while ((match = fileRegex.exec(content)) !== null) {
const filePath = match[1].trim();
const fileContent = match[2].trim();

// Garante que a pasta de destino existe
const dir = path.dirname(filePath);
fs.mkdirSync(dir, { recursive: true });

// Escreve o conteúdo no caminho correto
fs.writeFileSync(filePath, fileContent, 'utf8');
console.log(`✅ Arquivo criado: ${filePath}`);
count++;


}

console.log(`\n🎉 Processo finalizado! ${count} arquivo(s) extraído(s).`);
</file>

<file path="retrospective.html">
<!-- Este arquivo conterá APENAS o HTML da Retrospectiva -->
<!-- Ele será populado e manipulado pelo retrospective.js -->
<!-- O CSS específico estará em retrospective.css -->

<!-- Elemento de Áudio e Controle de Música -->
<audio id="retrospective-background-music" loop preload="auto">
    <source src="sounds/BalloonPlanet - Echoes of Freedom.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>
<button id="retrospective-music-toggle" class="retrospective-music-control-button" aria-label="Controlar música">
    <i class="bi bi-volume-up-fill"></i> <!-- Ícone inicial, será alterado por JS -->
</button>

<!-- Tela de Seleção de Métricas (Inicial) -->
<div id="retrospective-selection-screen" class="retrospective-screen">
    <div class="retrospective-selection-card">
        <div class="retrospective-logo-container">
            <div class="retrospective-logo-icon-wrapper">
                <i class="bi bi-lightning-charge-fill retrospective-icon"></i>
            </div>
            <h1 class="retrospective-main-title">Retrospectiva Taskify</h1>
            <p class="retrospective-month" id="retrospective-month-selection">Carregando...</p>
        </div>

        <div class="retrospective-metrics-selection">
            <p class="retrospective-selection-prompt">Escolha suas métricas:</p>

            <button class="retrospective-metric-button" data-metric="questions">
                <i class="bi bi-check-circle retrospective-icon"></i>
                Questões Resolvidas
                <span class="retrospective-checkmark-placeholder">
                </span>
            </button>

            <button class="retrospective-metric-button" data-metric="tasks">
                <i class="bi bi-check2-circle retrospective-icon"></i>
                Tarefas Concluídas
                <span class="retrospective-checkmark-placeholder"></span>
            </button>

            <button class="retrospective-metric-button" data-metric="focus">
                <i class="bi bi-clock-history retrospective-icon"></i>
                Tempo de Foco
                <span class="retrospective-checkmark-placeholder"></span>
            </button>
        </div>

        <button id="retrospective-start-button" class="retrospective-button retrospective-start-button" disabled>
            Começar Retrospectiva
            <i class="bi bi-chevron-right retrospective-icon-small"></i>
        </button>
    </div>
</div>

<!-- Tela de Introdução da Retrospectiva -->
<div id="retrospective-intro-screen" class="retrospective-screen" style="display: none;">
    <div class="retrospective-content-wrapper retrospective-text-center">
        <div class="retrospective-intro-icon-wrapper">
            <i class="bi bi-star-fill retrospective-icon-large"></i>
        </div>
        <h1 class="retrospective-intro-title" id="retrospective-intro-month">Sua Retrospectiva</h1>
        <p class="retrospective-intro-subtitle">está absolutamente épica! ✨</p>
        <button id="retrospective-intro-next-button" class="retrospective-button retrospective-intro-button">
            Vamos descobrir! 🚀
        </button>
    </div>
</div>

<!-- Tela de Estatísticas Principais ("Brilharam!") -->
<div id="retrospective-main-stats-screen" class="retrospective-screen" style="display: none;">
    <div class="retrospective-content-wrapper">
        <h2 class="retrospective-screen-title">
            <i class="bi bi-stars retrospective-title-icon"></i>
            Destaques do Mês!
            <i class="bi bi-stars retrospective-title-icon"></i>
        </h2>
        <div class="retrospective-stats-grid">
            <div class="retrospective-stat-card animated-metric-card" data-metric-card="questions"
                style="display: none;">
                <i class="bi bi-check-circle-fill retrospective-icon-large retrospective-icon-blue"></i>
                <div class="retrospective-stat-value" id="retrospective-questions-resolved">0</div>
                <div class="retrospective-stat-label">Questões Resolvidas</div>
                <span class="retrospective-badge retrospective-badge-blue" id="retrospective-phrase-questions">Frase
                    aqui</span>
            </div>
            <div class="retrospective-stat-card animated-metric-card" data-metric-card="tasks" style="display: none;">
                <i class="bi bi-check2-circle retrospective-icon-large retrospective-icon-green"></i>
                <div class="retrospective-stat-value" id="retrospective-tasks-completed">0</div>
                <div class="retrospective-stat-label">Tarefas Concluídas</div>
                <span class="retrospective-badge retrospective-badge-green" id="retrospective-phrase-tasks">Frase
                    aqui</span>
            </div>
            <div class="retrospective-stat-card animated-metric-card" data-metric-card="focus" style="display: none;">
                <i class="bi bi-clock-history retrospective-icon-large retrospective-icon-purple"></i>
                <div class="retrospective-stat-value" id="retrospective-focus-time">0.0h</div>
                <div class="retrospective-stat-label">Tempo de Foco</div>
                <span class="retrospective-badge retrospective-badge-purple" id="retrospective-phrase-focus">Frase
                    aqui</span>
            </div>
        </div>
        <button id="retrospective-main-stats-next-button" class="retrospective-button retrospective-navigation-button">
            Continue a jornada <i class="bi bi-chevron-right retrospective-icon-small"></i>
        </button>
    </div>
</div>

<!-- Tela Dia Mais Produtivo -->
<div id="retrospective-productive-day-screen" class="retrospective-screen" style="display: none;">
    <div class="retrospective-content-wrapper retrospective-text-center">
        <div class="retrospective-icon-container">
            <i class="bi bi-trophy-fill retrospective-icon-xlarge retrospective-icon-yellow"></i>
        </div>
        <h2 class="retrospective-screen-title retrospective-title-yellow">Seu Dia Mais Épico!</h2>
        <div class="retrospective-productive-day-card">
            <div class="retrospective-productive-day-date" id="retrospective-most-productive-date">Data</div>
            <div class="retrospective-productive-day-value" id="retrospective-most-productive-value">0 conquistas!</div>
            <div class="retrospective-stars-container">
                <i class="bi bi-star-fill retrospective-icon-medium retrospective-icon-yellow"></i>
                <i class="bi bi-star-fill retrospective-icon-medium retrospective-icon-yellow"></i>
                <i class="bi bi-star-fill retrospective-icon-medium retrospective-icon-yellow"></i>
                <i class="bi bi-star-fill retrospective-icon-medium retrospective-icon-yellow"></i>
                <i class="bi bi-star-fill retrospective-icon-medium retrospective-icon-yellow"></i>
            </div>
        </div>
        <p class="retrospective-motivational-text">Você estava em <span class="retrospective-highlight-yellow">modo
                máquina</span> neste dia! 🔥</p>
        <button id="retrospective-productive-day-next-button"
            class="retrospective-button retrospective-navigation-button retrospective-button-yellow">
            Mais insights <i class="bi bi-chevron-right retrospective-icon-small"></i>
        </button>
    </div>
</div>

<!-- Tela Padrões de Tempo -->
<div id="retrospective-time-patterns-screen" class="retrospective-screen" style="display: none;">
    <div class="retrospective-content-wrapper">
        <h2 class="retrospective-screen-title"> <!-- Título aqui -->
            Seus Padrões de Produtividade
        </h2>
        <div class="retrospective-time-patterns-grid"> <!-- Grid para os 2 cards de cima -->
            <div class="retrospective-stat-card"> <!-- Card Pico de Foco -->
                <div class="retrospective-card-header">
                    <i class="bi bi-brightness-high-fill retrospective-icon-large"></i>
                    <h3 class="retrospective-card-title">Pico de Foco</h3>
                </div>
                <div class="retrospective-stat-value" id="retrospective-peak-focus-hour">-</div>
                <p class="retrospective-card-subtitle">Seu horário dourado!</p>
            </div>
            <div class="retrospective-stat-card"> <!-- Card Maior Streak -->
                <div class="retrospective-card-header">
                    <i class="bi bi-fire retrospective-icon-large"></i>
                    <h3 class="retrospective-card-title">Maior Streak</h3>
                </div>
                <div class="retrospective-stat-value" id="retrospective-longest-streak">0</div>
                <p class="retrospective-card-subtitle">dias de pura consistência!</p>
            </div>
        </div>
        <div class="retrospective-card-indigo"> <!-- Card Distribuição Semanal (usando a classe do seu HTML original) -->
            <div class="retrospective-card-header">
                <i class="bi bi-bar-chart-line-fill retrospective-icon-large"></i>
                <h3 class="retrospective-card-title">Distribuição Semanal</h3>
            </div>
            <div class="retrospective-weekday-chart" id="retrospective-weekday-distribution-chart">
                <!-- Barras do gráfico -->
            </div>
        </div>
        <button id="retrospective-time-patterns-next-button" class="retrospective-button retrospective-navigation-button">
            PRÓXIMA DESCOBERTA <i class="bi bi-chevron-right retrospective-icon-small"></i>
        </button>
    </div>
</div>

<!-- Tela de Comparação com Mês Anterior -->
<div id="retrospective-comparison-screen" class="retrospective-screen" style="display: none;">
    <div class="retrospective-content-wrapper">
        <h2 class="retrospective-screen-title retrospective-title-green">Evolução Impressionante!</h2>
        <div class="retrospective-stats-grid">
            <div class="retrospective-stat-card" data-metric-comparison-card="questions" style="display: none;">
                <i class="bi bi-check-circle retrospective-icon-medium"></i>
                <div class="retrospective-stat-value" id="retrospective-comparison-questions-resolved">0</div>
                <div class="retrospective-stat-label">Questões</div>
                <div class="retrospective-comparison-percentage">
                    <i class="bi bi-arrow-up-right retrospective-icon-small retrospective-icon-green"></i>
                    <span id="retrospective-questions-percentage">+0%</span>
                </div>
            </div>
            <div class="retrospective-stat-card" data-metric-comparison-card="tasks" style="display: none;">
                <i class="bi bi-check2-circle retrospective-icon-medium"></i>
                <div class="retrospective-stat-value" id="retrospective-comparison-tasks-completed">0</div>
                <div class="retrospective-stat-label">Tarefas</div>
                <div class="retrospective-comparison-percentage">
                    <i class="bi bi-arrow-up-right retrospective-icon-small retrospective-icon-green"></i>
                    <span id="retrospective-tasks-percentage">+0%</span>
                </div>
            </div>
            <div class="retrospective-stat-card" data-metric-comparison-card="focus" style="display: none;">
                <i class="bi bi-clock-history retrospective-icon-medium"></i>
                <div class="retrospective-stat-value" id="retrospective-comparison-focus-time">0h</div>
                <div class="retrospective-stat-label">Foco</div>
                <div class="retrospective-comparison-percentage">
                    <i class="bi bi-arrow-up-right retrospective-icon-small retrospective-icon-green"></i>
                    <span id="retrospective-focus-percentage">+0%</span>
                </div>
            </div>
        </div>
        <div class="retrospective-motivational-text retrospective-text-center">
            Você superou o mês anterior e <span class="retrospective-highlight-green"
                id="retrospective-comparison-highlight">várias métricas</span>!
        </div>
        <button id="retrospective-comparison-next-button"
            class="retrospective-button retrospective-navigation-button retrospective-button-green">
            Grande final <i class="bi bi-chevron-right retrospective-icon-small"></i>
        </button>
    </div>
</div>

<!-- Tela Final da Retrospectiva (Estilo Spotify Wrapped) -->
<div id="retrospective-final-screen" class="retrospective-screen retrospective-final-screen-spotify-style"
    style="display: none;">
    <button class="retrospective-final-close-x-btn" aria-label="Fechar Retrospectiva">
        <i class="bi bi-x-lg"></i>
    </button>

    <div class="retrospective-final-content-wrapper">
        <div class="retrospective-final-header">
            <div class="retrospective-final-logo">
                <div class="logo-icon"> <!-- Ícone atualizado aqui -->
                    <i class="bi bi-lightning-charge-fill"></i>
                </div>
                <span class="logo-text">Taskify</span>
            </div>
            <div class="retrospective-final-date" id="retrospective-final-month-year">Maio 2025</div>
        </div>

        <h1 class="retrospective-final-main-title">Retrospectiva Mensal</h1>

        <div class="retrospective-final-highlights">
            <div class="retrospective-final-highlight-item" data-final-metric="questions" style="display: none;">
                <div class="retrospective-final-highlight-value" id="final-questions-value">0</div>
                <div class="retrospective-final-highlight-label">Questões Resolvidas</div>
                <i class="bi bi-check-circle final-highlight-icon"></i>
            </div>
            <div class="retrospective-final-highlight-item" data-final-metric="tasks" style="display: none;">
                <div class="retrospective-final-highlight-value" id="final-tasks-value">0</div>
                <div class="retrospective-final-highlight-label">Tarefas Concluídas</div>
                <i class="bi bi-check2-circle final-highlight-icon"></i>
            </div>
            <div class="retrospective-final-highlight-item" data-final-metric="focus" style="display: none;">
                <div class="retrospective-final-highlight-value" id="final-focus-value">0.0h</div>
                <div class="retrospective-final-highlight-label">Tempo de Foco</div>
                <i class="bi bi-stopwatch final-highlight-icon"></i>
            </div>
        </div>

        <div class="retrospective-final-other-stats">
            <div class="retrospective-final-other-stat-item" data-final-metric="peakFocus" style="display: none;">
                <i class="bi bi-brightness-high-fill"></i>
                <span>Pico de Foco: <strong id="final-peak-focus-hour">N/A</strong></span>
            </div>
            <div class="retrospective-final-other-stat-item" data-final-metric="longestStreak" style="display: none;">
                <i class="bi bi-fire"></i>
                <span>Maior Streak: <strong id="final-longest-streak">0</strong> dias</span>
            </div>
            <div class="retrospective-final-other-stat-item" data-final-metric="productiveDay" style="display: none;">
                <i class="bi bi-trophy-fill"></i>
                <span>Dia Mais Produtivo: <strong id="final-most-productive-day-short">N/A</strong></span>
            </div>
        </div>

        <div class="retrospective-final-achievements-container" style="display: none;">
            <h3 class="retrospective-final-achievements-title">Conquistas do Mês:</h3>
            <div class="retrospective-final-achievements-list" id="retrospective-achievements-list">
            </div>
        </div>

        <div class="retrospective-final-footer">
            #TaskifyWrapped #Produtividade
        </div>
    </div>


    <div class="retrospective-action-buttons-container">
        <div class="retrospective-action-buttons">
            <button id="retrospective-share-button" class="retrospective-button retrospective-action-button">
                <svg class="twitter-logo-retro" viewBox="0 0 24 24" aria-hidden="true">
                    <g>
                        <path
                            d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z">
                        </path>
                    </g>
                </svg>
                Compartilhar
            </button>
            <button id="retrospective-download-button"
                class="retrospective-button retrospective-action-button retrospective-button-outline">
                <i class="bi bi-download retrospective-icon-small"></i>
                Baixar Imagem
            </button>
        </div>
    </div>
</div>
</file>

</files>
